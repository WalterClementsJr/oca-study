[{"id":1,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \nclass Student {\n    private String name;\n    private int age;\n    \n    Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public String toString() {\n        return \"Student[\" + name + \", \" + age + \"]\";\n    }\n}\n \npublic class Test {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>();\n        students.add(new Student(\"James\", 25));\n        students.add(new Student(\"James\", 27));\n        students.add(new Student(\"James\", 25));\n        students.add(new Student(\"James\", 25));\n        \n        students.remove(new Student(\"James\", 25));\n        \n        for(Student stud : students) {\n            System.out.println(stud);\n        }\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"D","answers":{"A":"Student[James, 27]\nStudent[James, 25]\nStudent[James, 25]\n","B":"Student[James, 25]\nStudent[James, 27]\nStudent[James, 25]\n","C":"Student[James, 27]\n","D":"Student[James, 25]\nStudent[James, 27]\nStudent[James, 25]\nStudent[James, 25]\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"Before you answer this, you must know that there are 5 different Student object created in the memory (4 at the time of adding to the list and 1 at the time of removing from the list). This means these 5 Student objects will be stored at different memory addresses.\n\n\n\nremove(Object) method removes the first occurrence of matching object and equals(Object) method decides whether 2 objects are equal or not. equals(Object) method defined in Object class uses == operator to check the equality and in this case as 5 Student objects are stored at different memory location, hence not equal.\n\n\n\nNothing is removed from the students list, all the 4 Student objects are printed in the insertion order."},{"id":2,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \nclass Student {\n    private String name;\n    private int age;\n    \n    Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public String toString() {\n        return \"Student[\" + name + \", \" + age + \"]\";\n    }\n    \n    public boolean equals(Object obj) {\n        if(obj instanceof Student) {\n            Student stud = (Student)obj;\n            if(this.name.equals(stud.name) && this.age == stud.age) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n \npublic class Test {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>();\n        students.add(new Student(\"James\", 25));\n        students.add(new Student(\"James\", 27));\n        students.add(new Student(\"James\", 25));\n        students.add(new Student(\"James\", 25));\n        \n        students.remove(new Student(\"James\", 25));\n        \n        for(Student stud : students) {\n            System.out.println(stud);\n        }\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"A","answers":{"A":"Student[James, 27]\nStudent[James, 25]\nStudent[James, 25]\n","B":"Student[James, 25]\nStudent[James, 27]\nStudent[James, 25]\n","C":"Student[James, 27]\n","D":"Student[James, 25]\nStudent[James, 27]\nStudent[James, 25]\nStudent[James, 25]\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"Before you answer this, you must know that there are 5 different Student object created in the memory (4 at the time of adding to the list and 1 at the time of removing from the list). This means these 5 Student objects will be stored at different memory addresses.\n\n\n\nremove(Object) method removes the first occurrence of matching object and equals(Object) method decides whether 2 objects are equal or not. equals(Object) method has been overridden by the Student class and equates the object based on their name and age.\n\n\n\n3 matching Student objects are found in the list and 1st list element is removed from the list. Remaining 3 list elements are printed in the insertion order."},{"id":3,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \nclass Student {\n    private String name;\n    private int age;\n    \n    Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public String toString() {\n        return \"Student[\" + name + \", \" + age + \"]\";\n    }\n    \n    public boolean equals(Student obj) {\n        if(obj instanceof Student) {\n            Student stud = (Student)obj;\n            if(this.name.equals(stud.name) && this.age == stud.age) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n \npublic class Test {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>();\n        students.add(new Student(\"James\", 25));\n        students.add(new Student(\"James\", 27));\n        students.add(new Student(\"James\", 25));\n        students.add(new Student(\"James\", 25));\n        \n        students.remove(new Student(\"James\", 25));\n        \n        for(Student stud : students) {\n            System.out.println(stud);\n        }\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"D","answers":{"A":"Student[James, 27]\nStudent[James, 25]\nStudent[James, 25]\n","B":"Student[James, 25]\nStudent[James, 27]\nStudent[James, 25]\n","C":"Student[James, 27]\n","D":"Student[James, 25]\nStudent[James, 27]\nStudent[James, 25]\nStudent[James, 25]\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"Before you answer this, you must know that there are 5 different Student object created in the memory (4 at the time of adding to the list and 1 at the time of removing from the list). This means these 5 Student objects will be stored at different memory addresses.\n\n\n\nremove(Object) method removes the first occurrence of matching object and equals(Object) method decides whether 2 objects are equal or not. equals(Object) method has NOT been overridden by the Student class. In fact, equals(Student) is overloaded. But overloaded version is not invoked while equating the Student objects.\n\n\n\nequals(Object) method defined in Object class is invoked and equals(Object) method defined in Object class uses == operator to check the equality and in this case as all the Student objects are stored at different memory location, hence not equal.\n\n\n\nNothing is removed from the students list, all the 4 Student objects are printed in the insertion order."},{"id":4,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<String> dryFruits = new ArrayList<>();\n        dryFruits.add(\"Walnut\");\n        dryFruits.add(\"Apricot\");\n        dryFruits.add(\"Almond\");\n        dryFruits.add(\"Date\");\n    \n        for(String dryFruit : dryFruits) {\n            if(dryFruit.startsWith(\"A\")) {\n                dryFruits.remove(dryFruit);\n            }\n        }\n        \n        System.out.println(dryFruits);\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"[Walnut, Apricot, Almond, Date]\n\n","B":"[Walnut, Date]\n","C":"An exception is thrown at runtime\n\n","D":"Compilation error\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"ConcurrentModificationException exception may be thrown for following condition:\n\n1. Collection is being iterated using Iterator/ListIterator or by using for-each loop.\n\nAnd\n\n2. Execution of Iterator.next(), Iterator.remove(), ListIterator.previous(), ListIterator.set(E) & ListIterator.add(E) methods. These methods may throw java.util.ConcurrentModificationException in case Collection had been modified by means other than the iterator itself, such as Collection.add(E) or Collection.remove(Object) or List.remove(int) etc.\n\n\n\nPLEASE NOTE: for-each loop internally implements Iterator and invokes hasNext() and next() methods.\n\n\n\nFor the given code, 'dryFruits' list is being iterated using for-each loop (internally as an Iterator).\n\nhasNext() method of Iterator has following implementation:\n\npublic boolean hasNext() {\n    return cursor != size;\n}\nWhere cursor is the index of next element to return and initially it is 0.\n\n\n\n1st Iteration: cursor = 0, size = 4, hasNext() returns true. iterator.next() increments the cursor by 1 and returns \"Walnut\".\n\n2nd Iteration: cursor = 1, size = 4, hasNext() returns true. iterator.next() increments the cursor by 1 and returns \"Apricot\". As \"Apricot\" starts with \"A\", hence dryFruits.remove(dryFruit) removes \"Apricot\" from the list and hence reducing the list's size by 1, size becomes 3.\n\n3rd Iteration: cursor = 2, size = 3, hasNext() returns true. iterator.next() method throws java.util.ConcurrentModificationException.\n\n\n\nIf you want to successfully remove the items from ArrayList, while using Iterator or ListIterator, then use Iterator.remove() or ListIterator.remove() method and NOT List.remove(...) method. Using List.remove(...) method while iterating the list (using the Iterator/ListIterator or for-each) may throw java.util.ConcurrentModificationException."},{"id":5,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<String> dryFruits = new ArrayList<>();\n        dryFruits.add(\"Walnut\");\n        dryFruits.add(\"Apricot\");\n        dryFruits.add(\"Almond\");\n        dryFruits.add(\"Date\");\n    \n        Iterator<String> iterator = dryFruits.iterator();\n        while(iterator.hasNext()) {\n            String dryFruit = iterator.next();\n            if(dryFruit.startsWith(\"A\")) {\n                dryFruits.remove(dryFruit);\n            }\n        }\n        \n        System.out.println(dryFruits);\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"[Walnut, Apricot, Almond, Date]\n\n","B":"[Walnut, Date]\n","C":"An exception is thrown at runtime\n\n","D":"Compilation error\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"ConcurrentModificationException exception may be thrown for following condition:\n\n1. Collection is being iterated using Iterator/ListIterator or by using for-each loop.\n\nAnd\n\n2. Execution of Iterator.next(), Iterator.remove(), ListIterator.previous(), ListIterator.set(E) & ListIterator.add(E) methods. These methods may throw java.util.ConcurrentModificationException in case Collection had been modified by means other than the iterator itself, such as Collection.add(E) or Collection.remove(Object) or List.remove(int) etc.\n\n\n\nFor the given code, 'dryFruits' list is being iterated using the Iterator<String>.\n\nhasNext() method of Iterator has following implementation:\n\npublic boolean hasNext() {\n    return cursor != size;\n}\nWhere cursor is the index of next element to return and initially it is 0.\n\n\n\n1st Iteration: cursor = 0, size = 4, hasNext() returns true. iterator.next() increments the cursor by 1 and returns \"Walnut\".\n\n2nd Iteration: cursor = 1, size = 4, hasNext() returns true. iterator.next() increments the cursor by 1 and returns \"Apricot\". As \"Apricot\" starts with \"A\", hence dryFruits.remove(dryFruit) removes \"Apricot\" from the list and hence reducing the list's size by 1, size becomes 3.\n\n3rd Iteration: cursor = 2, size = 3, hasNext() returns true. iterator.next() method throws java.util.ConcurrentModificationException.\n\n\n\nIf you want to remove the items from ArrayList, while using Iterator or ListIterator, then use Iterator.remove() or ListIterator.remove() method and NOT List.remove(...) method. Using List.remove(...) method while iterating the list (using the Iterator/ListIterator or for-each) may throw java.util.ConcurrentModificationException."},{"id":6,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ListIterator;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<String> dryFruits = new ArrayList<>();\n        dryFruits.add(\"Walnut\");\n        dryFruits.add(\"Apricot\");\n        dryFruits.add(\"Almond\");\n        dryFruits.add(\"Date\");\n    \n        ListIterator<String> iterator = dryFruits.listIterator();\n        while(iterator.hasNext()) {\n            if(iterator.next().startsWith(\"A\")) {\n                iterator.remove();\n            }\n        }\n        \n        System.out.println(dryFruits);\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"B","answers":{"A":"[Walnut, Apricot, Almond, Date]\n\n","B":"[Walnut, Date]\n","C":"An exception is thrown at runtime\n\n","D":"Compilation error\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"If you want to remove the items from ArrayList, while using Iterator or ListIterator, then use Iterator.remove() or ListIterator.remove() method and NOT List.remove() method.\n\nIn this case ListIterator.remove() method is used. startsWith(\"A\") returns true for \"Apricot\" and \"Almond\" so these elements are removed from the list. In the output, [Walnut, Date] is displayed."},{"id":7,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<StringBuilder> dryFruits = new ArrayList<>();\n        dryFruits.add(new StringBuilder(\"Walnut\"));\n        dryFruits.add(new StringBuilder(\"Apricot\"));\n        dryFruits.add(new StringBuilder(\"Almond\"));\n        dryFruits.add(new StringBuilder(\"Date\"));\n    \n        for(int i = 0; i < dryFruits.size(); i++) \n        {\n            if(i == 0) {\n                dryFruits.remove(new StringBuilder(\"Almond\"));\n            }\n        }\n        \n        System.out.println(dryFruits);\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"A","answers":{"A":"[Walnut, Apricot, Almond, Date]\n\n","B":"[Walnut, Date]\n","C":"An exception is thrown at runtime\n\n","D":"[Walnut, Apricot, Date]\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"In this example, code is trying to remove an item from the list while iterating using traditional for loop so one can think that this code would throw java.util.ConcurrentModificationException.\n\n\n\nBut note, java.util.ConcurrentModificationException will never be thrown for traditional for loop. It is thrown for for-each loop or while using Iterator/ListIterator.\n\n\n\nIn this case dryFruits.remove(new StringBuilder(\"Almond\")); will never remove any items from the list as StringBuilder class doesn't override the equals(Object) method of Object class.\n\n\n\nStringBuilder instances created at \"dryFruits.add(new StringBuilder(\"Almond\"));\" and \"dryFruits.remove(new StringBuilder(\"Almond\"));\" are at different memory locations and equals(Object) method returns false for these instances."},{"id":8,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        StringBuilder sb = new StringBuilder(\"Hello\");\n        List<StringBuilder> list = new ArrayList<>();\n        list.add(sb);\n        list.add(new StringBuilder(\"Hello\"));\n        list.add(sb);\n        sb.append(\"World!\");\n        \n        System.out.println(list);\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"[Hello, Hello, Hello]\n\n","B":"[HelloWorld!, Hello, Hello]\n","C":"[HelloWorld!, Hello, HelloWorld!]\n\n","D":"[HelloWorld!, HelloWorld!, HelloWorld!]\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"ArrayList's 1st and 3rd items are referring to same StringBuilder instance referred by sb [sb --> {Hello}] and 2nd item is referring to another instance of StringBuilder. \n\n\n\nsb.append(\"World!\"); means sb --> {HelloWorld!}, which means 1st and 3rd items of ArrayList now refers to StringBuilder instance containing HelloWorld!   \n\n\n\nIn the output, [HelloWorld!, Hello, HelloWorld!] is printed."},{"id":9,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        String s = new String(\"Hello\");\n        List<String> list = new ArrayList<>();\n        list.add(s);\n        list.add(new String(\"Hello\"));\n        list.add(s);\n        s.replace(\"l\", \"L\");\n        \n        System.out.println(list);\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"A","answers":{"A":"[Hello, Hello, Hello]\n\n","B":"[HeLLo, Hello, Hello]\n","C":"[HeLLo, Hello, HeLLo]\n\n","D":"[HeLLo, HeLLo, HeLLo]\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"ArrayList's 1st and 3rd items are referring to same String instance referred by s [s --> \"Hello\"] and 2nd item is referring to another instance of String.\n\nString is immutable, which means s.replace(\"l\", \"L\"); creates another String instance \"HeLLo\" but s still refers to \"Hello\" [s --> \"Hello\"]. \n\n[Hello, Hello, Hello] is printed in the output."},{"id":10,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add(\"ONE\");\n        list.add(\"TWO\");\n        list.add(\"THREE\");\n        list.add(\"THREE\");\n        \n        if(list.remove(2)) {\n            list.remove(\"THREE\");\n        }\n        \n        System.out.println(list);\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"D","answers":{"A":"'[ONE, TWO, THREE, THREE]\n\n","B":"'[ONE, TWO, THREE]\n","C":"[ONE, TWO]\n","D":"Compilation error\n\n","E":"An exception is thrown at runtime\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"list.remove(Object) method returns boolean result but list.remove(int index) returns the removed item from the list, which in this case is of String type and not Boolean type and hence if(list.remove(2)) causes compilation error."},{"id":11,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<Boolean> list = new ArrayList<>();\n        list.add(true);\n        list.add(new Boolean(\"tRue\"));\n        list.add(new Boolean(\"abc\"));\n        \n        if(list.remove(1)) {\n            list.remove(1);\n        }\n        \n        System.out.println(list);\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"Compilation error\n\n","B":"An exception is thrown at runtime\n","C":"[true]\n","D":"'[false]\n\n","E":"'[true, false]\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"list.add(true); => Auto-boxing converts boolean literal true to Boolean instance containing true. Element at index 0 represents true.\n\n\n\nBoolean class code uses equalsIgnoreCase method to validate the passed String, so if passed String is \"true\" ('t', 'r', 'u' and 'e' can be in any case), then boolean value stored in Boolean object is true otherwise false. \n\n\n\nlist.add(new Boolean(\"tRue\")); => Element at index 1 represents true.\n\n\n\nlist.add(new Boolean(\"abc\")); => Element at index 2 represents false.\n\n\n\nSo initially list contains [true, true, false]. \n\n\n\nAs generic list is used, so list.remove(1) removes the Boolean instance (true) stored at index 1 and returns it. So after this operation list contains [true, false]. \n\n\n\nFor the boolean expression of if-block, Java runtime extracts the stored boolean value using booleanValue() method, which returns true. Control goes inside if-block and executes list.remove(1);  This removes element at index 1 so after this operation list contains [true] and [true] is printed on to the console."},{"id":12,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        Boolean [] arr = new Boolean[2];\n        List<Boolean> list = new ArrayList<>();\n        list.add(arr[0]);\n        list.add(arr[1]);\n        \n        if(list.remove(0)) {\n            list.remove(1);\n        }\n        \n        System.out.println(list);\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"Compilation error\n\n","B":"ArrayIndexOutOfBoundsException is thrown at runtime\n","C":"NullPointerException is thrown at runtime\n","D":"[true]\n\n","E":"[false]\n","F":"[]\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"Default values are assigned to all array elements. As Boolean is of reference type, hence arr[0] = null and arr[1] = null. After addition list contains [null, null].\n\n\n\nlist.remove(0) removes and returns the Boolean object referring to null. If expression can specify Boolean type, so no compilation error over here. At this point list contains [null]. \n\n\n\nFor the boolean expression of if-block, Java runtime tries to extract the stored boolean value using booleanValue() method, and this throws an instance of NullPointerException as booleanValue() method is invoked on null reference."},{"id":13,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<String> list1 = new ArrayList<>();\n        list1.add(\"A\");\n        list1.add(\"D\");\n        \n        List<String> list2 = new ArrayList<>();\n        list2.add(\"B\");\n        list2.add(\"C\");\n        \n        list1.addAll(1, list2);\n        \n        System.out.println(list1);\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"A","answers":{"A":"[A, B, C, D]\n\n","B":"[A, D, B, C]\n","C":"[A, D]\n\n","D":"[A, B, C]\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"list1 --> [A, D], \n\nlist2 --> [B, C], \n\nlist1.addAll(1, list2); is almost equal to list1.add(1, [B, C]); => Inserts B at index 1, C takes index 2 and D is moved to index 3.\n\nlist1 --> [A, B, C, D]"},{"id":14,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add(0, \"Array\");\n        list.add(0, \"List\");\n        \n        System.out.println(list);\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"D","answers":{"A":"[Array]\n\n","B":"[List]\n","C":"[Array, List]\n","D":"[List, Array]\n\n","E":"An exception is thrown at runtime\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"list.add(0, \"Array\"); means list --> [Array],   \n\nlist.add(0, \"List\"); means insert \"List\" to 0th index and shift \"Array\" to right.\n\nSo after this operation, list --> [List, Array].\n\nIn the console, [List, Array] is printed."},{"id":15,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add(0, \"Array\");\n        list.set(0, \"List\");\n        \n        System.out.println(list);\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"B","answers":{"A":"[Array]\n\n","B":"[List]\n","C":"[Array, List]\n","D":"[List, Array]\n\n","E":"An exception is thrown at runtime\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"list.add(0, \"Array\"); means list --> [Array],   \n\nlist.set(0, \"List\"); means replace the current element at index 0 with the passed element \"List\".\n\nSo after this operation, list --> [List].\n\nIn the console, [List] is printed."},{"id":16,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>(4);\n        list.add(0, \"Array\");\n        list.add(2, \"List\");\n        \n        System.out.println(list);\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"[Array, List]\n\n","B":"[Array, null, List, null]\n","C":"An exception is thrown at runtime\n\n","D":"Compilation error\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"ArrayList are different than arrays, though behind the scene ArrayList uses Object[] to store its elements. \n\n\n\nThere are 2 things related to ArrayList, one is capacity and another is actual elements stored in the list, returned by size() method. If you don't pass anything to the ArrayList constructor, then default capacity is 10 but this doesn't mean that an ArrayList instance will be created containing 10 elements and all will be initialized to null. \n\n\n\nIn fact, size() method will still return 0 for this list. This list still doesn't contain even a single element. You need to use add method or its overloaded counterpart to add items to the list. Even if you want to add null values, you should still invoke some methods, nothing happens automatically.\n\n\n\nIn this question, new ArrayList<>(4); creates an ArrayList instance which can initially store 4 elements but currently it doesn't store any data. \n\n\n\nAnother point you should remember for the certification exam: Addition of elements in ArrayList should be continuous. If you are using add(index, Element) method to add items to the list, then index should be continuous, you simply can't skip any index.\n\n\n\nIn this case, list.add(0, \"Array\"); adds \"Array\" to 0th index. so after this operation list --> [Array].  You can now add at 0th index (existing elements will be shifted right) or you can add at index 1 but not at index 2. list.add(2, \"List\"); throws an instance of java.lang.IndexOutOfBoundsException."},{"id":17,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\n \nclass Counter {\n    int count;\n    Counter(int count) {\n        this.count = count;\n    }\n    \n    public String toString() {\n        return \"Counter-\" + count;\n    }\n}\n \npublic class Test {\n    public static void main(String[] args) {\n        ArrayList<Counter> original = new ArrayList<>();\n        original.add(new Counter(10));\n        \n        ArrayList<Counter> cloned = (ArrayList<Counter>) original.clone();\n        cloned.get(0).count = 5;\n        \n        System.out.println(original);\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"A","answers":{"A":"[Counter-5]\n\n","B":"[Counter-10]\n","C":"Compilation error\n\n","D":"An exception is thrown at runtime\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":""},{"id":18,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code:\n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\n \npublic class Test {\n    public static void main(String[] args) {\n        ArrayList<Integer> original = new ArrayList<>();\n        original.add(new Integer(10));\n        \n        ArrayList<Integer> cloned = (ArrayList<Integer>) original.clone();\n        Integer i1 = cloned.get(0);\n        ++i1;\n        \n        System.out.println(cloned);\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"B","answers":{"A":"[11]\n\n","B":"[10]\n","C":"Compilation error\n\n","D":"An exception is thrown at runtime\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":""},{"id":19,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code:\n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<String> trafficLight = new ArrayList<>();\n        trafficLight.add(1, \"RED\");\n        trafficLight.add(2, \"ORANGE\");\n        trafficLight.add(3, \"GREEN\");\n        \n        trafficLight.remove(new Integer(2));\n        \n        System.out.println(trafficLight);\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"B","answers":{"A":"Compilation error\n\n","B":"An exception is thrown at runtime\n","C":"[RED, GREEN]\n\n","D":"[RED, ORANGE]\n","E":"[RED, ORANGE, GREEN]\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"There is no element at index 0 so call to add element at index 1, \"trafficLight.add(1, \"RED\");\" throws an instance of java.lang.IndexOutOfBoundsException. \n\ntrafficLight.remove(new Integer(2)); matches with trafficLight.remove(Object) and hence no compilation error."},{"id":20,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<String> days = new ArrayList<>();\n        days.add(\"SUNDAY\");\n        days.add(\"SUNDAY\");\n        days.add(\"MONDAY\");\n        System.out.println(days.size());\n        days.clear();\n        System.out.println(days.size());\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"B","answers":{"A":"3\n3\n","B":"3\n0\n","C":"2\n0\n","D":"An exception is thrown at runtime\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"ArrayList can have duplicate elements, so after addition, list is: [SUNDAY, SUNDAY, MONDAY]. days.size() returns 3 so 3 is printed on to the console. \n\ndays.clear(); removes all the elements from the days list, in fact days list will be empty after successful execution of days.clear();\n\nSo 2nd System.out.println statement prints 0 on to the console."},{"id":21,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<StringBuilder> days = new ArrayList<>();\n        days.add(new StringBuilder(\"Sunday\"));\n        days.add(new StringBuilder(\"Monday\"));\n        days.add(new StringBuilder(\"Tuesday\"));\n        \n        if(days.contains(new StringBuilder(\"Sunday\"))) {\n            days.add(new StringBuilder(\"Wednesday\"));\n        }\n        \n        System.out.println(days.size());\n    }\n}\n \nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"B","answers":{"A":"4\n","B":"3\n","C":"Compilation error\n\n","D":"Runtime exception\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"StringBuilder class doesn't override equals(Object) method and hence days.contains(new StringBuilder(\"Sunday\")) returns false.\n\nCode inside if-block is not executed and days.size() returns 3."},{"id":22,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"For the given code snippet:\n\nList<String> list = new /*INSERT*/(); \n\nWhich of the following options, if used to replace /*INSERT*/, compiles successfully?\n\nSelect 2 options.","type":"Multiple Choice","answer":"C,D","answers":{"A":"List<String>\n\n","B":"List<>\n","C":"ArrayList<String>\n","D":"ArrayList<>\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"List is an interface so its instance can't be created using new keyword. List<String> and List<> will cause compilation failure.\n\nArrayList implements List interface, so it can be it can be used to replace /*INSERT*/. List<String> list = new ArrayList<String>(); compiles successfully.\n\n\n\nStarting with JDK 7, Java allows to not specify type while initializing the ArrayList. Type is inferred from the left side of the statement.\n\n\n\nSo List<String> list = new ArrayList<>(); is a valid syntax starting with JDK 7."},{"id":23,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code snippet:\n\npublic static void process(/*INSERT*/ list) {\n    list.add(100); //Line 2\n    int x = list.get(0); //Line 3\n    System.out.println(list.size() + \":\" + x);\n}\nWhich of the following options, if used to replace /*INSERT*/, compiles successfully?","type":"Single Choice","answer":"B","answers":{"A":"List\n\n","B":"List<Integer>\n","C":"List<Object>\n\n","D":"List<int>\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"Generic type can only be reference type and not primitive type, hence List<int> is not a valid syntax.\n\n\n\nIf you use raw type List or List<Object> then Line 3 will give compilation error as list.get(0) will return Object type. Object type cannot be converted to primitive type int, so List and List<Object> will cause compilation failure of Line 3.\n\n\n\nList<Integer> is the only correct option left."},{"id":24,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider code of Test.java file:\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<Character> list = new ArrayList<>();\n        list.add(0, 'V');\n        list.add('T');\n        list.add(1, 'E');\n        list.add(3, 'O');\n        \n        if(list.contains('O')) {\n            list.remove(3);\n        }\n        \n        for(char ch : list) {\n            System.out.print(ch);\n        }\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"Compilation error\n\n","B":"Runtime error\n","C":"VET\n","D":"VTE\n\n","E":"VTEO\n","F":"VETO\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"list.add(0, 'V'); => char 'V' is converted to Character object and stored as the first element in the list. list --> [V]. \n\nlist.add('T'); => char 'T' is auto-boxed to Character object and stored at the end of the list. list --> [V,T]. \n\nlist.add(1, 'E'); => char 'E' is auto-boxed to Character object and inserted at index 1 of the list, this shifts T to the right. list --> [V,E,T]. \n\nlist.add(3, 'O'); => char 'O' is auto-boxed to Character object and added at index 3 of the list. list --> [V,E,T,O].\n\nlist.contains('O') => char 'O' is auto-boxed to Character object and as Character class overrides equals(String) method this expression returns true. Control goes inside if-block and executes: list.remove(3);. \n\nlist.remove(3); => Removes last element of the list. list --> [V,E,T].\n\nfor(char ch : list) => First list item is Character object, which is auto-unboxed and assigned to ch. This means in first iteration ch = 'V'; And after this it is simple enhanced for loop.\n\nOutput is VET."},{"id":25,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider code of Test.java file:\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<Character> list = new ArrayList<>();\n        list.add(0, 'V');\n        list.add('T');\n        list.add(1, 'E');\n        list.add(3, 'O');\n        \n        if(list.contains('O')) {\n            list.remove('O');\n        }\n        \n        for(char ch : list) {\n            System.out.print(ch);\n        }\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"B","answers":{"A":"Compilation error\n\n","B":"Runtime exception\n","C":"VET\n","D":"VTE\n\n","E":"VTEO\n","F":"VETO\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"list.add(0, 'V'); => char 'V' is converted to Character object and stored as the first element in the list. list --> [V]. \n\nlist.add('T'); => char 'T' is auto-boxed to Character object and stored at the end of the list. list --> [V,T]. \n\nlist.add(1, 'E'); => char 'E' is auto-boxed to Character object and inserted at index 1 of the list, this shifts T to the right. list --> [V,E,T]. \n\nlist.add(3, 'O'); => char 'O' is auto-boxed to Character object and added at index 3 of the list. list --> [V,E,T,O].\n\nlist.contains('O') => char 'O' is auto-boxed to Character object and as Character class overrides equals(String) method this expression returns true. Control goes inside if-block and executes: list.remove('O');.\n\n\n\nremove method is overloaded: remove(int) and remove(Object). char can be easily assigned to int so compiler tags remove(int) method. list.remove(<ASCCI value of 'O'>); ASCCI value of 'A' is 65 (this everybody knows) so ASCII value of 'O' will be more than 65.\n\n\n\nlist.remove('O') throws runtime exception, as it tries to remove an item from the index greater than 65 but allowed index is 0 to 3 only."},{"id":26,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider the code snippet:\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    List list1 = new ArrayList<String>(); //Line 5\n    List<String> list2 = new ArrayList(); //Line 6\n    List<> list3 = new ArrayList<String>(); //Line 7\n    List<String> list4 = new ArrayList<String>(); //Line 8\n    List<String> list5 = new ArrayList<>(); //Line 9\n}\n\n\nWhich of the following statements compile without any warning?\n\nSelect 2 options.","type":"Multiple Choice","answer":"D,E","answers":{"A":"Line 5\n","B":"Line 6\n","C":"Line 7\n","D":"Line 8\n","E":"Line 9\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"Line 8's syntax was added in JDK 5 and it compiles without any warnings. \n\n\n\nLine 9's syntax was added in JDK 7, in which type parameter can be ignored from right side of the statement, it is inferred from left side, so Line 9 also compiles without any warning. \n\n\n\nType parameter can't be removed from declaration part, hence Line 7 causes compilation error. \n\n\n\nBoth Line 5 and Line 6 are mixing Generic type with Raw type and hence warning is given by the compiler."},{"id":27,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code of Test.java file: \n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \ninterface Sellable {}\nabstract class Animal {}\nclass Mammal extends Animal{}\nclass Rabbit extends Mammal implements Sellable{}\n \npublic class Test {\n    {\n        List<Animal> list = new ArrayList<>();\n        list.add(new Rabbit());\n    }\n    {\n        List<Animal> list = new ArrayList<>();\n        list.add(new Mammal());\n    }\n    {\n        List<Mammal> list = new ArrayList<>();\n        list.add(new Rabbit());\n    }\n    {\n        List<Sellable> list = new ArrayList<>();\n        list.add(new Mammal());\n    }\n    {\n        List<Sellable> list = new ArrayList<>();\n        list.add(new Rabbit());\n    }\n}\nWhich of the following statement is true?","type":"Single Choice","answer":"A","answers":{"A":"Only one initializer block causes compilation error.\n\n","B":"Two initializer blocks cause compilation error.\n","C":"Three initializer blocks cause compilation error.\n","D":"Four initializer blocks cause compilation error.\n\n","E":"Five initializer blocks cause compilation error.\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"Even though code seems to be checking the knowledge of ArrayList but it actually checks the knowledge of Polymorphism. \n\nList<Sellable> list = new ArrayList<>(); is valid statement and list can accept any object passing instanceof check for Sellable type. \n\nRabbit implements Sellable hence new Rabbit() can be added to list. \n\nBut as Mammal doesn't implement Sellable hence new Mammal() can't be added to list.\n\n\n\nOther initializer blocks can be verified on similar lines. So there is only one initializer block, which causes compilation error."},{"id":28,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Below is the code of Test.java file:\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \nabstract class Animal {}\nclass Dog extends Animal{}\n \npublic class Test {\n    public static void main(String [] args) {\n        List<Animal> list = new ArrayList<Dog>();\n        list.add(0, new Dog());\n        System.out.println(list.size() > 0);\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"true\n","B":"false\n","C":"Compilation error\n\n","D":"Runtime exception\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"Explanation\nList is super type and ArrayList is sub type, hence List l = new ArrayList(); is valid syntax. \n\nAnimal is super type and Dog is sub type, hence Animal a = new Dog(); is valid syntax. Both depicts Polymorphism.\n\n\n\nBut in generics syntax, Parameterized types are not polymorphic, this means ArrayList<Animal> is not super type of ArrayList<Dog>. Remember this point. So below syntaxes are not allowed: \n\nArrayList<Animal> list = new ArrayList<Dog>();\n\nOR\n\nList<Animal> list = new ArrayList<Dog>();"},{"id":29,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Below is the code of Test.java file:\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String [] args) {\n        List<Integer> list = new ArrayList<Integer>();\n        list.add(new Integer(2));\n        list.add(new Integer(1));\n        list.add(new Integer(0));\n        \n        list.remove(list.indexOf(0));\n        \n        System.out.println(list);\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"D","answers":{"A":"Compilation error\n\n","B":"An exception is thrown at runtime\n","C":"[1, 0]\n\n","D":"[2, 1]\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"remove method of List interface is overloaded: remove(int) and remove(Object).\n\nindexOf method accepts argument of Object type, in this case list.indexOf(0) => 0 is auto-boxed to Integer object so no issues with indexOf code. list.indexOf(0) returns 2 (index at which 0 is stored in the list). So list.remove(list.indexOf(0)); is converted to list.remove(2);\n\nremove(int) version is matched, it's a direct match so compiler doesn't do auto-boxing in this case. list.remove(2) removes the element at index 2, which is 0. \n\nHence in the output, you get [2, 1]."},{"id":30,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Below is the code of Test.java file:\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String [] args) {\n        List<Integer> list = new ArrayList<Integer>();\n        \n        list.add(27);\n        list.add(27);\n        \n        list.add(new Integer(27));\n        list.add(new Integer(27));\n                \n        System.out.println(list.get(0) == list.get(1));\n        System.out.println(list.get(2) == list.get(3));\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"D","answers":{"A":"false\nfalse\n\n","B":"false\ntrue\n","C":"true\ntrue\n\n","D":"true\nfalse\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"This is bit tricky. Just remember this:\n\nTwo instances of following wrapper objects, created through auto-boxing will always be same, if their primitive values are same:\n\nBoolean,\n\nByte,\n\nCharacter from \\u0000 to \\u007f (7f equals to 127),\n\nShort and Integer from -128 to 127. \n\n\n\nFor 1st statement, list.add(27); => Auto-boxing creates an integer object for 27. \n\nFor 2nd statement, list.add(27); => Java compiler finds that there is already an Integer object in the memory with value 27, so it uses the same object.\n\n\n\nThat is why System.out.println(list.get(0) == list.get(1)); returns true. \n\n\n\nnew Integer(27) creates a new Object in the memory, so System.out.println(list.get(2) == list.get(3)); returns false."},{"id":31,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        list.add(100);\n        list.add(200);\n        list.add(100);\n        list.add(200);\n        list.remove(100);\n        \n        System.out.println(list);\n    }\n}","type":"Single Choice","answer":"F","answers":{"A":"[200, 100, 200]\n\n","B":"[100, 200, 200]\n","C":"[200, 200]\n","D":"[200]\n\n","E":"Compilation error\n","F":"Exception is thrown at runtime\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"'List cannot accept primitives, it can accept objects only. So, when 100 and 200 are added to the list, then auto-boxing feature converts these to wrapper objects of Integer type.\n\nSo, 4 items gets added to the list. One can expect the same behavior with remove method as well that 100 will be auto-boxed to Integer object.\n\nBut remove method is overloaded in List interface: remove(int) => Removes the element from the specified position in this list\n\nand remove(Object)  => Removes the first occurrence of the specified element from the list.\n\nAs remove(int) version is available, which perfectly matches with the call remove(100); hence compiler does not do auto-boxing in this case.\n\nBut at runtime remove(100) tries to remove the element at 100th index and this throws IndexOutOfBoundsException."},{"id":32,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        list.add(100);\n        list.add(200);\n        list.add(100);\n        list.add(200);\n        list.remove(new Integer(100));\n        \n        System.out.println(list);\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"[200, 100, 200]\n\n","B":"[100, 200, 200]\n","C":"[200, 200]\n","D":"[200]\n\n","E":"Compilation error\n","F":"Exception is thrown at runtime\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"List cannot accept primitives, it can accept objects only. So, when 100 and 200 are added to the list, then auto-boxing feature converts these to wrapper objects of Integer type.\n\nSo, 4 items gets added to the list: [100, 200, 100, 200]. list.remove(new Integer(100)); removes the first occurrence of 100 from the list, which means the 1st element of the list.\n\nAfter removal list contains: [200, 100, 200].\n\nNOTE: String class and all the wrapper classes override equals(Object) method, hence at the time of removal when another instance is passes[new Integer(100)], there is no issue in removing the matching item."},{"id":33,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<String> fruits = new ArrayList<>();\n        fruits.add(\"apple\");\n        fruits.add(\"orange\");\n        fruits.add(\"grape\");\n        fruits.add(\"mango\");\n        fruits.add(\"banana\");\n        fruits.add(\"grape\");\n        \n        if(fruits.remove(\"grape\"))\n            fruits.remove(\"papaya\");\n        \n        System.out.println(fruits);\n    }\n}","type":"Single Choice","answer":"D","answers":{"A":"An exception is thrown at runtime\n\n","B":"Compilation error\n","C":"[apple, orange, mango, banana]\n\n","D":"[apple, orange, mango, banana, grape]\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"remove(Object) method of List interface removes the first occurrence of the specified element from the list, if it is present. If this list does not contain the element, it is unchanged. remove(Object) method returns true, if removal was successful otherwise false.\n\n\n\nInitially list has: [apple, orange, grape, mango, banana, grape]. fruits.remove(\"grape\") removes the first occurrence of \"grape\" and after the successful remove, list has: [apple, orange, mango, banana, grape]. fruits.remove(\"grape\") returns true, control goes inside if block and executes fruits.remove(\"papaya\");\n\n\n\nfruits list doesn't have \"papaya\", so the list remain unchanged. In the console, you get: [apple, orange, mango, banana, grape]."},{"id":34,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<String> fruits = new ArrayList<>();\n        fruits.add(\"apple\");\n        fruits.add(\"orange\");\n        fruits.add(\"grape\");\n        fruits.add(\"mango\");\n        fruits.add(\"banana\");\n        fruits.add(\"grape\");\n        \n        if(fruits.remove(\"grape\"))\n            fruits.remove(\"apple\");\n        \n        System.out.println(fruits);\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"An exception is thrown at runtime\n\n","B":"Compilation error\n","C":"[orange, mango, banana, grape]\n\n","D":"[orange, grape, mango, banana]\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"remove(Object) method of List interface removes the first occurrence of the specified element from the list, if it is present. If this list does not contain the element, it is unchanged. remove(Object) method returns true, if removal was successful otherwise false.\n\n\n\nInitially list has: [apple, orange, grape, mango, banana, grape]. fruits.remove(\"grape\") removes the first occurrence of \"grape\" and after the successful remove, list has: [apple, orange, mango, banana, grape]. fruits.remove(\"grape\") returns true, control goes inside if block and executes fruits.remove(\"apple\");\n\n\n\nfruits list contains \"apple\", so after the removal list has: [orange, mango, banana, grape]."},{"id":35,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add(null);\n        list.add(null);\n        list.add(null);\n        System.out.println(list.remove(0) + \":\" + list.remove(null));\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"true:true\n\n","B":"true:false\n","C":"null:true\n","D":"null:null\n\n","E":"NullPointerException is thrown at runtime\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"It is possible to add null to ArrayList instant.\n\nInitially list has 3 elements: [null, null, null].\n\nremove(int) returns the deleted member of the list. In this case `list.remove(0);` returns null as null was deleted from the 0th index. So, list is left with 2 elements: [null, null].\n\nremove(Object) returns true if deletion was successful otherwise false.\n\nIn this case `list.remove(null)` removes first null from the list and returns true and list is left with just one element: [null].\n\nHence, the output is: 'null:true'."},{"id":36,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code of Test.java file:\n\npackage com.udayankhattry.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        byte b = 10;\n        list.add(b); //Line n1\n        int mul = list.get(0) * list.get(0); //Line n2\n        System.out.println(mul);\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"A","answers":{"A":"Line n1 causes compilation error\n\n","B":"Line n2 causes compilation error\n","C":"An exception is thrown at runtime\n","D":"10\n","E":"100\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"list is of Integer type and variable 'b' is of byte type.\n\nAt Line n1, b is auto-boxed to Byte and not Integer and List<Integer> can't store Byte objects, therefore Line n1 causes compilation error.\n\n\n\nlist.get(0) returns Integer and `list.get(0) * list.get(0)` is evaluated to int, and variable 'mul' is of int type only. Therefore, Line n2 compiles successfully."},{"id":37,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code of Test.java file:\n\npackage com.udayankhattry.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<String> list;\n        list = new ArrayList<>(); //Line n1\n        list.add(\"A\");\n        list.add(\"E\");\n        list.add(\"I\");\n        list.add(\"O\");\n        list.add(\"U\");\n        list.addAll(list.subList(0, 4)); //Line n2\n        System.out.println(list);\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"F","answers":{"A":"Line n1 causes compilation error\n\n","B":"Line n2 causes compilation error\n","C":"An exception is thrown at runtime by Line n2\n","D":"[A, E, I, O, U]\n\n","E":"[A, E, I, O, U, A, E, I, O, U]\n","F":"[A, E, I, O, U, A, E, I, O]\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"Starting with JDK 7, Java allows to not specify type while initializing the ArrayList. As variable list is of List<String> type, therefore type of ArrayList is considered as String. Line n1 compiles successfully.\n\n\n\nsublist method is declared in List interface:\n\nList<E> subList(int fromIndex, int toIndex)\n\nfromIndex is inclusive and toIndex is exclusive\n\nIt returns a view of the portion of this list between the specified fromIndex and toIndex. The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list and vice-versa.\n\nIf returned list (or view) is structurally modified, then modification are reflected in this list as well but if this list is structurally modified, then the semantics of the list returned by this method become undefined.\n\nIf fromIndex == toIndex, then returned list is empty.\n\nIf fromIndex < 0 OR toIndex > size of the list OR fromIndex > toIndex, then IndexOutOfBoundsException is thrown.\n\n\n\nAt Line n2, list.subList(0, 4) --> [A, E, I, O] (toIndex is Exclusive, therefore start index is 0 and end index is 3].\n\n\n\nlist.addAll(list.subList(0, 4)); is almost equal to list.addAll(5, [A, E, I, O]); => Inserts A at index 5, E takes index 6, I takes index 7 and O is placed at index 8. list --> [A, E, I, O, U, A, E, I, O]\n\n\n\nLast statement inside main(String []) method prints [A, E, I, O, U, A, E, I, O] on to the console."},{"id":38,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code of Test.java file:\n\npackage com.udayankhattry.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add(\"P\");\n        list.add(\"O\");\n        list.add(\"T\");\n \n        List<String> subList = list.subList(1, 2); //Line n1\n        subList.set(0, \"E\"); //Line n2\n        System.out.println(list);\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"A","answers":{"A":"[P, E, T]\n\n","B":"[P, O, T]\n","C":"Compilation error\n\n","D":"An exception is thrown by Line n2\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"list --> [P, O, T]\n\n\n\nsublist method is declared in List interface:\n\nList<E> subList(int fromIndex, int toIndex)\n\nfromIndex is inclusive and toIndex is exclusive\n\nIt returns a view of the portion of this list between the specified fromIndex and toIndex. The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list and vice-versa.\n\nIf returned list (or view) is structurally modified, then modification are reflected in this list as well but if this list is structurally modified, then the semantics of the list returned by this method become undefined.\n\nIf fromIndex == toIndex, then returned list is empty.\n\nIf fromIndex < 0 OR toIndex > size of the list OR fromIndex > toIndex, then IndexOutOfBoundsException is thrown.\n\n\n\nlist.subList(1, 2) --> [O] (fromIndex is inclusive and endIndex is exclusive, so start index is 1 and end index is also 1). subList --> [O].\n\nAt Line n2, `subList.set(0, \"E\");` => sublist --> [E]. This change is also reflected in the backed list, therefore after this statement, list --> [P, E, T]\n\n\n\n`System.out.println(list);` prints [P, E, T] on to the console."},{"id":39,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Below is the code of Test.java file:\n\npackage com.udayankhattry.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<String> places = new ArrayList<>();\n        places.add(\"Austin\");\n        places.add(\"Okinawa\");\n        places.add(\"Giza\");\n        places.add(\"Manila\");\n        places.add(\"Batam\");\n        places.add(\"Giza\");\n        \n        if(places.remove(\"Giza\"))\n            places.remove(\"Austin\");\n        \n        System.out.println(places);\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"G","answers":{"A":"An exception is thrown at runtime\n\n","B":"Compilation error\n","C":"[Okinawa, Manila, Batam]\n","D":"[Austin, Okinawa, Giza, Manila, Batam, Giza]\n\n","E":"[Austin, Okinawa, Manila, Batam, Giza]\n","F":"[Austin, Okinawa, Manila, Batam]\n","G":"[Okinawa, Manila, Batam, Giza]\n\n","H":"[Okinawa, Giza, Manila, Batam]\n","I":"\n","J":"\n"},"explanation":"remove(Object) method of List interface removes the first occurrence of the specified element from the list, if it is present. If this list does not contain the element, it is unchanged. remove(Object) method returns true, if removal was successful otherwise false.\n\n\n\nInitially list has: [Austin, Okinawa, Giza, Manila, Batam, Giza]. places.remove(\"Giza\") removes the first occurrence of \"Giza\" and after the successful removal, list has: [Austin, Okinawa, Manila, Batam, Giza]. places.remove(\"Giza\") returns true, control goes inside if block and executes places.remove(\"Austin\");\n\n\n\nplaces list contains \"Austin\", so after the removal list has: [Okinawa, Manila, Batam, Giza]."},{"id":40,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code snippet:\n\nimport java.util.*;\n \nclass Father {}\n \nclass Son extends Father {}\n \nclass GrandSon extends Son {}\n \nabstract class Super {\n    abstract List<Father> get();\n}\n \nclass Sub extends Super {\n    /*INSERT*/\n}\n\n\nAnd the definitions of get() method:\n\n1. List<Father> get() {return null;}\n\n2. ArrayList<Father> get() {return null;}\n\n3. List<Son> get() {return null;}\n\n4. ArrayList<Son> get() {return null;}\n\n5. List<GrandSon> get() {return null;}\n\n6. ArrayList<GrandSon> get() {return null;}\n\n7. List<Object> get() {return null;}\n\n8. ArrayList<Object> get() {return null;}\n\n\n\nHow many definitions of get() method can replace /*INSERT*/ such that there is no compilation error?","type":"Single Choice","answer":"B","answers":{"A":"One definition\n\n","B":"Two definitions\n","C":"Three definitions\n","D":"Four definitions\n","E":"Five definitions\n\n","F":"Six definitions\n","G":"Seven definitions\n","H":"Eight definitions\n","I":"\n","J":"\n"},"explanation":"There are 2 rules related to return types of overriding method:\n\n1. If return type of overridden method is of primitive type, then overriding method should use same primitive type.\n\n2. If return type of overridden method is of reference type, then overriding method can use same reference type or its sub-type (also known as covariant return type).\n\n\n\nArrayList is a subtype of List, hence overriding method can use List<Father> or ArrayList<Father> as return type. Definitions 1 and 2 are valid.\n\n\n\nPlease note: even though Son is a subtype of Father, List<Son> is not subtype of List<Father>. Hence definitions 3 and 4 are NOT valid.\n\n\n\nOn similar lines, even though GrandSon is a subtype of Father, List<GrandSon> is not subtype of List<Father>. Hence definitions 5 and 6 are also NOT valid.\n\n\n\nList<Object> is not subtype of List<Father>, definition 7 is NOT valid.\n\n\n\nArrayList<Object> is not subtype of List<Father>, definition 8 is also NOT valid."},{"id":41,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"What will be the result of compiling and executing Test class?\n\n\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        String[] names = { \"Smith\", \"Brown\", \"Thomas\", \"Taylor\", \"Jones\" };\n        List<String> list = new ArrayList<>();\n        for (int x = 0; x < names.length; x++) {\n            list.add(names[x]);\n            switch (x) {\n                case 2:\n                    continue;\n            }\n            break;\n        }\n        System.out.println(list.size());\n    }\n}","type":"Single Choice","answer":"B","answers":{"A":"0\n","B":"1\n","C":"2\n","D":"3\n","E":"4\n","F":"5\n","G":"None of the other options\n","H":"\n","I":"\n","J":"\n"},"explanation":"break; and continue; are used inside for-loop, hence no compilation error.\n\nIn 1st iteration, x = 0. \"Smith\" is added to the list. There is no matching case found, hence control just goes after the switch-case block and executes break; statement, which takes the control out of the for loop. `System.out.println(list.size());` is executed and this prints 1 on to the console."},{"id":42,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.function.Predicate;\n \nclass Employee {\n    private String name;\n    private int age;\n    private double salary;\n    \n    public Employee(String name, int age, double salary) {\n        this.name = name;\n        this.age = age;\n        this.salary = salary;\n    }\n    public String getName() {\n        return name;\n    }\n    public int getAge() {\n        return age;\n    }\n    public double getSalary() {\n        return salary;\n    }\n    \n    public String toString() {\n        return name;\n    }\n}\n \npublic class Test {\n    public static void main(String [] args) {\n        List<Employee> list = new ArrayList<>();\n        list.add(new Employee(\"James\", 25, 15000));\n        list.add(new Employee(\"Lucy\", 23, 12000));\n        list.add(new Employee(\"Bill\", 27, 10000));\n        list.add(new Employee(\"Jack\", 19, 5000));\n        list.add(new Employee(\"Liya\", 20, 8000));\n        \n        process(list, /*INSERT*/);\n        \n        System.out.println(list);\n    }\n    \n    private static void process(List<Employee> list, Predicate<Employee> predicate) {\n        Iterator<Employee> iterator = list.iterator();\n        while(iterator.hasNext()) {\n            if(predicate.test(iterator.next()))\n                iterator.remove();\n        }\n    }\n}\n\n\nWhich of the following lambda expressions, if used to replace /*INSERT*/, prints [Jack, Liya] on to the console?\n\nSelect 2 options.","type":"Multiple Choice","answer":"A,D","answers":{"A":"'(Employee e) -> { return e.getSalary() >= 10000; } \n","B":"'(e) -> { e.getSalary() >= 10000; } \n","C":"'e -> { e.getSalary() >= 10000 } \n","D":"e -> e.getSalary() >= 10000 \n","E":"e - > e.getSalary() >= 10000 \n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"Jack's salary is 5000 and Liya's salary is 8000. If Employee's salary is >= 10000 then that Employee object is removed from the list.\n\n\n\nAllowed lambda expression is: \n\n(Employee e) -> { return e.getSalary() >= 10000; }, \n\nCan be simplified to:  (e) -> { return e.getSalary() >= 10000; } => type can be removed from left side of the expression. \n\nFurther simplified to: e -> { return e.getSalary() >= 10000; } => if there is only one parameter in left part, then round brackets (parenthesis) can be removed. \n\nFurther simplified to: e -> e.getSalary() >= 10000 => if there is only one statement in the right side then semicolon inside the body, curly brackets and return statement can be removed. But all 3 [return, {}, ;] must be removed together.\n\n\n\nNOTE: there should not be any space between - and > of arrow operator."},{"id":43,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.function.Predicate;\n \nclass Employee {\n    private String name;\n    private int age;\n    private double salary;\n    \n    public Employee(String name, int age, double salary) {\n        this.name = name;\n        this.age = age;\n        this.salary = salary;\n    }\n    public String getName() {\n        return name;\n    }\n    public int getAge() {\n        return age;\n    }\n    public double getSalary() {\n        return salary;\n    }\n    \n    public String toString() {\n        return name;\n    }\n}\n \npublic class Test {\n    public static void main(String [] args) {\n        List<Employee> list = new ArrayList<>();\n        list.add(new Employee(\"James\", 25, 15000));\n        list.add(new Employee(\"Lucy\", 23, 12000));\n        list.add(new Employee(\"Bill\", 27, 10000));\n        list.add(new Employee(\"Jack\", 19, 5000));\n        list.add(new Employee(\"Liya\", 20, 8000));\n        \n        process(list, e -> e.getAge() > 20);\n    }\n    \n    private static void process(List<Employee> list, Predicate<Employee> predicate) {\n        Iterator<Employee> iterator = list.iterator();\n        while(iterator.hasNext()) {\n            Employee e = iterator.next();\n            if(predicate.test(e))\n                System.out.print(e + \" \");\n        }\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"B","answers":{"A":"James Lucy Bill Jack Liya\n\n","B":"James Lucy Bill\n","C":"'Jack Liya\n\n","D":"'Compilation error\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"process(List, Predicate) method prints all the records passing the Predicate's test and test is to process the records having age greater than 20.\n\nThere are 3 records with age > 20 and these are printed in the insertion order.\n\n\n\nNOTE: toString() method just returns the name."},{"id":44,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.util.function.Predicate;\n \npublic class Test {\n    public static void main(String[] args) {\n        printNumbers(i -> i % 2 != 0);\n    }\n    \n    private static void printNumbers(Predicate<Integer> predicate) {\n        for(int i = 1; i <= 10; i++) {\n            if(predicate.test(i)) {\n                System.out.print(i);\n            }\n        }\n    }\n}","type":"Single Choice","answer":"D","answers":{"A":"'12345678910\n\n","B":"'1234567891011\n\n","C":"'246810\n","D":"'13579\n","E":"1357911\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"In the boolean expression (predicate.test(i)): i is of primitive int type but auto-boxing feature converts it to Integer wrapper type. \n\ntest(Integer) method of Predicate returns true if passed number is an odd number, so given loop prints only odd numbers.\n\nfor loops works for the numbers from 1 to 10."},{"id":45,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.util.function.Predicate;\n \npublic class Test {\n    public static void main(String[] args) {\n        String [] arr = {\"*\", \"**\", \"***\", \"****\", \"*****\", \"******\"};\n        Predicate<String> pr1 = s -> s.length() < 4;\n        print(arr, pr1);\n    }\n    \n    private static void print(String [] arr, Predicate<String> predicate) {\n        for(String str : arr) {\n            if(predicate.test(str)) {\n                System.out.println(str);\n            }\n        }\n    }\n}","type":"Single Choice","answer":"B","answers":{"A":"'****\n*****\n******\n","B":"'*\n**\n***\n","C":"'*\n**\n***\n****\n","D":"'*\n**\n***\n****\n*****\n******\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"Lambda expression for Predicate is: s -> s.length() < 4. This means return true if passed string's length is < 4. \n\nSo first three array elements are printed."},{"id":46,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.util.function.Predicate;\n \npublic class Test {\n    public static void main(String[] args) {\n        String [] arr = {\"A\", \"ab\", \"bab\", \"Aa\", \"bb\", \"baba\", \"aba\", \"Abab\"};\n        \n        Predicate<String> p = s -> s.toUpperCase().substring(0,1).equals(\"A\");\n        \n        processStringArray(arr, p);\n    }\n    \n    private static void processStringArray(String [] arr, Predicate<String> predicate) {\n        for(String str : arr) {\n            if(predicate.test(str)) {\n                System.out.println(str);\n            }\n        }\n    }\n}","type":"Single Choice","answer":"E","answers":{"A":"Compilation error\n\n","B":"Runtime exception\n","C":"A\nAa\nAbab\n","D":"ab\naba\n","E":"A\nab\nAa\naba\nAbab\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"Let us suppose test string is \"aba\".\n\nLambda expression s.toUpperCase().substring(0,1).equals(\"A\"); means: \"aba\".toUpperCase().substring(0,1).equals(\"A\"); => \"ABA\".substring(0,1).equals(\"A\"); => \"A\".equals(\"A\"); => true.\n\nThis lambda expression returns true for any string starting with a (in lower or upper case).  Based on the lambda expression, 5 array elements passes the Predicate's test and are printed on to the console."},{"id":47,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below code: \n\npackage com.udayan.oca;\n \nimport java.util.function.Predicate;\n \npublic class Test {\n    public static void main(String[] args) {\n        String [] arr = {\"A\", \"ab\", \"bab\", \"Aa\", \"bb\", \"baba\", \"aba\", \"Abab\"};\n        \n        processStringArray(arr, /*INSERT*/);\n    }\n    \n    private static void processStringArray(String [] arr, Predicate<String> predicate) {\n        for(String str : arr) {\n            if(predicate.test(str)) {\n                System.out.println(str);\n            }\n        }\n    }\n}\n\n\nWhich of the following options can replace /*INSERT*/ such that on executing Test class all the array elements are displayed in the output?\n\nSelect ALL that apply.","type":"Multiple Choice","answer":"A,B,C,D","answers":{"A":"p -> true \n\n","B":"p -> !false \n","C":"p -> p.length() >= 1 \n\n","D":"p -> p.length() < 10 \n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"p -> true means test method returns true for the passed String. \n\np -> !false means test method returns true for the passed String.   \n\np -> p.length() >= 1 means test method returns true if passed String's length is greater than or equal to 1 and this is true for all the array elements. \n\np -> p.length() < 10 means test method returns true if passed String's length is less than 10 and this is true for all the array elements."},{"id":48,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        list.add(100);\n        list.add(7);\n        list.add(50);\n        list.add(17);\n        list.add(10);\n        list.add(5);\n        \n        list.removeIf(a -> a % 10 == 0);\n        \n        System.out.println(list);\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"'[100, 7, 50, 17, 10, 5]\n\n","B":"'[100, 50, 10]\n","C":"'[7, 17, 5]\n","D":"'Compilation error\n\n","E":"'Runtime Exception\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"removeIf(Predicate) method was added as a default method in Collection interface in JDK 8 and it removes all the elements of this collection that satisfy the given predicate. \n\n\n\nPredicate's test method returns true for all the Integers divisible by 10."},{"id":49,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Which of the following method is declared in Predicate<T> interface?","type":"Single Choice","answer":"C","answers":{"A":"boolean verify(T t); \n\n","B":"boolean check(T t); \n","C":"boolean test(T t); \n\n","D":"boolean validate(T t); \n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"Single abstract method declared in Predicate<T> interface is boolean test(T t); \n\n\n\nNOTE: If you are confused, then check other questions on Predicate and from there you will know about the method declared in Predicate interface."},{"id":50,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.time.LocalDate;\nimport java.time.Month;\nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<LocalDate> dates = new ArrayList<>();\n        dates.add(LocalDate.parse(\"2018-07-11\"));\n        dates.add(LocalDate.parse(\"1919-02-25\"));\n        dates.add(LocalDate.of(2020, 4, 8));\n        dates.add(LocalDate.of(1980, Month.DECEMBER, 31));\n        \n        dates.removeIf(x -> x.getYear() < 2000);\n        \n        System.out.println(dates);\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"'[2018-07-11, 1919-02-25, 2020-04-08, 1980-12-31]\n\n","B":"'[1919-02-25, 1980-12-31]\n","C":"'[2018-07-11, 2020-04-08]\n\n","D":"Runtime exception\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"LocalDate objects can be created by using static method parse and of.\n\nremoveIf(Predicate) method was added as a default method in Collection interface in JDK 8 and it removes all the elements of this collection that satisfy the given predicate. \n\n\n\nPredicate's test method returns true for all the LocalDate objects with year less than 2000. So all the LocalDate objects with year value less than 2000 are removed from the list. Remaining LocalDate objects are printed in their insertion order."},{"id":51,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.time.LocalDate;\nimport java.time.Month;\nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<LocalDate> dates = new ArrayList<>();\n        dates.add(LocalDate.parse(\"2018-7-11\"));\n        dates.add(LocalDate.parse(\"1919-10-25\"));\n        dates.add(LocalDate.of(2020, 4, 8));\n        dates.add(LocalDate.of(1980, Month.DECEMBER, 31));\n        \n        dates.removeIf(x -> x.getYear() < 2000);\n        \n        System.out.println(dates);\n    }\n}","type":"Single Choice","answer":"D","answers":{"A":"'[2018-07-11, 1919-02-25, 2020-04-08, 1980-12-31]\n\n","B":"'[1919-02-25, 1980-12-31]\n","C":"[2018-07-11, 2020-04-08]\n\n","D":"Runtime exception\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"LocalDate.parse(CharSequence text) method accepts String in \"9999-99-99\" format only, in which month and day part in the passed object referred by text should be of 2 digits, such as to represent MARCH, use 03 and not 3 & to represent 4th day of the month, use 04 and not 4. Single digit month and day value are not automatically padded with 0 to convert it to 2 digits. \n\nTo represent 9th June 2018, format String must be \"2018-06-09\". If you pass \"2018-6-9\" or \"2018-06-9\" or \"2018-6-09\" (not in correct formats), then an instance of java.time.format.DateTimeParseException will be thrown. \n\nIn this question, LocalDate.parse(\"2018-7-11\") throws an exception at runtime as JULY is represented as 7, whereas it should be represented as 07."},{"id":52,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        list.add(110);\n        list.add(new Integer(110));\n        list.add(110);\n        \n        list.removeIf(i -> i == 110);\n        System.out.println(list);\n    }\n}","type":"Single Choice","answer":"D","answers":{"A":"'[110, 110, 110]\n\n","B":"'[110, 110]\n","C":"'[110]\n\n","D":"[]\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"As list can store only wrapper objects and not primitives, hence \n\nfor list.add(110); auto-boxing creates an Integer object {110}. \n\nfor list.add(new Integer(110)); as new keyword is used so another Integer object {110} is created. \n\nfor 3rd add method call, list.add(110); auto-boxing kicks in and as 110 is between -128 to 127, hence Integer object created at 1st statement is referred.\n\n\n\nremoveIf(Predicate) method was added as a default method in Collection interface in JDK 8 and it removes all the elements of this collection that satisfy the given predicate. \n\n\n\nBoolean expression is : i == 110; in this expression i is wrapper object and 110 is int literal so java extracts int value of wrapper object, i and then equates. As all the 3 objects store 110, hence true is returned. All integer objects are removed form the list.\n\n\n\nIf list.removeIf(i -> i == new Integer(110)); was used, then all three list elements would return false as object references are equated and not contents."},{"id":53,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        Integer i = 10;\n        List<Integer> list = new ArrayList<>();\n        list.add(i);\n        list.add(new Integer(i));\n        list.add(i);\n        \n        list.removeIf(i -> i == 10);\n        \n        System.out.println(list);\n    }\n}","type":"Single Choice","answer":"E","answers":{"A":"'[10, 10, 10]\n\n","B":"'[10, 10]\n","C":"'[10]\n","D":"[]\n\n","E":"Compilation Error\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"Variable \"i\" used in lambda expression clashes with another local variable \"i\" and hence causes compilation error."},{"id":54,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.util.function.Predicate;\n \npublic class Test {\n    public static void main(String[] args) {\n        String [] arr = {\"*\", \"**\", \"***\", \"****\", \"*****\"};\n        Predicate pr1 = s -> s.length() < 4;\n        print(arr, pr1);\n    }\n    \n    private static void print(String [] arr, Predicate<String> predicate) {\n        for(String str : arr) {\n            if(predicate.test(str)) {\n                System.out.println(str);\n            }\n        }\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"'Compilation error\n","B":"'*\n**\n***\n","C":"'*\n**\n***\n****\n","D":"'*\n**\n***\n****\n*****\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"Though Predicate is a generic interface but raw type is also allowed. Type of the variable in lambda expression is inferred by the generic type of Predicate<T> interface. \n\n\n\nIn this case, Predicate pr1 = s -> s.length() < 4; Predicate is considered of Object type so variable \"s\" is of Object type and Object class doesn't have length() method. So, s.length() causes compilation error."},{"id":55,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Consider below Lambda expression:\nPredicate<String> predicate = s -> true; \n\nWhich of the lambda expression can successfully replace the lambda expression in above statement?","type":"Single Choice","answer":"D","answers":{"A":"'s -> {true} \n\n","B":"'s -> {true;} \n","C":"'s -> {return true} \n\n","D":"'s -> {return true;} \n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"In the lambda expression's body, if used, all 3 [return, {}, ;] must be used together."},{"id":56,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Given code of Test.java file:\n\npackage com.udayankhattry.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.function.Predicate;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<String> words = new ArrayList<>();\n        words.add(\"A\");\n        words.add(\"an\");\n        words.add(\"the\");\n        words.add(\"when\");\n        words.add(\"what\");\n        words.add(\"Where\");\n        words.add(\"whether\");\n \n        processStringArray(words, /*INSERT*/);\n    }\n \n    private static void processStringArray(List<String> list, Predicate<String> predicate) {\n        for(String str : list) {\n            if(predicate.test(str)) {\n                System.out.println(str);\n            }\n        }\n    }\n}\n\n\nWhich of the following options can replace /*INSERT*/ such that on executing Test class all the list elements are displayed in the output?\n\nSelect 4 options.","type":"Multiple Choice","answer":"A,B,D,F","answers":{"A":"'p -> true\n\n","B":"'p -> !!!!true\n","C":"p -> !!false\n","D":"p -> p.length() >= 1\n\n","E":"p -> p.length() < 7\n","F":"(String p) -> p.length() < 100\n","G":"String p -> p.length() > 0\n","H":"\n","I":"\n","J":"\n"},"explanation":"Interface java.util.function.Predicate<T> declares below non-overriding abstract method:\n\nboolean test(T t);\n\n\n\nLet's check all the options one by one:\n\np -> true ✓ Means test method returns true for the passed String. It will print all the elements of the List.\n\np -> !!!!true ✓ !!!!true => !!!false => !!true => !false => true, means test method returns true for the passed String. It will print all the elements of the List.\n\np -> !!false ✗ !!false => !true => false, means test method returns false for the passed String. It will not print even a single element of the list.\n\np -> p.length() >= 1 ✓ Means test method returns true if passed String's length is greater than or equal to 1 and this is true for all the list elements. \n\np -> p.length() < 7 ✗ Means test method returns true if passed String's length is less than 7 and this is not true for \"whether\". \"whether\" will not be displayed in the output. \n\n(String p) -> p.length() < 100 ✓ Means test method returns true if passed String's length is less than 100 and this is true for all the list elements.\n\nString p -> p.length() > 0 ✗ Round brackets or parenthesis are missing around 'String p'. This causes compilation error."},{"id":57,"trainingUnit":"OCA","trainingContent":"ArrayList and Lambda expression","question":"Given code of Test.java file:\n\npackage com.udayankhattry.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n    public static void main(String[] args) {\n        List<StringBuilder> list = new ArrayList<>();\n        list.add(new StringBuilder(\"AAA\")); //Line n1\n        list.add(new StringBuilder(\"BBB\")); //Line n2\n        list.add(new StringBuilder(\"AAA\")); //Line n3\n \n        list.removeIf(sb -> sb.equals(new StringBuilder(\"AAA\"))); //Line n4\n        System.out.println(list);\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"A","answers":{"A":"'[AAA, BBB, AAA]\n\n","B":"[BBB, AAA]\n","C":"[BBB]\n\n","D":"[]\n","E":"None of the other options\n","F":"\n","G":"\n","H":"\n","I":"\n","J":"\n"},"explanation":"ArrayList instance referred by 'list' stores 3 StringBuilder instances.\n\n\n\nremoveIf(Predicate<? super E> filter) method was added as a default method in Collection<E> interface in JDK 8 and it removes all the elements of this collection that satisfy the given predicate.\n\nStringBuilder class doesn't override equals(Object) method. So Object version is invoked, which uses == operator, hence `sb.equals(new StringBuilder(\"AAA\"))` would return false as all 4 StringBuilder instances have been created at four different memory locations.\n\nNone of the StringBuilder instances are removed from the list.\n\n\n\nStringBuilder class overrides toString() method, which returns the containing String and that is why [AAA, BBB, AAA] will be printed on to the console."}]