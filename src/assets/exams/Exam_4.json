[{"id":1,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider the code of Test.java file:\n\npackage com.udayan.oca;\n \nclass Student {\n     String name;\n     int age;\n \n     Student() {\n         Student(\"James\", 25);\n     }\n \n     Student(String name, int age) {\n         this.name = name;\n         this.age = age;\n     }\n}\n \npublic class Test {\n     public static void main(String[] args) {\n         Student s = new Student();\n         System.out.println(s.name + \":\" + s.age);\n     }\n}\nThere is a compilation error in the Student class.\n\nWhich modifications, done independently, print \"James:25\" on to the console?\n\nSelect 2 options.","type":"Multiple Choice","answer":"B,D","answers":{"A":"Replace Student(\"James\", 25);  with super(\"James\", 25);","B":"Replace Student(\"James\", 25);  with this(\"James\", 25);","C":"Replace Student(\"James\", 25);  with this.Student(\"James\", 25);","D":"Add below code in the Student class:\n1 void Student(String name, int age) {\n2      this.name = name;\n3      this.age = age;\n4 }","E":"","F":"","G":"","H":""},"explanation":"First find out the reason for compilation error, all the options are giving hint :)\n\n\n\nno-arg constructor of Student class calling another overloaded constructor by the name and this causes compilation error. This problem can be fixed in 2 ways:\n\n1st one: replace Student(\"James\", 25); with this(\"James\", 25) OR 2nd one: add void Student(String, int) method in the Student class.\n\n\n\nMethod can have same name as the class name and constructor can call other methods."},{"id":2,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n     public static void main(String[] args) {\n         Integer i = 10;\n         List<Integer> list = new ArrayList<>();\n         list.add(i);\n         list.add(new Integer(i));\n         list.add(i);\n \n         list.removeIf(i -> i == 10);\n \n         System.out.println(list);\n     }\n}","type":"Single Choice","answer":"D","answers":{"A":"[]","B":"[10, 10, 10]","C":"[10, 10]","D":"Compilation Error","E":"[10]","F":"","G":"","H":""},"explanation":"Variable \"i\" used in lambda expression clashes with another local variable \"i\" and hence causes compilation error."},{"id":3,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Which of the following statement is correct about below code?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         do {\n             System.out.println(100);\n         } while (true);\n \n         System.out.println(\"Bye\");\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"Compiles successfully and prints \"Bye\"","B":"Unreachable code compilation error","C":"Compiles successfully and prints 100 in infinite loop","D":"100\nBye","E":"","F":"","G":"","H":""},"explanation":"Boolean expression of do-while loop uses literal true (compile-time constant), hence Java compiler knows that this loop is an infinte loop.\n\nIt also knows that once at runtime Java Control enters an infinite loop, none of the statements after loop block will get executed. \n\nHence it marks all the codes after infinite loop as Unreachable Code, which results in compilation error. \n\nIf boolean variable was used instead of boolean literal, then this program would have compiled and executed successfully.\n1 public class DoWhileTest1 { \n2     public static void main(String[] args) { \n3         boolean flag = true; \n4         do { \n5             System.out.println(100); \n6         } while (flag); \n7         \n8         System.out.println(\"Bye\"); \n9     } \n10 } \n\nAbove program prints 100 in infinite loop and \"Bye\" never gets printed."},{"id":4,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.util.function.Predicate;\n \npublic class Test {\n     public static void main(String[] args) {\n         String [] arr = {\"*\", \"**\", \"***\", \"****\", \"*****\", \"******\"};\n         Predicate<String> pr1 = s -> s.length() < 4;\n         print(arr, pr1);\n     }\n \n     private static void print(String [] arr, Predicate<String> predicate) {\n         for(String str : arr) {\n             if(predicate.test(str)) {\n                 System.out.println(str);\n             }\n         }\n     }\n}","type":"Single Choice","answer":"C","answers":{"A":"*\n**\n***\n****","B":"****\n*****\n******","C":"*\n**\n***","D":"*\n**\n***\n****\n*****\n******","E":"","F":"","G":"","H":""},"explanation":"Lambda expression for Predicate is: s -> s.length() < 4. This means return true if passed string's length is < 4. \n\nSo first three array elements are printed."},{"id":5,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"How many String objects are there in the HEAP memory, when control is at Line 9?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         String s1 = new String(\"Java\"); //Line 3\n         String s2 = \"JaVa\"; //Line 4\n         String s3 = \"JaVa\"; //Line 5\n         String s4 = \"Java\"; //Line 6\n         String s5 = \"Java\"; //Line 7\n \n         int i = 1; //Line 9\n \n     }\n}","type":"Single Choice","answer":"D","answers":{"A":"5","B":"4","C":"2","D":"3","E":"","F":"","G":"","H":""},"explanation":"String s1 = new String(\"Java\"); -> Creates 2 objects: 1 String Pool and 1 non-pool. s1 refers to non-pool object.\n\nString s2 = \"JaVa\"; -> Creates 1 String pool object and s2 refers to it.\n\nString s3 = \"JaVa\"; -> Doesn't create a new object, s3 refers to same String pool object referred by s2.\n\nString s4 = \"Java\"; -> Doesn't create a new object, s4 refers to String Pool object created at Line 3.\n\nString s5 = \"Java\"; -> Doesn't create a new object, s5 also refers to String Pool object created at Line 3.\n\n\n\nSo, at Line 9, 3 String objects are available in the HEAP memory: 2 String pool and 1 non-pool."},{"id":6,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider codes below:\n\n//A.java\npackage com.udayan.oca;\n \npublic class A {\n     public void print() {\n         System.out.println(\"A\");\n     }\n}\n\n\n//B.java\npackage com.udayan.oca;\n \npublic class B extends A {\n     public void print() {\n         System.out.println(\"B\");\n     }\n}\n\n\n//C.java\npackage com.udayan.oca;\n \npublic class C extends A {\n     public void print() {\n         System.out.println(\"C\");\n     }\n}\n\n\n//Test.java\npackage com.udayan.oca.test;\n \nimport com.udayan.oca.*;\n \npublic class Test {\n     public static void main(String[] args) {\n         A obj1 = new C();\n         A obj2 = new B();\n         C obj3 = (C)obj1;\n         C obj4 = (C)obj2;\n         obj3.print();\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"A","B":"B","C":"ClassCastException is thrown at runtime","D":"Compilation error","E":"C","F":"","G":"","H":""},"explanation":"Class A, B and C are declared public and inside same package com.udayan.oca. Method print() of class A has correctly been overridden by B and C.\n\nprint() method is public so no issues in accessing it anywhere.\n\n\n\nLet's check the code inside main method.\n\nA obj1 = new C(); => obj1 refers to an instance of C class, it is polymorphism. \n\nA obj2 = new B(); => obj2 refers to an instance of B class, it is polymorphism. \n\nC obj3 = (C)obj1; => obj1 actually refers to an instance of C class, so at runtime obj3 (C type) will refer to an instance of C class. As obj1 is of A type so explicit typecasting is necessary. \n\nC obj4 = (C)obj2; => obj2 actually refers to an instance of B class, so at runtime obj4 (C type) will refer to an instance of B class. B and C are siblings and can't refer to each other, so this statement will throw ClassCastException at runtime."},{"id":7,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.time.Period;\n \npublic class Test {\n     public static void main(String [] args) {\n         Period period = Period.of(0, 1000, 0);\n         System.out.println(period);\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"A","answers":{"A":"P1000M","B":"P0Y1000M0D","C":"p1000m","D":"p0y1000m0d","E":"","F":"","G":"","H":""},"explanation":"Check the toString() method of Period class. ZERO period is displayed as P0D, other than that, Period components (year, month, day) with 0 values are ignored. \n\ntoString()'s result starts with P, and for non-zero year, Y is appended; for non-zero month, M is appended; and for non-zero day, D is appended. P,Y,M and D are in upper case. \n\nNOTE: Period.parse(CharSequence) method accepts the String parameter in \"PnYnMnD\" format, over here P,Y,M and D can be in any case."},{"id":8,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Given Code:\n\npackage com.udayan.oca;\n \nimport java.io.*;\n \nclass ReadTheFile {\n     static void print() { //Line 4\n         throw new IOException(); //Line 5\n     }\n}\n \npublic class Test {\n     public static void main(String[] args) { //Line 10\n         ReadTheFile.print(); //Line 11\n         //Line 12\n     }\n}\nWhich 2 changes are necessary so that code compiles successfully?","type":"Multiple Choice","answer":"B,E","answers":{"A":"Replace Line 4 with static void print() throws Throwable {","B":"Replace Line 4 with static void print() throws Exception {","C":"Surround Line 11 with below try-catch block:\n1 try {\n2      ReadTheFile.print();\n3 } catch(IOException e) {\n4      e.printStackTrace();\n5 }","D":"Surround Line 11 with below try-catch block:\n1 try {\n2      ReadTheFile.print();\n3 } catch(IOException | Exception e) {\n4      e.printStackTrace();\n5 }","E":"Replace Line 10 with public static void main(String[] args) throws IOException {","F":"","G":"","H":""},"explanation":"This question is tricky as 2 changes are related and not independent. Let's first check the reason for compilation error. Line 5 throws a checked exception, IOException but it is not declared in the throws clause. So, print method should have throws clause for IOException or the classes in top hierarchy such as Exception or Throwable.\n\n\n\nBased on this deduction, Line 4 can be replaced with either \"static void print() throws Exception {\" or \"static void print() throws Throwable\" but we will have to select one out of these as after replacing Line 4, Line 11 will start giving error as we are not handling the checked exception at Line 11.\n\n\n\nThis part is easy, do we have other options, which mention \"Throwable\"? NO. Then mark the first option as \"Replace Line 4 with static void print() throws Exception {\".\n\n\n\nAs, print() method throws Exception, so main method should handle Exception or its super type and not it's subtype. Two options working only with IOException can be ruled out.\n\n\n\nMulti-catch statement \"catch(IOException | Exception e)\" gives compilation error as IOException and Exception are related to each other in multilevel inheritance. So you are left with only one option to pair with our 1st choice:\n\nSurround Line 11 with below try-catch block:\n1 try {\n2     ReadTheFile.print();\n3 } catch(Exception e) {\n4     e.printStackTrace();\n5 }"},{"id":9,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Wrapper classes are defined in which of the following package?","type":"Single Choice","answer":"D","answers":{"A":"java.util","B":"java.io","C":"default package","D":"java.lang","E":"","F":"","G":"","H":""},"explanation":"All the wrapper classes are defined in java.lang package.\n\nString and StringBuilder are also defined in java.lang package and that is why import statement is not required to use these classes."},{"id":10,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider below code:\n\npackage com.udayan.oca;\n \npublic class Counter {\n     int count;\n \n     private static void increment(Counter counter) {\n         counter.count++;\n     }\n \n     public static void main(String [] args) {\n         Counter c1 = new Counter();\n         Counter c2 = c1;\n         Counter c3 = null;\n         c2.count = 1000;\n         increment(c2);\n     }\n}\nOn executing Counter class, how many Counter objects are created in the memory?","type":"Single Choice","answer":"B","answers":{"A":"2","B":"1","C":"3","D":"4","E":"","F":"","G":"","H":""},"explanation":"new Counter(); is invoked only once, hence only one Counter object is created in the memory.\n\nc1, c2, c3 and counter are reference variables of Counter type and not Counter objects."},{"id":11,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     static String msg; //Line 2\n     public static void main(String[] args) {\n         String msg; //Line 4\n         if(args.length > 0) {\n             msg = args[0]; //Line 6\n         }\n         System.out.println(msg); //Line 8\n     }\n}","type":"Single Choice","answer":"E","answers":{"A":"Line 4 causes compilation failure","B":"null","C":"An exception is thrown at runtime by Line 6","D":"Line 2 causes compilation failure","E":"Line 8 causes compilation failure","F":"","G":"","H":""},"explanation":"Line 4 code shadows the variable at Line 2. msg variable created at Line 4 is a local variable and should be initialized before it is used.\n\nInitialization code is inside if-block, so compiler is not sure about msg variable's initialization. Hence, Line 8 causes compilation failure."},{"id":12,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n     public static void main(String[] args) {\n         StringBuilder sb = new StringBuilder(\"Hello\");\n         List<StringBuilder> list = new ArrayList<>();\n         list.add(sb);\n         list.add(new StringBuilder(\"Hello\"));\n         list.add(sb);\n         sb.append(\"World!\");\n \n         System.out.println(list);\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"D","answers":{"A":"[HelloWorld!, Hello, Hello]","B":"[Hello, Hello, Hello]","C":"[HelloWorld!, HelloWorld!, HelloWorld!]","D":"[HelloWorld!, Hello, HelloWorld!]","E":"","F":"","G":"","H":""},"explanation":"ArrayList's 1st and 3rd items are referring to same StringBuilder instance referred by sb [sb --> {Hello}] and 2nd item is referring to another instance of StringBuilder. \n\nsb.append(\"World!\"); means sb --> {HelloWorld!}, which means 1st and 3rd items of ArrayList now refers to StringBuilder instance containing HelloWorld!   \n\nIn the output, [HelloWorld!, Hello, HelloWorld!] is printed."},{"id":13,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Circus\n\n//Circus.java\npackage com.udayan.oca;\n \nclass Animal {\n     protected void jump() {\n         System.out.println(\"Animal\");\n     }\n}\n \nclass Cat extends Animal {\n     public void jump(int a) {\n         System.out.println(\"Cat\");\n     }\n}\n \nclass Deer extends Animal {\n     public void jump() {\n         System.out.println(\"Deer\");\n     }\n}\n \npublic class Circus {\n     public static void main(String[] args) {\n         Animal cat = new Cat();\n         Animal deer = new Deer();\n         cat.jump();\n         deer.jump();\n     }\n}","type":"Single Choice","answer":"D","answers":{"A":"Cat\nAnimal","B":"Cat\nDeer","C":"Animal\nAnimal","D":"Animal\nDeer","E":"","F":"","G":"","H":""},"explanation":"Cat class doesn't override the jump() method of Animal class, in fact jump(int) method is overloaded in Cat class.\n\nDeer class overrides jump() method of Animal class.\n\n\n\nReference variable cat is of Animal type, cat.jump() syntax is fine and as Cat doesn't override jump() method hence Animal version is invoked, which prints Animal to the console.\n\n\n\nEven though reference variable deer is of Animal type but at runtime deer.jump(); invokes overriding method of Deer class, this prints Deer to the console."},{"id":14,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         Boolean [] arr = new Boolean[2];\n         System.out.println(arr[0] + \":\" + arr[1]);\n     }\n}","type":"Single Choice","answer":"C","answers":{"A":"true:true","B":"false:false","C":"null:null","D":"NullPointerException is thrown at runtime","E":"","F":"","G":"","H":""},"explanation":"Array elements are initialized to their default values.\n\narr is referring to an array of Boolean type, which is reference type and hence both the array elements are initialized to null and therefore in the output null:null is printed."},{"id":15,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         byte b1 = (byte) (127 + 21);\n         System.out.println(b1);\n     }\n}","type":"Single Choice","answer":"D","answers":{"A":"148","B":"-128","C":"Compilation error","D":"-108","E":"","F":"","G":"","H":""},"explanation":"127 + 21 = 148 = 00000000 00000000 00000000 10010100 \n\nAbove binary number is +ve, as left most bit is 0. \n\nSame binary number after type-casting to byte: 10010100, -ve number as left most bit is 1. \n\n10010100 = -108."},{"id":16,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider below code: \n\npublic class Test {\n     public static void main(String[] args) {\n         System.out.println(\"ONE\");\n     }\n \n     public static void main(Integer[] args) {\n         System.out.println(\"TWO\");\n     }\n \n     public static void main(byte [] args) {\n         System.out.println(\"THREE\");\n     }\n}\nWhat will be the result if Test class is executed by below command?\n\njava Test 10","type":"Single Choice","answer":"D","answers":{"A":"THREE","B":"TWO","C":"Compilation error","D":"ONE","E":"","F":"","G":"","H":""},"explanation":"Like any other method, main method can also be overloaded. But main method called by JVM is always with String [] parameter.\n\nDon't get confused with 10 as it is passed as \"10\". Run above class with any command line arguments or 0 command line argument, output will always be ONE."},{"id":17,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         extractInt(2.7);\n         extractInt(2);\n     }\n \n     private static void extractInt(Double obj) {\n         System.out.println(obj.intValue());\n     }\n}","type":"Single Choice","answer":"D","answers":{"A":"Compilation error in extractInt method","B":"An exception is thrown at runtime","C":"3\n2","D":"Compilation error in main method","E":"2\n2","F":"","G":"","H":""},"explanation":"extractInt method accepts argument of Double type.\n\n\n\nextractInt(2.7); => 2.7 is double literal, so Java compiler would box it into Double type. At runtime obj.intValue() would print int portion of the Double data, which is 2.\n\n\n\nextractInt(2); => Java compiler either does implicit casting or Wrapping but not both. 2 is int literal, Java compiler can't implicit cast it to double and then box it to Double. So this statement causes compilation failure."},{"id":18,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n     public static void main(String[] args) {\n         List<String> list = new ArrayList<>(4);\n         list.add(0, \"Array\");\n         list.add(2, \"List\");\n \n         System.out.println(list);\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"B","answers":{"A":"[Array, List]","B":"An exception is thrown at runtime","C":"[Array, null, List, null]","D":"Compilation error","E":"","F":"","G":"","H":""},"explanation":"ArrayList are different than arrays, though behind the scene ArrayList uses Object[] to store its elements. \n\n\n\nThere are 2 things related to ArrayList, one is capacity and another is actual elements stored in the list, returned by size() method. If you don't pass anything to the ArrayList constructor, then default capacity is 10 but this doesn't mean that an ArrayList instance will be created containing 10 elements and all will be initialized to null. \n\n\n\nIn fact, size() method will still return 0 for this list. This list still doesn't contain even a single element. You need to use add method or its overloaded counterpart to add items to the list. Even if you want to add null values, you should still invoke some methods, nothing happens automatically.\n\n\n\nIn this question, new ArrayList<>(4); creates an ArrayList instance which can initially store 4 elements but currently it doesn't store any data. \n\n\n\nAnother point you should remember for the certification exam: Addition of elements in ArrayList should be continuous. If you are using add(index, Element) method to add items to the list, then index should be continuous, you simply can't skip any index.\n\n\n\nIn this case, list.add(0, \"Array\"); adds \"Array\" to 0th index. so after this operation list --> [Array].  You can now add at 0th index (existing elements will be shifted right) or you can add at index 1 but not at index 2. list.add(2, \"List\"); throws an instance of java.lang.IndexOutOfBoundsException."},{"id":19,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         char [][] arr = {\n                 {'A', 'B', 'C'},\n                 {'D', 'E', 'F'},\n                 {'G', 'H', 'I'}\n         };\n \n         for(int i = 0; i < arr.length; i++) {\n             for(int j = 0; j < arr[i].length; j++) {\n                 System.out.print(arr[i][1]);\n             }\n             System.out.println();\n         }\n     }\n}","type":"Single Choice","answer":"A","answers":{"A":"BBB\nEEE\nHHH","B":"ABC\nDEF\nGHI","C":"AAA\nDDD\nGGG","D":"CCC\nFFF\nIII","E":"","F":"","G":"","H":""},"explanation":"NOTE: System.out.print statement is printing arr[i][1],\n\nwhich means it prints 2nd array element of a particular row, for each iteration of inner loop.\n\nThat is why output is:\n\nBBB\n\nEEE\n\nHHH\n\nTo get all the array elements printed correctly, use arr[i][j] in System.out.print statement."},{"id":20,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Greetings class?\n\npackage com.udayan.oca;\n \npublic class Greetings {\n    String msg = null;\n    public Greetings() {\n    }\n    \n    public Greetings(String str) {\n        msg = str;\n    }\n    \n    public void display() {\n        System.out.println(msg);\n    }\n    \n    public static void main(String [] args) {\n        Greetings g1 = new Greetings();\n        Greetings g2 = new Greetings(\"Good Evening!\");\n        g1.display();\n        g1.display();\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"null\nnull","B":"null\nGood Evening!","C":"Compilation error","D":"Good Evening!\nNull","E":"","F":"","G":"","H":""},"explanation":"Greetings g1 = new Greetings(); invokes no-arg constructor. Property msg (of object referred by g1) is assigned to null.\n\nGreetings g2 = new Greetings(\"Good Evening!\"); invokes parameterized constructor, which assigns \"Good Evening!\" to msg of object referred by g2.\n\ng1.display(); prints null\n\nAgain we have same call g1.display(); which prints null.\n\nNOTE: We haven't called display() on object referred by g2."},{"id":21,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String [] args) {\n         int a = 3;\n         m(++a, a++);\n         System.out.println(a);\n     }\n \n     private static void m(int i, int j) {\n         i++;\n         j--;\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"6","B":"5","C":"4","D":"3","E":"","F":"","G":"","H":""},"explanation":"Method m works on copies and changes done to i and j are local to method m only.\n\nm(++a, a++); [a=3]. \n\nm(4, a++); [a=4]. \n\nm(4, 4); [a=5]. \n\n\n\nSystem.out.println(a); => Prints 5 on to the console."},{"id":22,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         StringBuilder sb = new StringBuilder(\"Good\"); //Line 3\n         change(sb); //Line 4\n         System.out.println(sb); //Line 5\n     }\n \n     private static void change(StringBuilder s) {\n         s.append(\"_Morning\"); //Line 9\n     }\n}","type":"Single Choice","answer":"D","answers":{"A":"_Morning","B":"Good","C":"None of the other options","D":"Good_Morning","E":"","F":"","G":"","H":""},"explanation":"When change method is called, both variable s and sb refers to same StringBuilder object.\n\nLine 9 modifies the passed object and appends \"_Morning\" to it. As a result s now refers to \"Good_Morning\" and sb also refers to \"Good_Morning\" so when control goes back to calling method main(String[]) Line 5 prints \"Good_Morning\" on to the console."},{"id":23,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.time.LocalDate;\n \npublic class Test {\n     public static void main(String [] args) {\n         LocalDate date = LocalDate.of(2068, 4, 15);\n         System.out.println(date.getMonth() + \":\" + date.getMonthValue());\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"April:3","B":"April:4","C":"APRIL:4","D":"APRIL:3","E":"","F":"","G":"","H":""},"explanation":"date.getMonth() returns the month of the year filed, using Month enum, all the enum constant names are in upper case. \n\ndate.getMonthValue() returns the value of the month. \n\nNOTE: month value starts with 1 and it is different from java.util.Date API, where month value starts with 0."},{"id":24,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        StringBuilder sb = new StringBuilder();\n        System.out.println(sb.append(\"\").append(\"\").append(\"\").length());\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"0","B":"1","C":"3","D":"2","E":"","F":"","G":"","H":""},"explanation":"As \"\" is empty string, hence nothing is appended to the StringBuilder instance and length() method returns 0."},{"id":25,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider below code: \n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n     public static void main(String[] args) {\n         List<String> days = new ArrayList<>();\n         days.add(\"SUNDAY\");\n         days.add(\"SUNDAY\");\n         days.add(\"MONDAY\");\n         System.out.println(days.size());\n         days.clear();\n         System.out.println(days.size());\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"B","answers":{"A":"3\n3","B":"3\n0","C":"2\n0","D":"An exception is thrown at runtime","E":"","F":"","G":"","H":""},"explanation":"ArrayList can have duplicate elements, so after addition, list is: [SUNDAY, SUNDAY, MONDAY]. days.size() returns 3 so 3 is printed on to the console. \n\ndays.clear(); removes all the elements from the days list, in fact days list will be empty after successful execution of days.clear();\n\nSo 2nd System.out.println statement prints 0 on to the console."},{"id":26,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Wall class?\n\npackage com.udayan.oca;\n \npublic class Wall {\n     public static void main(String args[]) {\n         double area = 5.7;\n         String color;\n         if (area < 7)\n             color = \"green\";\n \n         System.out.println(color);\n     }\n}","type":"Single Choice","answer":"A","answers":{"A":"Compilation error","B":"null","C":"NullPointerException","D":"green","E":"","F":"","G":"","H":""},"explanation":"color is LOCAL variable and it must be initialized before it can be used.\n\nAs area is not compile time constant, java compiler doesn't have an idea of the value of variable area.\n\nThere is no else block available as well.\n\nSo compiler cannot be sure of whether variable color will be initialized or not, therefore System.out.println(color); causes compilation error."},{"id":27,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.time.LocalTime;\n \npublic class Test {\n     public static void main(String [] args) {\n         LocalTime time = LocalTime.of(23, 60);\n         System.out.println(time);\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"B","answers":{"A":"23:60","B":"An exception is thrown at runtime","C":"0:01","D":"Compilation error","E":"0:00","F":"","G":"","H":""},"explanation":"LocalTime.of(int hour, int minute) creates an instance of LocalTime class. Valid value for hour is: 0 to 23 and valid value for minute is 0 to 59. \n\njava.time.DateTimeException is thrown if invalid values are passed as arguments. \n\nNOTE: There are other overloaded of methods available:\n\nLocalTime of(int hour, int minute, int second) and\n\nLocalTime of(int hour, int minute, int second, int nanoOfSecond).\n\nValid value for second is: 0 to 59 and valid value for nano second is: 0 to 999,999,999."},{"id":28,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Below is the code of Test.java file:\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \nabstract class Animal {}\nclass Dog extends Animal{}\n \npublic class Test {\n     public static void main(String [] args) {\n         List<Animal> list = new ArrayList<Dog>();\n         list.add(0, new Dog());\n         System.out.println(list.size() > 0);\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"Runtime exception","B":"true","C":"Compilation error","D":"false","E":"","F":"","G":"","H":""},"explanation":"List is super type and ArrayList is sub type, hence List l = new ArrayList(); is valid syntax. \n\nAnimal is super type and Dog is sub type, hence Animal a = new Dog(); is valid syntax. Both depicts Polymorphism.\n\n\n\nBut in generics syntax, Parameterized types are not polymorphic, this means ArrayList<Animal> is not super type of ArrayList<Dog>. Remember this point. So below syntaxes are not allowed: \n\nArrayList<Animal> list = new ArrayList<Dog>(); OR List<Animal> list = new ArrayList<Dog>();"},{"id":29,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider code of Test.java file:\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n     public static void main(String[] args) {\n         List<Character> list = new ArrayList<>();\n         list.add(0, 'V');\n         list.add('T');\n         list.add(1, 'E');\n         list.add(3, 'O');\n \n         if(list.contains('O')) {\n             list.remove(3);\n         }\n \n         for(char ch : list) {\n             System.out.print(ch);\n         }\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"VETO","B":"VTEO","C":"VET","D":"VTE","E":"Compilation error","F":"Runtime error","G":"","H":""},"explanation":"list.add(0, 'V'); => char 'V' is converted to Character object and stored as the first element in the list. list --> [V]. \n\nlist.add('T'); => char 'T' is auto-boxed to Character object and stored at the end of the list. list --> [V,T]. \n\nlist.add(1, 'E'); => char 'E' is auto-boxed to Character object and inserted at index 1 of the list, this shifts T to the right. list --> [V,E,T]. \n\nlist.add(3, 'O'); => char 'O' is auto-boxed to Character object and added at index 3 of the list. list --> [V,E,T,O].\n\nlist.contains('O') => char 'O' is auto-boxed to Character object and as Character class overrides equals(String) method this expression returns true. Control goes inside if-block and executes: list.remove(3);. \n\nlist.remove(3); => Removes last element of the list. list --> [V,E,T].\n\nfor(char ch : list) => First list item is Character object, which is auto-unboxed and assigned to ch. This means in first iteration ch = 'V'; And after this it is simple enhanced for loop. Output is VET."},{"id":30,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         int i;\n         for(i=0; i<=2; i++){}\n         System.out.println(i);\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"Compilation error","B":"3","C":"2","D":"0","E":"","F":"","G":"","H":""},"explanation":"There is nothing inside loop body, hence loop body is blank. \n\nThis loop executes 3 times, for i = 0, i = 1 and i = 2. For i = 3, control goes out of the for loop. \n\nNow, as i is declared outside for loop, hence it is accessible outside loop body. \n\nSystem.out.println(i); prints 3 to the console."},{"id":31,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         String [] arr = {\"A\", \"B\", \"C\", \"D\"};\n         arr[0] = arr[1];\n         arr[1] = \"E\";\n         for(String s : arr) {\n             System.out.print(s + \" \");\n         }\n     }\n}","type":"Single Choice","answer":"C","answers":{"A":"A E C D","B":"E E C D","C":"B E C D","D":"Compilation error","E":"An exception is thrown at runtime","F":"","G":"","H":""},"explanation":"arr[0] -> \"A\" and  arr[1] -> \"B\". \n\narr[0] = arr[1]; => arr[0] -> \"B\" and arr[1] -> \"B\". \n\narr[1] = \"E\"; => arr[0] -> \"B\" and arr[1] -> \"E\". \n\nHence output is: B E C D"},{"id":32,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void print() {\n         System.out.println(\"static method\");\n     }\n \n     public static void main(String[] args) {\n         Test obj = null;\n         obj.print();\n     }\n}","type":"Single Choice","answer":"A","answers":{"A":"static method","B":"NullPointerException is thrown","C":"None of the other options","D":"Compilation error","E":"","F":"","G":"","H":""},"explanation":"print() is static method of class Test. So correct syntax to call method print() is Test.print();\n\nbut static methods can also be invoked using reference variable: obj.print(); Warning is displayed in this case.\n\nEven though obj has null value, we don't get NullPointerException as objects are not needed to call static methods."},{"id":33,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider below code: \n\npackage com.udayan.oca;\n \npublic class Test {\n     static Double d1;\n     int x = d1.intValue();\n \n     public static void main(String[] args) {\n         System.out.println(\"HELLO\");\n     }\n}\nOn execution, does Test class print \"HELLO\" on to the console?","type":"Single Choice","answer":"A","answers":{"A":"Yes, HELLO is printed on to the console","B":"No, HELLO is not printed on to the console","C":"","D":"","E":"","F":"","G":"","H":""},"explanation":"To invoke the special main method, JVM loads the class in the memory. At that time, static fields of Test class are initialized. d1 is of Double type so null is assigned to it.\n\nx is not static variable, so int x = d1.intValue(); is not executed. Class is loaded successfully in the memory and \"HELLO\" is printed on to the console.\n\nNOTE: new Test() will throw NullPointerException but not ExceptionInInitializerError."},{"id":34,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Which of the method of String class is used to remove leading and trailing white spaces?","type":"Single Choice","answer":"B","answers":{"A":"rtrim()","B":"trim()","C":"ltrim()","D":"trimBoth()","E":"","F":"","G":"","H":""},"explanation":"ltrim(), rtrim() and trimBoth() are not defined in String class.\n\ntrim() method is used for removing leading and trailing white spaces."},{"id":35,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider below code:\n\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        StringBuilder sb = new StringBuilder();\n        try {\n            for(;;) {\n                sb.append(\"OCA\");\n            }\n        } catch(Exception e) {\n            System.out.println(\"Exception!!!\");\n        }\n        System.out.println(\"Main ends!!!\");\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"A","answers":{"A":"Program terminates abruptly","B":"\"Exception!!!\" is printed on to the console and program terminates successfully","C":"\"Main ends!!!\" is printed on to the console and program terminates successfully","D":"\"Exception!!!\" is printed on to the console and program terminates abruptly","E":"\"Exception!!!\" and \"Main ends!!!\" are printed on to the console and program terminates successfully","F":"","G":"","H":""},"explanation":"for(;;) is an infinite loop and hence `sb.append(\"OCA\");` causes OutOfMemoryError which is a subclass of Error class.\n\nmain(String []) method throws OutOfMemoryError and program terminates abruptly."},{"id":36,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Which of the following method is declared in Predicate<T> interface?","type":"Single Choice","answer":"D","answers":{"A":"boolean check(T t);","B":"boolean verify(T t);","C":"boolean validate(T t);","D":"boolean test(T t);","E":"","F":"","G":"","H":""},"explanation":"Single abstract method declared in Predicate<T> interface is boolean test(T t); \n\nNOTE: If you are confused, then check other questions on Predicate and from there you will know about the method declared in Predicate interface."},{"id":37,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What is the signature of special main method?","type":"Single Choice","answer":"D","answers":{"A":"public static void main(String args) {}","B":"public static void main() {}","C":"private static void main(String [] args) {}","D":"public static void main(String [] a) {}","E":"","F":"","G":"","H":""},"explanation":"Special main method should have public access specifier and it takes argument of String [] type.\n\nString [] argument can use any identifier name, even though in most of the cases you will see \"args\" is used."},{"id":38,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the output of compiling and executing the Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         int a = 5;\n         int x = 10;\n         switch(x) {\n             case 10:\n                 a *= 2;\n             case 20:\n                 a *= 3;\n             case 30:\n                 a *= 4;\n         }\n         System.out.println(a);\n     }\n}","type":"Single Choice","answer":"A","answers":{"A":"120","B":"5","C":"30","D":"10","E":"","F":"","G":"","H":""},"explanation":"Matching case block \"case 10:\" is found, a *= 2; is executed, which means a = a * 2; => a = 5 * 2; => a = 10; \n\nNo break statement, hence it enters in fall-through. \n\na *= 3; is executed, which means a = a * 3; => a = 10 * 3; => a = 30; \n\na *= 4; is executed, which means a = a * 4; => a = 30 * 4; => a = 120;"},{"id":39,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n \nabstract class Super {\n     public abstract void m1() throws IOException;\n}\n \nclass Sub extends Super {\n     @Override\n     public void m1() throws IOException {\n         throw new FileNotFoundException();\n     }\n}\n \npublic class Test {\n     public static void main(String[] args) {\n         Super s = new Sub();\n         try {\n             s.m1();\n         } catch (FileNotFoundException e) {\n             System.out.print(\"X\");\n         } catch (IOException e) {\n             System.out.print(\"Y\");\n         } finally {\n             System.out.print(\"Z\");\n         }\n     }\n}","type":"Single Choice","answer":"D","answers":{"A":"XYZ","B":"Compilation Error","C":"YZ","D":"XZ","E":"","F":"","G":"","H":""},"explanation":"Even though method m1() declares to throw IOException but at runtime an instance of FileNotFoundException is thrown.\n\nA catch handler for FileNotFoundException is available and hence X is printed on to the console.\n\nAfter that finally block is executed, which prints Z to the console."},{"id":40,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.time.LocalDate;\n \npublic class Test {\n     public static void main(String [] args) {\n         LocalDate date1 = LocalDate.parse(\"1980-03-16\");\n         LocalDate date2 = LocalDate.parse(\"1980-03-16\");\n         System.out.println(date1.equals(date2) + \" : \" + date1.isEqual(date2));\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"D","answers":{"A":"false : true","B":"true : false","C":"false : false","D":"true : true","E":"","F":"","G":"","H":""},"explanation":"Both the methods \"public boolean isEqual(ChronoLocalDate)\" and \"public boolean equals(Object)\" return true if date objects are equal otherwise false. \n\nNOTE: LocalDate implements ChronoLocalDate."},{"id":41,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Which of the following is the correct package declaration to declare Test class in com.exam.oca package?","type":"Single Choice","answer":"D","answers":{"A":"package com.exam.oca.*;","B":"Package com.exam.oca;","C":"package com.exam.oca.Test;","D":"package com.exam.oca;","E":"","F":"","G":"","H":""},"explanation":"To declare Test class in com.exam.oca package, use following declaration: \n\npackage com.exam.oca; \n\nNo wildcard (*) allowed in package declaration. Don't include class name in package declaration.\n\nNOTE: all small case letters in package keyword."},{"id":42,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         int [] arr1 = {1, 2, 3};\n         char [] arr2 = {'A', 'B'}; //ASCII code of 'A' is 65, 'B' is 66\n         arr1 = arr2;\n         for(int i = 0; i < arr1.length; i++) {\n             System.out.print(arr1[i] + \" \");\n         }\n     }\n}","type":"Single Choice","answer":"D","answers":{"A":"A B","B":"65 66","C":"1 2 3","D":"Compilation error","E":"","F":"","G":"","H":""},"explanation":"Initially arr1 refers to an int array object of 3 elements: 1, 2, 3\n\nAnd arr2 refers to an char array object of 2 elements: 'A', 'B'. \n\nStatement arr1 = arr2; gives compilation error as char [] is not compatible with int [] even though char is compatible with int."},{"id":43,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n \n     private static void add(double d1, double d2) {\n         System.out.println(\"double version: \" + (d1 + d2));\n     }\n \n     private static void add(Double d1, Double d2) {\n         System.out.println(\"Double version: \" + (d1 + d2));\n     }\n \n     public static void main(String[] args) {\n         add(10.0, new Double(10.0));\n     }\n \n}","type":"Single Choice","answer":"C","answers":{"A":"An exception is thrown at runtime","B":"double version: 20.0","C":"Compilation error","D":"Double version: 20.0","E":"","F":"","G":"","H":""},"explanation":"add(10.0, new Double(10.0)); is an ambiguous call as compiler can't decide whether to convert 1st argument to Double reference type or 2nd argument to double primitive type.\n\nSo, add(10.0, new Double(10.0)); causes compilation error."},{"id":44,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n     public static void main(String[] args) {\n         Boolean [] arr = new Boolean[2];\n         List<Boolean> list = new ArrayList<>();\n         list.add(arr[0]);\n         list.add(arr[1]);\n \n         if(list.remove(0)) {\n             list.remove(1);\n         }\n \n         System.out.println(list);\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"F","answers":{"A":"[true]","B":"[]","C":"ArrayIndexOutOfBoundsException is thrown at runtime","D":"Compilation error","E":"[false]","F":"NullPointerException is thrown at runtime","G":"","H":""},"explanation":"Default values are assigned to all array elements. As Boolean is of reference type, hence arr[0] = null and arr[1] = null. After addition list contains [null, null].\n\n\n\nlist.remove(0) removes and returns the Boolean object referring to null. If expression can specify Boolean type, so no compilation error over here. At this point list contains [null]. \n\n\n\nFor the boolean expression of if-block, Java runtime tries to extract the stored boolean value using booleanValue() method, and this throws an instance of NullPointerException as booleanValue() method is invoked on null reference."},{"id":45,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nclass A {\n     A() {\n         this(1);\n         System.out.println(\"M\");\n     }\n \n     A(int i) {\n         System.out.println(\"N\");\n     }\n}\n \nclass B extends A {\n \n}\n \npublic class Test {\n    public static void main(String[] args) {\n         new B();\n     }\n}","type":"Single Choice","answer":"D","answers":{"A":"N","B":"M","C":"M\nN","D":"N\nM","E":"","F":"","G":"","H":""},"explanation":"Default constructor added by Java compiler in B class is:\n1 B() {\n2     super();\n3 }\nOn executing new B(); statement, class B's default constructor is invoked, which invokes no-arg constructor of class A [super();].\nno-arg constructor of class A invokes parameterized constructor of class A [this(1);].\nN is printed first and after that M is printed."},{"id":46,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider below code: \n\npackage com.udayan.oca;\n \npublic class Test {\n \n     private static void add(int i, int j) {\n         System.out.println(\"int version\");\n     }\n \n     private static void add(Integer i, Integer j) {\n         System.out.println(\"Integer version\");\n     }\n \n     public static void main(String[] args) {\n         add(10, 20);\n     }\n \n}\nWhich modifications, done independently, print \"Integer version\" on to the console?\n\nSelect 3 options.","type":"Multiple Choice","answer":"A,B,C","answers":{"A":"Replace add(10, 20);  by add(null, null);","B":"Remove add(int i, int j)  method declaration and definition.","C":"Replace add(10, 20);  by add(new Integer(10), new Integer(20));","D":"Replace add(10, 20);  by add(10.0, 20.0);","E":"","F":"","G":"","H":""},"explanation":"Method add is overloaded in Test class. Which overloaded method is invoked is decided at the compile time. add(10, 20); tags to int version as 10, 20 are int literals and direct match is available. So without any changes, above code prints \"int version\" on to the console.\n\n\n\nTo print \"Integer version\" on to the console, add(Integer, Integer); method needs to be invoked. Let's check all the options one by one:\n\n\"Remove add(int i, int j) method declaration and definition.\" add(10, 20); => auto-boxing will convert literal 10 and 20 to Integer instances and will call the add(Integer, Integer) method. So this option is valid. \n\n\n\nReplace add(10, 20); by add(new Integer(10), new Integer(20)); => This statement is specifically calling add(Integer, Integer); So this option is also valid. \n\n\n\nReplace add(10, 20); by add(10.0, 20.0);  10.0 and 20.0 are default literals and can't be mapped to int or Integer types, hence this gives compilation error. Not a valid option.\n\n\n\nReplace add(10, 20); by add(null, null);  As Integer is reference type hence add(null, null); maps to add(Integer, Integer); So this is also a valid option."},{"id":47,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n         System.out.println(1 + 2 + 3 + 4 + \"Hello\");\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"1234Hello","B":"10Hello","C":"10 Hello","D":"64Hello","E":"","F":"","G":"","H":""},"explanation":"As expression contains + operator only, which is left to right associative. Let us group the expression.\n\n1 + 2 + 3 + 4 + \"Hello\"\n\n= (1 + 2) + 3 + 4 + \"Hello\"\n\n= ((1 + 2) + 3) + 4 + \"Hello\"\n\n= (((1 + 2) + 3) + 4) + \"Hello\"\n\n[Let us solve it now,]\n\n= ((3 + 3) + 4) + \"Hello\"\n\n= (6 + 4) + \"Hello\"\n\n= 10 + \"Hello\"\n\n[+ operator with String behaves as concatenation operator.]\n\n= 10Hello"},{"id":48,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"For the class Test, which option, if used to replace /*INSERT*/, will print \"Lucky no. 7\" on to the console?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         /*INSERT*/\n         switch(var) {\n             case '7':\n                 System.out.println(\"Lucky no. 7\");\n                 break;\n             default:\n                 System.out.println(\"DEFAULT\");\n         }\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"None of the other options","B":"int var = '7';","C":"int var = 7;","D":"Integer var = 7;","E":"","F":"","G":"","H":""},"explanation":"int var = 7; => DEFAULT,\n\nInteger var = 7; => var is of Integer type and case contains char '7'. char '7' cannot be compared with Integer and hence compilation error. case '7' can easily be compared with int value but not with Integer type.\n\nint var = '7'; => Lucky no. 7 \n\n\n\nHINT: There is no need to remember. case '7' value means you are trying to equate or compare var (Integer value) with '7' (char).\n\nIf assignment operation works then method invocation, switch expression parameter etc. will also work. Integer var = 7; is possible but Integer var = '7'; causes compilation error as char cannot be converted to Integer."},{"id":49,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider codes of 3 java files:\n\n//Class1.java\npackage com.udayan.oca;\n \nimport java.io.FileNotFoundException;\n \npublic class Class1 {\n     public void read() throws FileNotFoundException {}\n}\n//Class2.java\npackage com.udayan.oca;\n \npublic class Class2 {\n     String Class2;\n     public void Class2() {}\n}\n//Class3.java\npackage com.udayan.oca;\n \npublic class Class3 {\n     private void print() {\n         private String msg = \"HELLO\";\n         System.out.println(msg);\n     }\n}\nWhich of the following statement is true?","type":"Single Choice","answer":"A","answers":{"A":"Class1.java and Class2.java compile successfully","B":"Class2.java and Class3.java compile successfully","C":"Class1.java and Class3.java compile successfully","D":"Only Class2.java compiles successfully","E":"Only Class3.java compiles successfully","F":"Only Class1.java compiles successfully","G":"","H":""},"explanation":"Method declaring checked exception in its throws clause doesn't mean that it should have code to actually throw that type of Exceptions.\n\nSo even though read() method of Class1 declares to throw FileNotFoundException but its body doesn't actually throw an instance of FileNotFoundException. \n\n\n\nVariable and method name can be same as class name, so code of Class2 is also valid.\n\nRemember: Though you don't get any compilation error but it is not recommended to use the Class name for variable and method names.\n\n\n\nLOCAL variable can be declared with final modifier only.\n\nmsg variable inside print() method of Class3 is declared private and this causes compilation error."},{"id":50,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"DateTimeFormatter is defined inside which package?","type":"Single Choice","answer":"D","answers":{"A":"java.time","B":"java.text","C":"java.util","D":"java.time.format","E":"","F":"","G":"","H":""},"explanation":"DateTimeFormatter is a part of \"java.time.format\" package, whereas LocalDate, LocalTime, LocalDateTime and Period are defined inside \"java.time\" package."},{"id":51,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String [] args) {\n         int a = 3;\n         System.out.println(a++ == 3 || --a == 3 && --a == 3);\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"false","B":"true","C":"Compilation error","D":"","E":"","F":"","G":"","H":""},"explanation":"a++ == 3 || --a == 3 && --a == 3; [Given expression]. \n\n(a++) == 3 || --a == 3 && --a == 3; [Postfix has got higher precedence than other operators]. \n\n(a++) == 3 || (--a) == 3 && (--a) == 3; [After postfix, precedence is given to prefix].   \n\n((a++) == 3) || ((--a) == 3) && ((--a) == 3); [== has higher precedence over && and ||]. \n\n((a++) == 3) || (((--a) == 3) && ((--a) == 3)); [&& has higher precedence over ||]. \n\nLet's start solving it:\n\n((a++) == 3) || (((--a) == 3) && ((--a) == 3)); [a=3, res=false]. \n\n(3 == 3) || (((--a) == 3) && ((--a) == 3)); [a=4, res=false]. \n\ntrue || (((--a) == 3) && ((--a) == 3)); [a=4, res=false].  || is a short-circuit operator, hence no need to evaluate expression on the right. \n\nres is true and a is 4."},{"id":52,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider below code:\n\n//Test.java\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        String javaworld = \"JavaWorld\";\n        String java = \"Java\";\n        String world = \"World\";\n        java += world;\n        System.out.println(java == javaworld);\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"JavaWorld","B":"true","C":"false","D":"World","E":"Java","F":"","G":"","H":""},"explanation":"Please note that Strings computed by concatenation at compile time, will be referred by String Pool during execution. Compile time String concatenation happens when both of the operands are compile time constants, such as literal, final variable etc.\n\nWhereas, Strings computed by concatenation at run time (if the resultant expression is not constant expression) are newly created and therefore distinct.\n\n\n\n`java += world;` is same as `java = java + world;` and `java + world` is not a constant expression and hence is calculated at runtime and returns a non pool String object \"JavaWorld\", which is referred by variable 'java'.\n\n\n\nOn the other hand, variable 'javaworld' refers to String Pool object \"JavaWorld\". As both the variables 'java' and 'javaworld' refer to different String objects, hence `java == javaworld` returns false."},{"id":53,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"public class Test {\n     private static int [] arr;\n     public static void main(String [] args) {\n         if(arr.length > 0 && arr != null) {\n             System.out.println(arr[0]);\n         }\n     }\n}\nPredict Output, if the above code is run with given command?\n\njava Test","type":"Single Choice","answer":"D","answers":{"A":"Compilation error","B":"ArrayIndexOutOfBoundsException is thrown at runtime","C":"No Output","D":"NullPointerException is thrown at runtime","E":"","F":"","G":"","H":""},"explanation":"Variable arr is a class variable of int [] type, so by default it is initialized to null.\n\nIn if block, arr.length > 0 is checked first. Accessing length property on null reference throws NullPointerException.\n\n\n\nCorrect logical if block declaration should be:\n\nif(arr != null && arr.length > 0)\n\n\n\nFirst check for null and then access properties/methods."},{"id":54,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Which of the following can be used as a constructor for the class given below?\n\npublic class Planet {\n}","type":"Single Choice","answer":"B","answers":{"A":"None of the other options","B":"public Planet(String str) {}","C":"public void Planet(){}","D":"public void Planet(int x){}","E":"","F":"","G":"","H":""},"explanation":"Constructor has the same name as the class, doesn't have return type and can accept parameters."},{"id":55,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing DivModTest class?\n\npackage com.udayan.oca;\n \npublic class DivModTest {\n     public static void main(String[] args) {\n         System.out.println( 23 / 2.0 );\n         System.out.println( 23 % 2.0 );\n     }\n}","type":"Single Choice","answer":"A","answers":{"A":"11.5\n1.0","B":"11\n1","C":"11.0\n1.0","D":"11.5\n0.0","E":"","F":"","G":"","H":""},"explanation":"As floating point numbers are used in the expression, hence result should be in floating point number.\nCorrect result is:\n23 / 2.0 = 11.5 \n23 % 2.0 = 1.0"},{"id":56,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider following code snippet:\n\npackage com.udayan.test;\n \npublic class Exam {\n    public static void main(String [] args) {\n        System.out.println(\"All the best!\");\n    }\n}\nLocation of files:\n\nD:.\n└───WORK\n    └───QUIZ\n        └───SEC07\n            ├───classes\n            │   └───com\n            │       └───udayan\n            │           └───test\n            │                   Exam.class\n            │\n            └───src\n                └───com\n                    └───udayan\n                        └───test\n                                Exam.java\nYou are currently at WORK folder.\n\nD:\\WORK>\n\nWhich of the following java command will show All the best! on to the console?","type":"Single Choice","answer":"B","answers":{"A":"java -cp Quiz\\Sec07\\classes\\com\\udayan\\test\\ Exam","B":"java -cp Quiz\\Sec07\\classes\\ com.udayan.test.Exam","C":"java Exam","D":"java com.udayan.test.Exam","E":"","F":"","G":"","H":""},"explanation":"To execute Exam class from WORK folder, you should specify the classpath (Quiz\\Sec07\\classes\\) which contains whole path of the class(com\\udayan\\test\\Exam.class).\n\nAnd you should also use fully qualified name of the class, which is com.udayan.test.Exam.\n\nHence correct option is: java -cp Quiz\\Sec07\\classes\\ com.udayan.test.Exam"},{"id":57,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n     public static void main(String[] args) {\n         List<String> fruits = new ArrayList<>();\n         fruits.add(\"apple\");\n         fruits.add(\"orange\");\n         fruits.add(\"grape\");\n         fruits.add(\"mango\");\n         fruits.add(\"banana\");\n         fruits.add(\"grape\");\n \n         if(fruits.remove(\"grape\"))\n             fruits.remove(\"apple\");\n \n         System.out.println(fruits);\n     }\n}","type":"Single Choice","answer":"C","answers":{"A":"Compilation error","B":"[orange, grape, mango, banana]","C":"[orange, mango, banana, grape]","D":"An exception is thrown at runtime","E":"","F":"","G":"","H":""},"explanation":"remove(Object) method of List interface removes the first occurrence of the specified element from the list, if it is present. If this list does not contain the element, it is unchanged. remove(Object) method returns true, if removal was successful otherwise false.\n\nInitially list has: [apple, orange, grape, mango, banana, grape]. fruits.remove(\"grape\") removes the first occurrence of \"grape\" and after the successful remove, list has: [apple, orange, mango, banana, grape]. fruits.remove(\"grape\") returns true, control goes inside if block and executes fruits.remove(\"apple\");\n\nfruits list contains \"apple\", so after the removal list has: [orange, mango, banana, grape]."},{"id":58,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider below code of Test.java file:\n\npackage com.udayan.oca;\n \nclass Document {\n    int pages;\n    Document(int pages) {\n        this.pages = pages;\n    }\n}\n \nclass Word extends Document {\n    String type;\n    Word(String type) {\n        super(20); //default pages\n        /*INSERT-1*/\n    }\n    \n    Word(int pages, String type) {\n        /*INSERT-2*/\n        super.pages = pages;\n    }\n}\n \npublic class Test {\n    public static void main(String[] args) {\n        Word obj = new Word(25, \"TEXT\");\n        System.out.println(obj.type + \",\" + obj.pages);\n    }\n}\n\n\nCurrently above code causes compilation error.\n\nWhich of the options can successfully print TEXT,25 on to the console?","type":"Single Choice","answer":"E","answers":{"A":"Replace /*INSERT-1*/ with:\nthis(type);\nReplace /*INSERT-2*/ with:\nthis.type = type;","B":"Replace /*INSERT-1*/ with:\nsuper.type = type;\nReplace /*INSERT-2*/ with:\nsuper(type);","C":"Replace /*INSERT-1*/ with:\nsuper.type = type;\nReplace /*INSERT-2*/ with:\nthis(type);","D":"None of the other options","E":"Replace /*INSERT-1*/ with:\nthis.type = type;\nReplace /*INSERT-2*/ with:\nthis(type);","F":"","G":"","H":""},"explanation":"Java compiler adds super(); as the first statement inside constructor, if call to another constructor using this(...) or super(...) is not available. \n\nCompiler adds super(); as the first line in Word's constructor: Word(int pages, String type) { super(); } but Document class doesn't have a no-argument constructor and that is why Word's constructor `Word(int pages, String type)` causes compilation error.\n\n\n\nWord(String) constructor is actually not setting the passed type argument. Replace /*INSERT-1*/ with: `this.type = type;` will set the value to type variable.\n\n\n\nAs the first statement inside Word(int pages, String type){} constructor, you can either have `super(pages);` or `this(type);` but not both.\n\nReplacing /*INSERT-2*/ with `super(pages);` will be redundant as in the next statement `super.pages = pages;`, pages variable of Document class is set. Hence, replacing /*INSERT-2*/ with `this(type);` is needed to set the type variable."},{"id":59,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Which of the following statement is correct for below code?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         final boolean flag;\n         flag = false;\n         while(flag) {\n             System.out.println(\"Good Morning!\");\n         }\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"Compilation error.","B":"Program compiles and executes successfully but produces no output.","C":"It will print \"Good Morning!\" once.","D":"Infinite loop.","E":"","F":"","G":"","H":""},"explanation":"final boolean flag; flag = false; doesn't make flag a compile time constant. \n\nCompiler doesn't know flag's value at compile-time and hence it allows this syntax. \n\nAt runtime, as boolean expression of while loop is false, loop doesn't execute even once and hence no output."},{"id":60,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n     public static void main(String[] args) {\n         List<String> dryFruits = new ArrayList<>();\n         dryFruits.add(\"Walnut\");\n         dryFruits.add(\"Apricot\");\n         dryFruits.add(\"Almond\");\n         dryFruits.add(\"Date\");\n \n         for(String dryFruit : dryFruits) {\n             if(dryFruit.startsWith(\"A\")) {\n                 dryFruits.remove(dryFruit);\n             }\n         }\n \n         System.out.println(dryFruits);\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"[Walnut, Date]","B":"[Walnut, Apricot, Almond, Date]","C":"An exception is thrown at runtime","D":"Compilation error","E":"","F":"","G":"","H":""},"explanation":"ConcurrentModificationException exception may be thrown for following condition:\n1. Collection is being iterated using Iterator/ListIterator or by using for-each loop.\nAnd\n2. Execution of Iterator.next(), Iterator.remove(), ListIterator.previous(), ListIterator.set(E) & ListIterator.add(E) methods. These methods may throw java.util.ConcurrentModificationException in case Collection had been modified by means other than the iterator itself, such as Collection.add(E) or Collection.remove(Object) or List.remove(int) etc.\nPLEASE NOTE: for-each loop internally implements Iterator and invokes hasNext() and next() methods.\nFor the given code, 'dryFruits' list is being iterated using for-each loop (internally as an Iterator).\nhasNext() method of Iterator has following implementation:\n1 public boolean hasNext() {\n2     return cursor != size;\n3 }\nWhere cursor is the index of next element to return and initially it is 0.\n1st Iteration: cursor = 0, size = 4, hasNext() returns true. iterator.next() increments the cursor by 1 and returns \"Walnut\".\n2nd Iteration: cursor = 1, size = 4, hasNext() returns true. iterator.next() increments the cursor by 1 and returns \"Apricot\". As \"Apricot\" starts with \"A\", hence dryFruits.remove(dryFruit) removes \"Apricot\" from the list and hence reducing the list's size by 1, size becomes 3.\n3rd Iteration: cursor = 2, size = 3, hasNext() returns true. iterator.next() method throws java.util.ConcurrentModificationException.\nIf you want to successfully remove the items from ArrayList, while using Iterator or ListIterator, then use Iterator.remove() or ListIterator.remove() method and NOT List.remove(...) method. Using List.remove(...) method while iterating the list (using the Iterator/ListIterator or for-each) may throw java.util.ConcurrentModificationException."},{"id":61,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"For the code below, what should be the name of java file?\n\npackage com.udayan.oca;\n \npublic class HelloWorld {\n     public static void main(String [] args) {\n         System.out.println(\"Hello World!\");\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"World.java","B":"HelloWorld.java","C":"Hello.java","D":"helloworld.java","E":"","F":"","G":"","H":""},"explanation":"Java is case sensitive language. File name should match with public class's name, which is \"HelloWorld\".\n\"helloworld\" is different from \"HelloWorld\"."},{"id":62,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Given the following definitions of the class Insect and the interface Flyable, the task is to declare a class Mosquito that inherits from the class Insect and implements the interface Flyable.\n\nclass Insect {}\ninterface Flyable {}\nSelect the correct option to accomplish this task:","type":"Single Choice","answer":"B","answers":{"A":"class Mosquito extends Insect, Flyable{}","B":"class Mosquito extends Insect implements Flyable{}","C":"class Mosquito implements Insect, Flyable{}","D":"class Mosquito implements Insect extends Flyable{}","E":"","F":"","G":"","H":""},"explanation":"A class in Java extends class and implements interface."},{"id":63,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider below code:\n\n//Test.java\npackage com.udayan.oca;\n \nimport java.time.LocalDate;\n \npublic class Test {\n     public static void main(String [] args) {\n         LocalDate obj = LocalDate.now();\n         System.out.println(obj.getHour());\n     }\n}\nWhich of the following statement is correct?","type":"Single Choice","answer":"B","answers":{"A":"It will print any int value between 1 and 24","B":"Code fails to compile","C":"Code compiles successfully but throws Runtime exception","D":"It will print any int value between 0 and 23","E":"","F":"","G":"","H":""},"explanation":"LocalDate.now(); retrieves the current date from the system clock. There is no issue with this statement.\n\nobj is of LocalDate type and getHour() method is not defined in LocalDate class, it is defined in LocalTime and LocalDateTime class. Hence obj.getHour() causes compilation failure."},{"id":64,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     private static String s;\n     public static void main(String[] args) {\n         try {\n             System.out.println(s.length());\n         } catch(NullPointerException | RuntimeException ex) {\n             System.out.println(\"DONE\");\n         }\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"DONE","B":"Compilation error","C":"Executes successfully but no output","D":"None of the above","E":"","F":"","G":"","H":""},"explanation":"NullPointerException extends RuntimeException and in multi-catch syntax we can't specify multiple Exceptions related to each other in multilevel inheritance."},{"id":65,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Which of the following will give you current system time?\n\nSelect 2 options.","type":"Multiple Choice","answer":"C,F","answers":{"A":"System.out.println(new LocalDate());","B":"System.out.println(new LocalDateTime());","C":"System.out.println(LocalDateTime.now());","D":"System.out.println(LocalDate.now());","E":"System.out.println(new LocalTime());","F":"System.out.println(LocalTime.now());","G":"","H":""},"explanation":"new LocalDate(), new LocalTime() and new LocalDateTime() give compilation error as constructor of these classes are declared private. \nSystem.out.println(LocalDate.now()); => Prints current date only. \nSystem.out.println(LocalTime.now()); => Prints current time only.\nSystem.out.println(LocalDateTime.now()); => Prints current date and time both."},{"id":66,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        String [] arr = {\"abc\", \"TrUe\", \"false\", null, \"FALSE\"};\n        for(String s : arr) {\n            System.out.print(Boolean.valueOf(s) ? \"T\" : \"F\");\n        }\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"FTFFF","B":"TTFTT","C":"FFFFF","D":"NullPointerException is thrown at runtime","E":"TTTFT","F":"","G":"","H":""},"explanation":"Boolean.valueOf(String s) returns true if passed String argument is not null and is equal, ignoring case, to the String \"true\". In all other cases it returns false.\n\nBoolean.valueOf(\"abc\") => false. As \"abc\".equalsIgnoreCase(\"true\") is false.\n\nBoolean.valueOf(\"TrUe\") => true. As \"TrUe\".equalsIgnoreCase(\"true\") is true.\n\nBoolean.valueOf(\"false\") => false. As \"false\".equalsIgnoreCase(\"true\") is false.\n\nBoolean.valueOf(null) => false. As passed argument is null.\n\nBoolean.valueOf(\"FALSE\") => false. As \"FALSE\".equalsIgnoreCase(\"true\") is false."},{"id":67,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         int a = 7;\n         boolean res = a++ == 7 && ++a == 9 || a++ == 9;\n         System.out.println(\"a = \" + a);\n         System.out.println(\"res = \" + res);\n     }\n}","type":"Single Choice","answer":"D","answers":{"A":"Compilation error","B":"a = 10\nres = true","C":"a = 10\nres = false","D":"a = 9\nres = true","E":"","F":"","G":"","H":""},"explanation":"boolean res = a++ == 7 && ++a == 9 || a++ == 9;\n= (a++) == 7 && ++a == 9 || (a++) == 9;\n= (a++) == 7 && (++a) == 9 || (a++) == 9;\n= ((a++) == 7) && ((++a) == 9) || ((a++) == 9);\n= ((a++) == 7) && ((++a) == 9) || ((a++) == 9);\n= (((a++) == 7) && ((++a) == 9)) || ((a++) == 9);\n= ((7 == 7) && ((++a) == 9)) || ((a++) == 9); //a = 8\n= (true && ((++a) == 9)) || ((a++) == 9); //a = 8\n= (true && (9 == 9)) || ((a++) == 9); //a = 9\n= (true && true) || ((a++) == 9); //a = 9\n= true || ((a++) == 9); //a = 9\n= true; //a = 9\nSo,\na = 9\nres = true"},{"id":68,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         int i;\n         outer: \n         do {\n             i = 5;\n             inner:\n             while (true) {\n                 System.out.println(i--);\n                 if (i == 4) {\n                     break outer;\n                 }\n             }\n         } while (true);\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"Prints 5 in an infinite loop.","B":"Prints 5 once.","C":"5\n3\n2\n1","D":"Compilation error.","E":"","F":"","G":"","H":""},"explanation":"\"outer\" and \"inner\" are valid label names. \nOn execution, control enters main method and creates int variable i. \nOn encountering do-while loop, control goes inside and initializes variable i to 5. \nThen it executes while loop and it's boolean expression is always true. \nSystem.out.println(i--); prints 5 to the console first, and then decrements the value of i by 1. So, i becomes 4. \nBoolean expression of if(i == 4) evaluates to true. break outer; statement executes and takes the control out of do-while loop. \nmain method ends and program terminates successfully. \nSo, 5 gets printed only once."},{"id":69,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         String fName = \"James\";\n         String lName = \"Gosling\";\n         System.out.println(fName = lName);\n     }\n}","type":"Single Choice","answer":"C","answers":{"A":"false","B":"true","C":"None of the other options","D":"Compilation error","E":"","F":"","G":"","H":""},"explanation":"Both fName and lName are of reference type. fName refers to \"James\" and lName refers to \"Gosling\".\nIn System.out.println() statement, we have used assignment operator (=) and not equality operator (==). So result is never boolean.\nfName = lName means copy the contents of lName to fName.\nAs lName is referring to \"Gosling\" and so after the assignment, fName starts referring to \"Gosling\" as well.\nSystem.out.println() finally prints the String referred by fName, which is \"Gosling\".\nThis option is is not available, hence correct answer is \"None of the other options\""},{"id":70,"trainingUnit":"OCA","trainingContent":"Exam 4","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n \npublic class Test {\n     public static void main(String [] args) {\n         LocalDate date1 = LocalDate.parse(\"1947-08-15\", DateTimeFormatter.ISO_DATE);\n         LocalDate date2 = LocalDate.parse(\"1947-08-15\", \n                                                DateTimeFormatter.ISO_LOCAL_DATE);\n         LocalDate date3 = LocalDate.of(1947, 8, 15);\n \n         System.out.println(date1.equals(date2) + \" : \" + date2.equals(date3));\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"A","answers":{"A":"true : true","B":"true : false","C":"false : false","D":"false : true","E":"Runtime exception","F":"","G":"","H":""},"explanation":"ISO_LOCAL_DATE formatter formats the date without the offset, such as \"1947-08-15\". \n\nISO_DATE formatter formats the date with offset (if available), such as \"1947-08-15\" or \"1947-08-15+05:30\", but remember LocalDate object doesn't contain any offset information. \n\nIn this case, all the three date instances are meaningfully equal. \n\n\n\nFor the OCA exam, you can check following DateTimeFormatter types: BASIC_ISO_DATE, ISO_DATE, ISO_LOCAL_DATE, ISO_TIME, ISO_LOCAL_TIME, ISO_DATE_TIME, ISO_LOCAL_DATE_TIME."}]