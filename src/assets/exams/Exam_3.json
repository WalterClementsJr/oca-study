[{"id":1,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n package com.udayan.oca;\n  \n import java.util.ArrayList;\n import java.util.List;\n  \n public class Test {\n      public static void main(String[] args) {\n          List<Integer> list = new ArrayList<>();\n          list.add(100);\n          list.add(7);\n         list.add(50);\n          list.add(17);\n          list.add(10);\n          list.add(5);\n  \n          list.removeIf(a -> a % 10 == 0);\n \n          System.out.println(list);\n      }\n }","type":"Single Choice","answer":"A","answers":{"A":"[7, 17, 5]","B":"[100, 7, 50, 17, 10, 5]","C":"[100, 50, 10]","D":"Compilation error","E":"Runtime Exception","F":"","G":""},"explanation":"removeIf(Predicate) method was added as a default method in Collection interface in JDK 8 and it removes all the elements of this collection that satisfy the given predicate. \n\nPredicate's test method returns true for all the Integers divisible by 10."},{"id":2,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"When does a class get the default constructor?","type":"Single Choice","answer":"A","answers":{"A":"If the class does not define any constructors explicitly.","B":"If you define parameterized constructor for the class.","C":"All classes in Java get a default constructor.","D":"You have to define at least one constructor to get the default constructor.","E":"","F":"","G":""},"explanation":"Default constructor (which is no-argument constructor) is added by Java compiler, only if there are no constructors in the class."},{"id":3,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider 2 files:\n\n//Counter.java\npackage com.udayan.oca;\n \npublic class Counter {\n    public int count = 0;\n \n    public Counter(int start) {\n        count = start;\n    }\n \n    public int getCount() {\n        return count;\n    }\n \n    public void increase(int val) {\n        count = count + val;\n    }\n \n    public String toString() {\n        return this.count + \"\";\n    }\n}\n\n\n//Test.java\npackage com.udayan.oca.test;\n \nimport java.util.Arrays;\n \nimport com.udayan.oca.Counter;\n \npublic class Test {\n    public static void main(String[] args) {\n        Counter[] arr = new Counter[] { new Counter(-1000), new Counter(539), new Counter(0) };\n \n        /* INSERT */\n \n        System.out.println(Arrays.toString(arr));\n    }\n}\n\n\nCurrently on executing Test class, output is: [-1000, 539, 0].\n\n\n\nAnd below blocks:\n\n1.\n\nfor(Counter ctr : arr) {\n\n    ctr.count = 100;\n\n}\n\n2.\n\nfor (Counter ctr : arr) {\n\n    int x = ctr.getCount();\n\n    x = 100;\n\n}\n\n3.\n\nfor (Counter ctr : arr) {\n\n    ctr.getCount() = 100;\n\n}\n\n4.\n\nfor(Counter ctr : arr) {\n\n    ctr.increase(100 - ctr.count);\n\n}\n\n5.\n\nfor (Counter ctr : arr) {\n\n    ctr.increase(100 - ctr.getCount());\n\n}\n\n6.\n\nfor(Counter ctr : arr) {\n\n    ctr.increase(-ctr.getCount() + 100);\n\n}\n\n7.\n\nfor(Counter ctr : arr) {\n\n    ctr.increase(-ctr.count + 100);\n\n}\n\n\n\nHow many blocks can replace /*INSERT*/ such that output is: [100, 100, 100]?","type":"Single Choice","answer":"C","answers":{"A":"Only Three blocks","B":"Only Four blocks","C":"Only Five blocks","D":"All Seven blocks","E":"Only Two blocks","F":"Only One block","G":"Only Six blocks"},"explanation":"There are 2 ways to change the value of count variable of Counter class:\n\n1. As access modifier of count variable is public, hence it can easily be accessed from other classes using the instance of Counter class, such as `new Counter().count` or `obj.count` (where obj is reference variable of Counter type, referring to Counter variable's instance)\n\n2. By invoking the increase(int) method of Counter class.\n\n\n\nNow let's check all the blocks one by one:\n\n1.\n\nfor(Counter ctr : arr) {\n\n    ctr.count = 100;\n\n}\n\n✓ It will assign 100 to count variables of three instances of Counter class.\n\n\n\n2.\n\nfor (Counter ctr : arr) {\n\n    int x = ctr.getCount();\n\n    x = 100;\n\n}\n\n✗ x is local variable and is copy of ctr.count. Hence, assigning 100 to x will not affect the value of ctr.count.\n\n\n\n3.\n\nfor (Counter ctr : arr) {\n\n    ctr.getCount() = 100;\n\n}\n\n✗ ctr.getCount() returns int value and not a variable, hence cannot be used on left side of assignment operator. It causes compilation error.\n\n\n\n4.\n\nfor(Counter ctr : arr) {\n\n    ctr.increase(100 - ctr.count);\n\n}\n\n✓ You must have noticed that value of count variable of 3 array elements are: -1000, 539, 0. How will you change all 3 values to 100 using same expression? It is by adding 100 and subtracting current value. For example,\n\n-1000 + 100 -(-1000) = 100\n\nor\n\n539 + 100 - 539 = 100\n\nor\n\n0 + 100 - 0 = 100\n\nAnd same this is done by executing `ctr.increase(100 - ctr.count);` statement.\n\n\n\n5.\n\nfor (Counter ctr : arr) {\n\n    ctr.increase(100 - ctr.getCount());\n\n}\n\n✓ Same as block no. 4. Only difference is ctr.getCount() is used instead of ctr.count.\n\n\n\n6.\n\nfor(Counter ctr : arr) {\n\n    ctr.increase(-ctr.getCount() + 100);\n\n}\n\n✓ Same as block no. 5.\n\n\n\n7.\n\nfor(Counter ctr : arr) {\n\n    ctr.increase(-ctr.count + 100);\n\n}\n\n✓ Same as block no. 4.\n\n\n\nHence, out of given 7 blocks, 5 will give you expected output."},{"id":4,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     static Boolean[] arr = new Boolean[1];\n     public static void main(String[] args) {\n         if(arr[0]) {\n             System.out.println(true);\n         } else {\n             System.out.println(false);\n         }\n     }\n}","type":"Single Choice","answer":"C","answers":{"A":"Compilation error","B":"FALSE","C":"NullPointerException is thrown at runtime","D":"TRUE","E":"ArrayIndexOutOfBoundsException is thrown at runtime","F":"","G":""},"explanation":"All the array elements are initialized to their default values. arr is of Boolean type (reference type), so arr[0] is initialized to null.\n\n\n\nif expression works with Boolean type variable, so \"if(arr[0])\" doesn't give compilation error but java runtime extracts the boolean value stored in arr[0] and it uses booleanValue() method.\n\narr[0].booleanValue() means booleanValue() method is invoked on null reference and hence NullPointerException is thrown at runtime."},{"id":5,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     static Boolean[] arr = new Boolean[1];\n     public static void main(String[] args) {\n         if(arr[0]) {\n             System.out.println(true);\n         } else {\n             System.out.println(false);\n         }\n     }\n}","type":"Single Choice","answer":"A","answers":{"A":"13579","B":"1357911","C":"1234567891011","D":"246810","E":"12345678910","F":"","G":""},"explanation":"In the boolean expression (predicate.test(i)): i is of primitive int type but auto-boxing feature converts it to Integer wrapper type. \n\ntest(Integer) method of Predicate returns true if passed number is an odd number, so given loop prints only odd numbers. for loops works for the numbers from 1 to 10."},{"id":6,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Suppose you have created a java file, \"MyClass.java\". Which of the following commands will compile the java file?","type":"Single Choice","answer":"E","answers":{"A":"javac MyClass.class","B":"java MyClass.java","C":"java MyClass","D":"javac MyClass","E":"javac MyClass.java","F":"","G":""},"explanation":"Command to compile a java file: javac <java_file_name>.java [.java extension is compulsory]\n\nCommand to execute a java class: java <class_file_name> [.class extension should not be used]"},{"id":7,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Greetings class?\n\npackage com.udayan.oca;\n \npublic class Greetings {\n    String msg = null;\n    \n    public Greetings() {\n        this(\"Good Morning!\");\n    }\n    \n    public Greetings(String str) {\n        msg = str;\n    }\n    \n    public void display() {\n        System.out.println(msg);\n    }\n    \n    public static void main(String [] args) {\n        Greetings g1 = new Greetings();\n        Greetings g2 = new Greetings(\"Good Evening!\");\n        g1.display();\n        g2.display();\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"null\nGood Evening!","B":"null\nnull","C":"Good Morning!\nGood Evening!","D":"Good Morning!\nNull","E":"","F":"","G":""},"explanation":"Greetings g1 = new Greetings(); invokes no-arg constructor.\n\nNo-arg constructor calls parameterized constructor with the argument \"Good Morning!\"\n\nParameterized constructor assigns \"Good Morning!\" to msg variable of the object referred by g1.\n\nGreetings g2 = new Greetings(\"Good Evening!\"); invokes parameterized constructor, which assigns \"Good Evening!\" to msg variable of the object referred by g2.\n\ng1.display(); prints Good Morning!\n\ng2.display(); prints Good Evening!"},{"id":8,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the output of compiling and executing the Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         int x = 2;\n         switch (x) {\n             default:\n                 System.out.println(\"Still no idea what x is\");\n             case 1:\n                 System.out.println(\"x is equal to 1\");\n                 break;\n             case 2:\n                 System.out.println(\"x is equal to 2\");\n                 break;\n             case 3: \n                 System.out.println(\"x is equal to 3\");\n                 break;\n         }\n     }\n}","type":"Single Choice","answer":"D","answers":{"A":"Still no idea what x is\nx is equal to 1","B":"Produces no output","C":"Compilation error","D":"x is equal to 2","E":"","F":"","G":""},"explanation":"Even though default block is available at the top but matching case is present.\n\nSo control goes inside matching case and prints \"x is equal to 2\" on to the console.\n\nAfter that break; statement takes the control out of the switch- case block."},{"id":9,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?","type":"Single Choice","answer":"A","answers":{"A":"2\n1","B":"None of the other options","C":"Compilation Error","D":"2\n2","E":"","F":"","G":""},"explanation":"There are no compilation errors and main(String[]) method is invoked on executing Test class.\n\ni1 = 1.\n\n`Test.change(i1)` is executed next, contents of i1 (which is 1) is copied to the variable 'num' and method change(int) starts executing.\n\n`num++;` increments the value of num by 1, num = 2. There are no changes to the value of variable 'i1' of main(String[]) method, which still contains 1.\n\n`System.out.println(num);` prints 2 on to the console.\n\nchange(int) method finishes its execution and control goes back to the main(String[]) method.\n\n`System.out.println(i1);` prints 1 on to the console."},{"id":10,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         String msg = \"Hello\";\n         boolean [] flag = new boolean[1];\n         if(flag[0]) {\n             msg = \"Welcome\";\n         }\n         System.out.println(msg);\n     }\n}","type":"Single Choice","answer":"A","answers":{"A":"Hello","B":"Welcome","C":"ArrayIndexOutOfBoundsException","D":"NullPointerException","E":"","F":"","G":""},"explanation":"Variable msg is referring to String object \"Hello\".\n\nThere is only one element in boolean array object and it is initialized to default value of boolean, which is false.\n\nflag[0] is false, if-check fails and control doesn't enter if block.\n\nSystem.out.println(msg) prints original value of msg, which is \"Hello\"."},{"id":11,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nclass Super {\n     public Super(int i) {\n         System.out.println(100);\n     }\n}\n \nclass Sub extends Super {\n     public Sub() {\n         System.out.println(200);\n     }\n}\n \npublic class Test {\n     public static void main(String[] args) {\n         new Sub();\n     }\n}","type":"Single Choice","answer":"A","answers":{"A":"Compilation error","B":"200","C":"200\n100","D":"100\n200","E":"","F":"","G":""},"explanation":"super(); is added by the compiler as the first statement in both the constructors.\n\nClass Super extends from Object class and Object class has no-argument constructor, hence no issues with the constructor of Super class.\n\n\n\nBut no-arg constructor is not available in Super class, hence calling super(); from Sub class constructor gives compilation error."},{"id":12,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Which one of these top level classes cannot be sub-classed?","type":"Single Choice","answer":"C","answers":{"A":"abstract class Cat {}","B":"class Dog {}","C":"final class Electronics {}","D":"private class Car {}","E":"","F":"","G":""},"explanation":"class Dog {}: can be sub-classed within the same package.\nabstract class Cat {}: can be sub-classed within the same package.\nfinal class Electronics {}: a class with final modifier cannot be sub-classed.\nprivate class Car {}: a top level class cannot be declared with private modifier."},{"id":13,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test extends String {\n     @Override\n     public String toString() {\n         return \"TEST\";\n     }\n \n     public static void main(String[] args) {\n         Test obj = new Test();\n         System.out.println(obj);\n     }\n}","type":"Single Choice","answer":"A","answers":{"A":"Compilation error","B":"TEST","C":"Exception is thrown at runtime","D":"Output string contains @ symbol","E":"","F":"","G":""},"explanation":"String is a final class so it cannot be extended."},{"id":14,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\n//Test.java\npackage com.udayan.oca;\n \nclass Point {\n    static int x;\n    private int y;\n    \n    public String toString() {\n        return \"Point(\" + x + \", \" + y + \")\";\n    }\n}\n \npublic class Test {\n    public static void main(String[] args) {\n        Point p1 = new Point();\n        p1.x = 100;\n        p1.y = 200;\n        \n        Point p2 = new Point();\n        p2.x = 100;\n        p2.y = 200;\n        \n        System.out.println(p1);\n    }\n}","type":"Single Choice","answer":"G","answers":{"A":"Point(200, 200)","B":"Point(200, 0)","C":"Point(0, 200)","D":"Point(100, 0)","E":"Point(100, 200)","F":"Point(100, 100)","G":"Compilation error"},"explanation":"Variable y is private so it cannot be accessed outside the boundary of Point class.\n\np1.y and p2.y used inside Test class, cause the compilation error."},{"id":15,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n     public static void main(String[] args) {\n         List<Integer> list = new ArrayList<>();\n         list.add(110);\n         list.add(new Integer(110));\n         list.add(110);\n \n         list.removeIf(i -> i == 110);\n         System.out.println(list);\n     }\n}","type":"Single Choice","answer":"A","answers":{"A":"[]","B":"[110, 110]","C":"[110]","D":"[110, 110, 110]","E":"","F":"","G":""},"explanation":"process(List, Predicate) method prints all the records passing the Predicate's test and test is to process the records having age greater than 20.\n\nThere are 3 records with age > 20 and these are printed in the insertion order.\n\n\n\nNOTE: toString() method just returns the name."},{"id":16,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\n//Test.java\npackage com.udayan.oca;\n \nimport java.io.FileNotFoundException;\n \npublic class Test {\n     public static void main(String[] args) {\n         try {\n             System.out.println(1);\n         } catch (NullPointerException ex) {\n             System.out.println(\"ONE\");\n         } catch (FileNotFoundException ex) {\n             System.out.println(\"TWO\");\n         }\n         System.out.println(\"THREE\");\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"THREE","B":"Compilation error","C":"ONE\nTHREE","D":"TWO\nTHREE","E":"None of the System.out.println statements are executed","F":"","G":""},"explanation":"Java doesn't allow to catch specific checked exceptions if these are not thrown by the statements inside try block.\n\ncatch(FileNotFoundException ex) {} causes  compilation error in this case as System.out.println(1); will never throw FileNotFoundException.\n\n\n\nNOTE: Java allows to catch Exception type. catch(Exception ex) {} will never cause compilation error."},{"id":17,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.time.LocalDate;\n \npublic class Test {\n     public static void main(String [] args) {\n         LocalDate joiningDate = LocalDate.parse(\"2006-03-16\");\n         System.out.println(joiningDate.withDayOfYear(29));\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Multiple Choice","answer":"A","answers":{"A":"2006-01-29","B":"None of the other options","C":"2006-01-01","D":"2006-03-29","E":"","F":"","G":""},"explanation":"joiningDate --> {2006-03-16}.\n\njoiningDate.withDayOfYear(29) returns a new LocalDate object with the day of the Year altered.\n\nA year has 365 days, so 29 means 29th day of the year, which is 29th Jan 2006.\n\n\n\nNOTE: There are other with methods, you should know for the exam. withDayOfMonth(int), withMonth(int) and withYear(int)."},{"id":18,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n     public static void main(String[] args) {\n         List<Boolean> list = new ArrayList<>();\n         list.add(true);\n         list.add(new Boolean(\"tRue\"));\n         list.add(new Boolean(\"abc\"));\n \n         if(list.remove(1)) {\n             list.remove(1);\n         }\n \n         System.out.println(list);\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"D","answers":{"A":"[false]","B":"[true, false]","C":"An exception is thrown at runtime","D":"[true]","E":"Compilation error","F":"","G":""},"explanation":"list.add(true); => Auto-boxing converts boolean literal true to Boolean instance containing true. Element at index 0 represents true.\n\n\n\nBoolean class code uses equalsIgnoreCase method to validate the passed String, so if passed String is \"true\" ('t', 'r', 'u' and 'e' can be in any case), then boolean value stored in Boolean object is true otherwise false. \n\n\n\nlist.add(new Boolean(\"tRue\")); => Element at index 1 represents true.\n\n\n\nlist.add(new Boolean(\"abc\")); => Element at index 2 represents false.\n\n\n\nSo initially list contains [true, true, false]. \n\n\n\nAs generic list is used, so list.remove(1) removes the Boolean instance (true) stored at index 1 and returns it. So after this operation list contains [true, false]. \n\n\n\nFor the boolean expression of if-block, Java runtime extracts the stored boolean value using booleanValue() method, which returns true. Control goes inside if-block and executes list.remove(1);  This removes element at index 1 so after this operation list contains [true] and [true] is printed on to the console."},{"id":19,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider below Lambda expression:\n\nPredicate predicate = s -> true; \n\nWhich of the lambda expression can successfully replace the lambda expression in above statement?","type":"Single Choice","answer":"B","answers":{"A":"s -> {return true}","B":"s -> {return true;}","C":"s -> {true}","D":"s -> {true;}","E":"An exception is thrown at runtime","F":"","G":""},"explanation":"In the lambda expression's body, if used, all 3 [return, {}, ;] must be used together."},{"id":20,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider below Lambda expression:\n\nPredicate predicate = s -> true; \n\nWhich of the lambda expression can successfully replace the lambda expression in above statement?","type":"Multiple Choice","answer":"A,C,D","answers":{"A":"private static String[] process(int [] arr, int start, int end) {\nreturn null;\n }","B":"private static int process(int [] arr, int start, int end) {\n     return null;\n }","C":"private static int[] process(int [] arr, int start, int end) { \n     return null;\n }","D":"private static String process(int [] arr, int start, int end) { \n     return null;\n }","E":"","F":"","G":""},"explanation":"It is clear from Line 5 that, method name should be process, it should be static method, it should accept 3 parameters (int[], int, int).\n\nAs process(arr, 3, 8) is passed as an argument of System.out.println method, hence process method's return type can be anything apart from void. println method is overloaded to accept all primitive types, char [], String type and Object type. int[] are String [] are of Object type.\n\nIn the given options, method specifying int as return type cannot return null as null can't be assigned to primitive type. int process(...) would cause compilation error."},{"id":21,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider below code:\n\n//Test.java\npackage com.udayan.oca;\n \nimport java.time.LocalDate;\nimport java.time.Month;\nimport java.time.Period;\n \npublic class Test {\n     public static void main(String [] args) {\n         LocalDate date = LocalDate.of(2000, Month.JANUARY, 1);\n         Period period = Period.parse(\"p-30000y\");\n         System.out.println(date.plus(period));\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"32000-01-01","B":"28000-01-01","C":"-28000-1-1","D":"Runtime exception","E":"Compilation error","F":"","G":""},"explanation":"There are 2 of methods available in LocalDate class: of(int, int, int) and of(int, Month, int). Month can either be passed as int value (1 to 12) or enum constants Month.JANUARY to Month.DECEMBER.\n\n\n\nPeriod.parse(CharSequence) method accepts the String parameter in \"PnYnMnD\" format, over here P,Y,M and D can be in any case. \"p-30000y\" means Period of -30000 years. \n\n\n\nThe minimum supported LocalDate is: {-999999999-01-01} and maximum supported LocalDate is: {+999999999-12-31}. If period of -30000 years is added to 1st Jan 2000, then result is 1st Jan -28000."},{"id":22,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider below code:\n\n//Test.java\npackage com.udayan.oca;\n \nimport java.time.LocalDate;\nimport java.time.Month;\nimport java.time.Period;\n \npublic class Test {\n     public static void main(String [] args) {\n         LocalDate date = LocalDate.of(2000, Month.JANUARY, 1);\n         Period period = Period.parse(\"p-30000y\");\n         System.out.println(date.plus(period));\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"D","answers":{"A":"FALSE","B":"TRUE","C":"ArrayIndexOutOfBoundsException is thrown at runtime","D":"NullPointerException is thrown at runtime","E":"","F":"","G":""},"explanation":"All the elements of array are initialized to respective zeros (in case of primitive type) or null (in case of reference type).\n\nSo, arr[0] refers to null.\n\nMethod 'isEmpty()' is invoked on null reference and hence NullPointerException is thrown at runtime."},{"id":23,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         int a = 20;\n         int var = --a * a++ + a-- - --a;\n         System.out.println(\"a = \" + a);\n         System.out.println(\"var = \" + var);\n     }\n}","type":"Single Choice","answer":"D","answers":{"A":"a = 25\nvar = 363","B":"a = 363\nvar = 363","C":"Compilation error","D":"a = 18\nvar = 363","E":"","F":"","G":""},"explanation":"int var = --a * a++ + a-- - --a;\n\nint var = --a * (a++) + (a--) - --a;\n\nint var = (--a) * (a++) + (a--) - (--a);\n\nint var = ((--a) * (a++)) + (a--) - (--a);\n\nint var = (((--a) * (a++)) + (a--)) - (--a);\n\nint var = ((19 * (a++)) + (a--)) - (--a); //a = 19\n\nint var = ((19 * 19) + (a--)) - (--a); //a = 20\n\nint var = (361 + 20) - (--a); //a = 19\n\nint var = 381 - (--a); //a = 19\n\nint var = 381 - 18; //a = 18\n\nint var = 363 // a = 18\n\nSo,\n\na = 18\n\nvar = 363"},{"id":24,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        StringBuilder sb = new StringBuilder(5);\n        sb.append(\"0123456789\");\n        sb.delete(8, 1000);\n        System.out.println(sb);\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"01234567","B":"An exception is thrown at runtime","C":"89","D":"Compilation error","E":"","F":"","G":""},"explanation":"`new StringBuilder(5);` creates a StringBuilder instance, whose internal char array's length is 5 but the internal char array's length is adjusted when characters are added/removed from the StringBuilder instance. `sb.append(\"0123456789\");` successfully appends \"0123456789\" to the StringBuilder's instance referred by sb.\n\ndelete method accepts 2 parameters: delete(int start, int end), where start is inclusive and end is exclusive.\n\nThis method throws StringIndexOutOfBoundsException for following scenarios:\n\nA. start is negative\n\nB. start is greater than sb.length()\n\nC. start is greater than end\n\n\n\nIf end is greater than the length of StringBuilder object, then StringIndexOutOfBoundsException is not thrown and end is set to sb.length().\n\nSo, in this case, `sb.delete(8, 1000);` is equivalent to `sb.delete(8, sb.length());` and this deletes characters at 8th index (8) and 9th index (9). So remaining characters are: \"01234567\".\n\n\n\nStringBuilder class overrides toString() method, which prints the text stored in StringBuilder instance. Hence, `System.out.println(sb);` prints 01234567 on to the console."},{"id":25,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing following program?\n\npackage com.udayan.oca;\n \nclass Rectangle {\n     private int height;\n     private int width;\n \n     public Rectangle(int height, int width) {\n         this.height = height;\n         this.width = width;\n     }\n \n     public int getHeight() {\n         return height;\n     }\n \n     public int getWidth() {\n         return width;\n     }\n}\n \npublic class Test {\n     public static void main(String[] args) {\n         private int i = 100;\n         private int j = 200;\n         Rectangle rect = new Rectangle(i, j);\n         System.out.println(rect.getHeight() + \", \" + rect.getWidth());\n     }\n}","type":"Single Choice","answer":"A","answers":{"A":"Compilation error","B":"200,100","C":"100,200","D":"0,0","E":"","F":"","G":""},"explanation":"i and j cannot be declared private as i and j are local variables.\n\nOnly final modifier can be used with local variables."},{"id":26,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider below code:\n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n     public static void main(String[] args) {\n         List<String> trafficLight = new ArrayList<>();\n         trafficLight.add(1, \"RED\");\n         trafficLight.add(2, \"ORANGE\");\n         trafficLight.add(3, \"GREEN\");\n \n         trafficLight.remove(new Integer(2));\n \n         System.out.println(trafficLight);\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"E","answers":{"A":"[RED, GREEN]","B":"[RED, ORANGE]","C":"Compilation error","D":"[RED, ORANGE, GREEN]","E":"An exception is thrown at runtime","F":"","G":""},"explanation":"There is no element at index 0 so call to add element at index 1, \"trafficLight.add(1, \"RED\");\" throws an instance of java.lang.IndexOutOfBoundsException. \n\n\n\ntrafficLight.remove(new Integer(2)); matches with trafficLight.remove(Object) and hence no compilation error."},{"id":27,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider below code: \n\npackage com.udayan.oca;\n \npublic class Test {\n     static Double d1;\n     static int x = d1.intValue();\n \n     public static void main(String[] args) {\n         System.out.println(\"HELLO\");\n     }\n}\nOn execution, does Test class print \"HELLO\" on to the console?","type":"Single Choice","answer":"B","answers":{"A":"Yes, HELLO is printed on to the console","B":"No, HELLO is not printed on to the console","C":"","D":"","E":"","F":"","G":""},"explanation":"To invoke the special main method, JVM loads the class in the memory. At that time, static fields of Test class are initialized. d1 is of Double type so null is assigned to it.\n\nx is also static variable so d1.intValue(); is executed and as d1 is null hence d1.intValue() throws a NullPointerException and as a result an instance of  java.lang.ExceptionInInitializerError is thrown."},{"id":28,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"package com.udayan.oca;\n \nclass TestException extends Exception {\n     public TestException() {\n         super();\n     }\n \n     public TestException(String s) {\n         super(s);\n     }\n}\n \npublic class Test {\n     public void m1() throws __________ {\n         throw new TestException();\n     }\n}\nFor the above code, fill in the blank with one option.","type":"Single Choice","answer":"B","answers":{"A":"RuntimeException","B":"Exception","C":"Object","D":"Error","E":"","F":"","G":""},"explanation":"Method m1() throws an instance of TestException, which is a checked exception as it extends Exception class.\n\nSo in throws clause we must provide:\n\n1. Checked exception.\n\n2. Exception of TestException type or it's super types (Exception, Throwable), Object cannot be used in throws clause."},{"id":29,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         String fruit = new String(new char[] {'M', 'a', 'n', 'g', 'o'});\n         switch (fruit) {\n             default:\n                 System.out.println(\"ANY FRUIT WILL DO\");\n             case \"Apple\":\n                 System.out.println(\"APPLE\");\n             case \"Mango\":\n                 System.out.println(\"MANGO\");\n             case \"Banana\":\n                 System.out.println(\"BANANA\");\n                 break;\n         }\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"ANY FRUIT WILL DO","B":"MANGO\nBANANA","C":"MANGO","D":"ANY FRUIT WILL DO\nAPPLE\nMANGO\nBANANA","E":"","F":"","G":""},"explanation":"fruit refers to String object \"Mango\". Matching case is available, MANGO is printed on to the console.\n\nNo break statement inside case \"Mango\":, hence control enters in fall-through and executes remaining blocks until the break; is found or switch block ends.\n\nSo in this case, it prints BANANA and break; statement takes control out of switch block. main method ends and program terminates successfully."},{"id":30,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         for:\n         for (int i = 2; i <= 100; i = i + 2) {\n             for(int j = 1; j <= 10; j++) {\n                 System.out.print(i * j + \"\\t\");\n             }\n             System.out.println();\n             if(i == 10) {\n                 break for;\n             }\n         }\n     }\n}","type":"Single Choice","answer":"C","answers":{"A":"Total 100 rows will be there in the output","B":"Total 5 rows will be there in the output","C":"Compilation error","D":"Total 50 rows will be there in the output","E":"","F":"","G":""},"explanation":"for is a keyword and hence can't be used as a label.\n\nJava labels follow the identifier naming rules and one rule is that we can't use java keywords as identifier. Hence, Compilation error."},{"id":31,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n     public static void main(String[] args) {\n         List<String> list = new ArrayList<>();\n         list.add(0, \"Array\");\n         list.set(0, \"List\");\n \n         System.out.println(list);\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"A","answers":{"A":"[List]","B":"An exception is thrown at runtime","C":"[Array]","D":"[Array, List]","E":"[List, Array]","F":"","G":""},"explanation":"list.add(0, \"Array\"); means list --> [Array],   \n\nlist.set(0, \"List\"); means replace the current element at index 0 with the passed element \"List\". So after this operation, list --> [List]. In the console, [List] is printed."},{"id":32,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"For the class Apple, which option, if used to replace /*INSERT*/, will print GREEN on to the console?\n\npackage com.udayan.oca;\n \npublic class Apple {\n     public String color;\n \n     public Apple(String color) {\n         /*INSERT*/\n     }\n \n     public static void main(String [] args) {\n         Apple apple = new Apple(\"GREEN\");\n         System.out.println(apple.color);\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"this.color = GREEN;","B":"this.color = color;","C":"color = color;","D":"color = GREEN;","E":"","F":"","G":""},"explanation":"Instance variable color is shadowed by the parameter variable color of parameterized constructor. So, color = color will have no effect, because short hand notation within constructor body will always refer to LOCAL variable. To refer to instance variable, this reference is needed. Hence 'this.color = color;' is correct.\n\n\n\n'color = GREEN;' and 'this.color = GREEN;' cause compilation error as GREEN is not within double quotes(\"\").\n\n\n\nNOTE: 'color = \"GREEN\";' will only assign 'GREEN' to local variable and not instance variable but 'this.color = \"GREEN\";' will assign 'GREEN' to instance variable."},{"id":33,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         StringBuilder sb = new StringBuilder(\"SpaceStation\");\n         sb.delete(5, 6).insert(5, \" S\").toString().toUpperCase();\n         System.out.println(sb);\n     }\n}","type":"Single Choice","answer":"A","answers":{"A":"Space Station","B":"SPACE STATION","C":"Space Sation","D":"SPACE SATION","E":"","F":"","G":""},"explanation":"sb - > \"SpaceStation\"\n\nsb.delete(5, 6) -> \"Spacetation\"\n\nsb.insert(5, \" S\") -> \"Space Station\"\n\nsb.toString() -> Creates a new String object \"Space Station\"\n\n\"Space Station\".toUpperCase() -> Creates another String object \"SPACE STATION\" but the String object is not referred and used.\n\n\n\nMethod invocation on sb modifies the same object, so after insert(5, \" S\") method invocation sb refers to \"Space Station\" and this is printed to the Console."},{"id":34,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider following code snippet:\n\npackage com.udayan.test;\n \npublic class Exam {\n     public static void main(String [] args) {\n         System.out.println(\"All the best!\");\n     }\n}\nLocation of Exam.java file:\n\nD:.\n└───WORK\n    └───QUIZ\n        └───SEC07\n            ├───classes\n            └───src\n                └───com\n                    └───udayan\n                        └───test\n                                Exam.java\nYou are currently at Sec07 folder.\nD:\\WORK\\Quiz\\Sec07>\n\nWhich of the following javac command, typed from above location, will generate Exam.class file structure under classes directory?\n\nD:.\n└───WORK\n    └───QUIZ\n        └───SEC07\n            ├───classes\n            │   └───com\n            │       └───udayan\n            │           └───test\n            │                   Exam.class\n            │\n            └───src\n                └───com\n                    └───udayan\n                        └───test\n                                Exam.java","type":"Single Choice","answer":"C","answers":{"A":"javac classes\\ src\\com\\udayan\\test\\Exam.java","B":"Not possible by javac command","C":"javac -d classes\\ src\\com\\udayan\\test\\Exam.java","D":"javac -d classes\\ Exam.java","E":"","F":"","G":""},"explanation":"Use -d option with javac command. As you are typing javac command from within Sec07 directory, hence path of java file relative to Sec07 directory needs to be given.\n\nSo, correct command is: javac -d classes\\ src\\com\\udayan\\test\\Exam.java"},{"id":35,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.time.LocalDate;\n \npublic class Test {\n     public static void main(String [] args) {\n         LocalDate date = LocalDate.of(2020, 9, 6);\n         System.out.println(date);\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"B","answers":{"A":"2020-06-09","B":"2020-09-06","C":"2020-9-6","D":"2020-6-9","E":"","F":"","G":""},"explanation":"In LocalDate.of(int, int, int) method, 1st parameter is year, 2nd is month and 3rd is day of the month. \n\ntoString() method of LocalDate class prints the LocalDate object in ISO-8601 format: \"uuuu-MM-dd\"."},{"id":36,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nclass Base {\n     public void m1() throws NullPointerException {\n         System.out.println(\"Base: m1()\");\n     }\n}\n \nclass Derived extends Base {\n     public void m1() throws RuntimeException {\n         System.out.println(\"Derived: m1()\");\n     }\n}\n \npublic class Test {\n     public static void main(String[] args) {\n         Base obj = new Derived();\n         obj.m1();\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"Base: m1()","B":"Derived: m1()","C":"Compilation error in Derived class","D":"Compilation error in Test class","E":"","F":"","G":""},"explanation":"NullPointerException extends RuntimeException, but there are no overriding rules related to unchecked exceptions.\n\nSo, method m1() in Derived class correctly overrides Base class method.\n\nRest is simple polymorphism. obj refers to an instance of Derived class and hence obj.m1(); invokes method m1() of Derived class, which prints \"Derived: m1()\" to the console."},{"id":37,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         int i = 5;\n         if(i++ < 6) {\n             System.out.println(i++);\n         }\n     }\n}","type":"Single Choice","answer":"C","answers":{"A":"7","B":"Program executes successfully but nothing is printed on to the console","C":"6","D":"5","E":"","F":"","G":""},"explanation":"Initially i = 5. if(i++ < 6) means if(5 < 6) and then i = 6.\n\n5 < 6 is true, control goes inside if-block and executes System.out.println(i++); This prints current value of i to the console, which is 6 and after that increments the value of i by 1, so i becomes 7."},{"id":38,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing TestStudent class?\n\n//TestStudent.java\npackage com.udayan.oca;\n \nclass Student {\n     String name;\n     int age;\n     boolean result;\n     double height;\n}\n \npublic class TestStudent {\n     public static void main(String[] args) {\n         Student stud = new Student();\n         System.out.println(stud.name + stud.height + stud.result + stud.age);\n     }\n}","type":"Single Choice","answer":"D","answers":{"A":"null0.0true0","B":"null0false0","C":"null0.0ffalse0","D":"null0.0false0","E":"","F":"","G":""},"explanation":"name, height, result and age are instance variables of Student class. And instance variables are initialized to their respective default values.\n\nname is initialized to null, age to 0, result to false and height to 0.0.\n\n\n\nStatement System.out.println(stud.name + stud.height + stud.result + stud.age); prints null0.0false0"},{"id":39,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.time.LocalDate;\n \npublic class Test {\n     public static void main(String [] args) {\n         LocalDate date = LocalDate.parse(\"2018-06-06\");\n         date.minusDays(10);\n         System.out.println(date);\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"2018-06-26","B":"2018-05-26","C":"2018-06-06","D":"2018-06-25","E":"2018-05-27","F":"","G":""},"explanation":"date --> {2018-06-06}.\n\ndate.minusDays(10); => as LocalDate is immutable, hence a new LocalDate object is created {2018-05-27} but no variable refers to it. date still refers to {2018-06-06}.\n\n2018-06-06 is displayed on to the console."},{"id":40,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider below code:\n\n//Test.java\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        final int i1 = 1;\n        final Integer i2 = 1;\n        final String s1 = \":ONE\";\n        \n        String str1 = i1 + s1;\n        String str2 = i2 + s1;\n        \n        System.out.println(str1 == \"1:ONE\");\n        System.out.println(str2 == \"1:ONE\");\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"A","answers":{"A":"true\nfalse","B":"false\nfalse","C":"false\ntrue","D":"true\ntrue","E":"","F":"","G":""},"explanation":"Explanation\nPlease note that Strings computed by concatenation at compile time, will be referred by String Pool during execution. Compile time String concatenation happens when both of the operands are compile time constants, such as literal, final variable etc.\n\nWhereas, Strings computed by concatenation at run time (if the resultant expression is not constant expression) are newly created and therefore distinct.\n\n\n\nFor the statement, String str1 = i1 + s1;, i1 is a final variable of int type and s1 is a final variable of String type. Hence, `i1 + s1` is a constant expression which is computed at compile-time and results in String literal \"1:ONE\".\n\nThis means during compilation, Java compiler translates the statement\n\nString str1 = i1 + s1;\n\nto\n\nString str1 = \"1:ONE\";\n\nAs \"1:ONE\" is a String literal, hence at runtime it will be referred by String Pool.\n\n\n\nOn the other hand, for the statement, String str2 = i2 + s1;, `i2 + s1` is not a constant expression because i2 is neither of primitive type nor of String type, hence it is computed at run-time and returns a non-pool String object \"1:ONE\".\n\n\n\nAs, str1 refers to String Pool object \"1:ONE\", hence `str1 == \"1:ONE\"` returns true, whereas str2 refers to non-Pool String object \"1:ONE\" and hence `str2 == \"1:ONE\"` returns false."},{"id":41,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         for(int i=0; i<=2; i++){}\n         System.out.println(i);\n     }\n}","type":"Single Choice","answer":"D","answers":{"A":"0","B":"2","C":"3","D":"Compilation error","E":"","F":"","G":""},"explanation":"Variable i is declared inside for loop, hence it is not accessible beyond loop's body.\n\nSystem.out.println(i); causes compilation error."},{"id":42,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Given the code:\n\npackage com.udayan.oca;\n \npublic class Pen {\n     public static void main(String[] args) {\n         Pen p1 = new Pen(); //Line 1\n         Pen p2 = new Pen(); //Line 2\n         p1 = p2; //Line 3\n         p1 = null; //Line 4\n     }\n}\nWhen is the Pen object, created at Line 1 eligible for Garbage Collection?","type":"Single Choice","answer":"C","answers":{"A":"At the end of main method","B":"After Line 4","C":"After Line 3","D":"After Line 2","E":"","F":"","G":""},"explanation":"At Line 3, p1 starts referring to the object referred by p2(Created at Line 2).\n\nSo, after Line 3, object created at Line 1 becomes unreachable and thus eligible for Garbage Collection"},{"id":43,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Which of the following is true for code below?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         byte [] arr = new byte[0];\n         System.out.println(arr[0]);\n     }\n}","type":"Single Choice","answer":"A","answers":{"A":"ArrayIndexOutOfBoundsException","B":"Compilation error","C":"0","D":"NullPointerException","E":"","F":"","G":""},"explanation":"arr refers to an array object of size 0. That means arr stores some memory address.\n\nSo we will not get NullPointerException in this case. But index 0 is not available for an array object of size 0 and thus ArrayIndexOutOfBoundsException is thrown at runtime."},{"id":44,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider below code:\n\n//Test.java\npackage com.udayan.oca;\n \nimport java.time.LocalDate;\nimport java.time.Period;\n \npublic class Test {\n     public static void main(String [] args) {\n          LocalDate obj = new LocalDate(2020, 2, 14);\n          System.out.println(obj.minus(Period.ofDays(10)));\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"2020-02-04","B":"2020-02-03","C":"Compilation error","D":"Runtime exception","E":"","F":"","G":""},"explanation":"Constructor of LocalDate is declared private so cannot be called from outside, hence new LocalDate(2020, 2, 14); causes compilation failure. \n\n\n\nOverloaded static methods \"of\" and \"parse\" are provided to create the instance of LocalDate. \n\nLocalTime, LocalDateTime, Period also specify private constructors and provide \"of\" and \"parse\" methods to create respective instances."},{"id":45,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider below code snippet:\n\npublic static void process(/*INSERT*/ list) {\n     list.add(100); //Line 2\n     int x = list.get(0); //Line 3\n     System.out.println(list.size() + \":\" + x);\n}\nWhich of the following options, if used to replace /*INSERT*/, compiles successfully?","type":"Single Choice","answer":"A","answers":{"A":"List<Integer>","B":"List","C":"List<Object>","D":"List<int>","E":"","F":"","G":""},"explanation":"Generic type can only be reference type and not primitive type, hence List<int> is not a valid syntax.\n\n\n\nIf you use raw type List or List<Object> then Line 3 will give compilation error as list.get(0) will return Object type. Object type cannot be converted to primitive type int, so List and List<Object> will cause compilation failure of Line 3.\n\n\n\nList<Integer> is the only correct option left."},{"id":46,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Which of the following statement is correct for below code?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         final boolean flag = false;\n         while(flag) {\n             System.out.println(\"Good Morning!\");\n         }\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"It will print \"Good Morning!\" once","B":"Compilation error","C":"Program compiles and executes successfully but produces no output","D":"Infinite loop","E":"","F":"","G":""},"explanation":"final boolean flag = false; statement makes flag a compile time constant. \n\nCompiler knows the value of flag, which is false at compile time and hence it gives \"Unreachable Code\" error."},{"id":47,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int [] arr1 = {5, 10, 15};\n        int [] arr2 = {'A', 'B'};\n        arr1 = arr2;\n        System.out.println(arr1.length + arr2.length);\n    }\n}","type":"Single Choice","answer":"E","answers":{"A":"Compilation error","B":"5","C":"6","D":"An exception is thrown at runtime","E":"4","F":"0","G":""},"explanation":"Initially arr1 refers to an int array object of 3 elements.\n\nAnd arr2 refers to an int array object of 2 elements [char type is compatible with int type]\n\nWhen the statement `arr1 = arr2;` executes, variable arr1 copies the content of arr2, which is the address of array object containing 2 elements. Hence, arr1 also starts referring to same array object. arr1.length = 2 and arr2.length = 2.\n\nTherefore, output is: 4"},{"id":48,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider below code:\n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \nclass Student {\n     private String name;\n     private int age;\n \n     Student(String name, int age) {\n         this.name = name;\n         this.age = age;\n     }\n \n     public String toString() {\n         return \"Student[\" + name + \", \" + age + \"]\";\n     }\n \n     public boolean equals(Student obj) {\n         if(obj instanceof Student) {\n             Student stud = (Student)obj;\n             if(this.name.equals(stud.name) && this.age == stud.age) {\n                 return true;\n             }\n         }\n         return false;\n     }\n}\n \npublic class Test {\n     public static void main(String[] args) {\n         List<Student> students = new ArrayList<>();\n         students.add(new Student(\"James\", 25));\n         students.add(new Student(\"James\", 27));\n         students.add(new Student(\"James\", 25));\n         students.add(new Student(\"James\", 25));\n \n         students.remove(new Student(\"James\", 25));\n \n         for(Student stud : students) {\n             System.out.println(stud);\n         }\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"A","answers":{"A":"Student[James, 25]\nStudent[James, 27]\nStudent[James, 25]\nStudent[James, 25]","B":"Student[James, 25]\nStudent[James, 27]\nStudent[James, 25]","C":"Student[James, 27]","D":"Student[James, 27]\nStudent[James, 25]\nStudent[James, 25]","E":"","F":"","G":""},"explanation":"Before you answer this, you must know that there are 5 different Student object created in the memory (4 at the time of adding to the list and 1 at the time of removing from the list). This means these 5 Student objects will be stored at different memory addresses.\n\n\n\nremove(Object) method removes the first occurrence of matching object and equals(Object) method decides whether 2 objects are equal or not. equals(Object) method has NOT been overridden by the Student class. In fact, equals(Student) is overloaded. But overloaded version is not invoked while equating the Student objects.\n\n\n\nequals(Object) method defined in Object class is invoked and equals(Object) method defined in Object class uses == operator to check the equality and in this case as all the Student objects are stored at different memory location, hence not equal.\n\n\n\nNothing is removed from the students list, all the 4 Student objects are printed in the insertion order."},{"id":49,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         Boolean b = new Boolean(\"tRUe\");\n         switch(b) {\n             case true:\n                 System.out.println(\"ONE\");\n             case false:\n                 System.out.println(\"TWO\");\n             default: \n                 System.out.println(\"THREE\");\n         }\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"ONE\nTWO\nTHREE","B":"None of the other options","C":"TWO\nTHREE","D":"THREE","E":"","F":"","G":""},"explanation":"switch can accept primitive types: byte, short, int, char; wrapper types: Byte, Short, Integer, Character; String and enums.\n\nswitch(b) causes compilation failure as b is of Boolean type."},{"id":50,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         int start = 1;\n         int sum = 0;\n         do {\n             if(start % 2 == 0) {\n                 continue;\n             }\n             sum += start;\n         } while(++start <= 10);\n         System.out.println(sum);\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"24","B":"25","C":"Compilation error","D":"55","E":"","F":"","G":""},"explanation":"When start is divisible by 2 [2, 4, 6, 8, 10], continue; statement takes the control to boolean expression and hence sum += start; is not executed.\n\nHence result is the sum of numbers 1,3,5,7,9."},{"id":51,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Which of the following correctly imports Animal class from com.masaimara package?","type":"Single Choice","answer":"A","answers":{"A":"import com.masaimara.*;","B":"Import com.masaimara.*;","C":"Import com.masaimara.Animal;","D":"import com.masaimara;","E":"","F":"","G":""},"explanation":"Following import statements are correct: \n\nimport com.masaimara.*; \n\nimport com.masaimara.Animal; \n\nNOTE: all small case letters in import keyword."},{"id":52,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     private static void m1() {\n         System.out.println(1/0);\n     }\n \n     public static void main(String[] args) {\n         try {\n             m1();\n         } finally {\n             System.out.println(\"A\");\n         }\n     }\n}","type":"Single Choice","answer":"D","answers":{"A":"Compilation error.","B":"A is printed to the console and program ends normally.","C":"A is printed to the console, stack trace is printed and then program ends normally.","D":"A is printed to the console, stack trace is printed and then program ends abruptly.","E":"","F":"","G":""},"explanation":"Method m1() throws an instance of ArithmeticException and method m1() doesn't handle it, so it forwards the exception to calling method main.\n\nMethod main doesn't handle ArithmeticException so it forwards it to JVM, but just before that finally block is executed. This prints A on to the console.\n\nAfter that JVM prints the stack trace and terminates the program abruptly."},{"id":53,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Bonus class?\n\npackage com.udayan.oca;\n \npublic class Bonus {\n     public static void main(String[] args) {\n         int $ = 80000;\n         String msg = ($ >= 50000) ? \"Good bonus\" : \"Average bonus\";\n         System.out.println(msg);\n     }\n}","type":"Single Choice","answer":"C","answers":{"A":"Compilation error.","B":"Average bonus","C":"Good bonus","D":"","E":"","F":"","G":""},"explanation":"$ is valid identifier. $ = 80000 \n\nThis is an example of ternary operator. First operand ($ >= 50000) is a boolean expression which is true, as 80000 >= 50000 is true. \n\nmsg will refer to \"Good bonus\"."},{"id":54,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         String str = \"Java Rocks!\";\n         System.out.println(str.length() + \" : \" + str.charAt(10));\n     }\n}","type":"Single Choice","answer":"D","answers":{"A":"An exception is thrown at runtime.","B":"11 : s","C":"Compilation error.","D":"11 : !","E":"","F":"","G":""},"explanation":"String class has length() method, which returns number of characters in the String. So length() method returns 11.\n\nString class has charAt(int index) method, which returns character at passed index. str.charAt(10) looks for character at index 10. index starts with 0. ! sign is at index 10.\n\nHence output is: 11 : !"},{"id":55,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"For the given code:\n\npackage com.udayan.oca;\n \ninterface I01 {\n     void m1();\n}\n \npublic class Implementer extends Object implements I01{\n     protected void m1() {\n \n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"interface I01 gives compilation error as method m1 is not public.","B":"Method m1() in Implementer class is not implemented correctly.","C":"None of the other options.","D":"Implementer class declaration is not correct.","E":"","F":"","G":""},"explanation":"void m1(); in interface I01 is equivalent to public abstract void m1(); So method m1() is implicitly public and abstract.\n\nIn java,  a class can extend from only one class but can implement multiple interfaces. Correct keywords are: extends and implements.\n\nso class declaration is correct. \n\nAs method m1() is implicitly public in I01, hence overriding method in Implementer class should also be public. But it is protected and hence compiler complains."},{"id":56,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Given code:\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         int [] arr = {1, 2, 3, 4, 5};\n         int x = 0;\n         for(/*INSERT*/) {\n             x += arr[n];\n         }\n         System.out.println(x);\n     }\n}\nWhich 3 options, if used to replace /*INSERT*/, on execution will print 9 on to the console?","type":"Multiple Choice","answer":"B,D,E","answers":{"A":"int n = 0; n < arr.length; n++","B":"int n = 3; n < arr.length; n++","C":"int n = 1; n < arr.length; n += 2","D":"int n = 0; n < arr.length; n += 2","E":"int n = 1; n < arr.length - 1; n++","F":"","G":""},"explanation":"Logic in for loop is adding array elements. You need to find out which array elements when added will result in 9. Possible options are: {1+3+5, 2+3+4, 4+5}.\n\nBased on these 3 combinations you can select 3 correct options."},{"id":57,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing TestBaseDerived class?\n\n//TestBaseDerived.java\npackage com.udayan.oca;\n \nclass Base {\n     protected void m1() {\n         System.out.println(\"Base: m1()\");\n     }\n}\n \nclass Derived extends Base {\n     void m1() {\n         System.out.println(\"Derived: m1()\");\n     }\n}\n \npublic class TestBaseDerived {\n     public static void main(String[] args) {\n         Base b = new Derived();\n         b.m1();\n     }\n}","type":"Single Choice","answer":"C","answers":{"A":"Derived: m1()","B":"Base: m1()\nDerived: m1()","C":"None of the other options","D":"Base: m1()","E":"","F":"","G":""},"explanation":"Derived class overrides method m1() of Base class. Access modifier of method m1() in Base class is protected, so overriding method can use protected or public.\n\nBut overriding method in this case used default modifier and hence there is compilation error."},{"id":58,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         System.out.println(\"Hello\" + 1 + 2 + 3 + 4);\n     }\n}","type":"Single Choice","answer":"A","answers":{"A":"Hello1234","B":"Hello19","C":"Hello10","D":"Hello 10","E":"","F":"","G":""},"explanation":"As expression contains + operator only, which is left to right associative. Let us group the expression.\n\n\"Hello\" + 1 + 2 + 3 + 4\n\n= (\"Hello\" + 1) + 2 + 3 + 4\n\n= ((\"Hello\" + 1) + 2) + 3 + 4\n\n= (((\"Hello\" + 1) + 2) + 3) + 4\n\n[Let us solve it now, + operator with String behaves as concatenation operator.]\n\n= ((\"Hello1\" + 2) + 3) + 4\n\n= (\"Hello12\" + 3) + 4\n\n= \"Hello123\" + 4\n\n= \"Hello1234\""},{"id":59,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider below code: \n\n//Test.java\npackage com.udayan.oca;\n \nimport java.time.LocalDate;\n \npublic class Test {\n     public static void main(String [] args) {\n         LocalDate date = LocalDate.parse(\"2000-06-25\");\n         while(date.getDayOfMonth() >= 20) {\n             System.out.println(date);\n             date.plusDays(-1);\n         }\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"Compilation error","B":"System.out.println(date); is executed 6 times","C":"System.out.println(date); is executed more than 6 times","D":"An exception is thrown at runtime","E":"","F":"","G":""},"explanation":"date --> {2000-06-25}. date.getDayOfMonth() = 25, 25 >= 20 is true, hence control goes inside while loop and executes System.out.println(date); statement. \n\ndate.plusDays(-1); creates a new LocalDate object {2000-06-24} but date reference variable still refers to {2000-06-25}. date.getDayOfMonth() again returns 25, this is an infinite loop."},{"id":60,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"super keyword in java is used to:","type":"Single Choice","answer":"D","answers":{"A":"refer to static variable of the class.","B":"refer to current class object.","C":"refer to static method of the class.","D":"refer to parent class object.","E":"","F":"","G":""},"explanation":"super refers to parent class object and this refers to currently executing object."},{"id":61,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n     public static void main(String[] args) {\n         List<String> fruits = new ArrayList<>();\n         fruits.add(\"apple\");\n         fruits.add(\"orange\");\n         fruits.add(\"grape\");\n         fruits.add(\"mango\");\n         fruits.add(\"banana\");\n         fruits.add(\"grape\");\n \n         if(fruits.remove(\"grape\"))\n             fruits.remove(\"papaya\");\n \n         System.out.println(fruits);\n     }\n}","type":"Single Choice","answer":"A","answers":{"A":"[apple, orange, mango, banana, grape]","B":"[apple, orange, mango, banana]","C":"An exception is thrown at runtime","D":"Compilation error","E":"","F":"","G":""},"explanation":"remove(Object) method of List interface removes the first occurrence of the specified element from the list, if it is present. If this list does not contain the element, it is unchanged. remove(Object) method returns true, if removal was successful otherwise false.\n\n\n\nInitially list has: [apple, orange, grape, mango, banana, grape]. fruits.remove(\"grape\") removes the first occurrence of \"grape\" and after the successful remove, list has: [apple, orange, mango, banana, grape]. fruits.remove(\"grape\") returns true, control goes inside if block and executes fruits.remove(\"papaya\");\n\n\n\nfruits list doesn't have \"papaya\", so the list remain unchanged. In the console, you get: [apple, orange, mango, banana, grape]."},{"id":62,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Does below code compile successfully?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String [] args) {\n         System.out.println(\"Hello\");;;;;;;;;\n     }\n}","type":"Single Choice","answer":"A","answers":{"A":"Yes","B":"No","C":"","D":"","E":"","F":"","G":""},"explanation":"In java, it is allowed to put multiple statements on one line. E.g. below code is legal:\n\npublic class Test {\n    public static void main(String [] args) {\n        String symbol = \"!\";System.out.print(\"Hello \");System.out.print(\"World\");System.out.println(symbol);\n    }\n}\n\n\nAbove code is similar to:\n\npublic class Test {\n    public static void main(String [] args) {\n        String symbol = \"!\";\n        System.out.print(\"Hello \");\n        System.out.print(\"World\");\n        System.out.println(symbol);\n    }\n}\n\n\nEmpty statements (just the semicolon) are also allowed in java, therefore below code is also legal:\n\npublic class Test {\n    public static void main(String [] args) {\n        System.out.println(\"Hello\");\n        ;\n        ;\n        ;\n        ;\n        ;\n        ;\n        ;\n        ;\n    }\n}\n\n\nAs shown above, java statements (including empty statements) can be placed on one line, therefore below code is legal:\n\npublic class Test {\n    public static void main(String [] args) {\n        System.out.println(\"Hello\");;;;;;;;;\n    }\n}"},{"id":63,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         m(1);\n     }\n \n     private static void m(Object obj) {\n         System.out.println(\"Object version\");\n     }\n \n     private static void m(Number obj) {\n         System.out.println(\"Number version\");\n     }\n \n     private static void m(Double obj) {\n         System.out.println(\"Double version\");\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"Compilation error","B":"Number version","C":"Double version","D":"Object version","E":"","F":"","G":""},"explanation":"There are 3 overloaded method m. Note all the numeric wrapper classes (Byte, Short, Integer, Long, Float and Double) extend from Number and Number extends from Object. \n\n\n\nCompiler either does implicit casting or Wrapping but not both. 1 is int literal, Java compiler can't implicit cast it to double and then box it to Double rather it boxes i to Integer and as Number is the immediate super class of Integer so Number version refers to Integer object.\n\n\n\nNumber version is printed on to the console."},{"id":64,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider below code: \n\n//Test.java\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n \npublic class Test {\n    public static void main(String [] args) {\n        LocalDate date = LocalDate.of(1987, 9, 1);\n        String str = date.format(DateTimeFormatter.ISO_DATE_TIME);\n        System.out.println(\"Date is: \" + str);\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"A","answers":{"A":"Runtime exception","B":"Given code executes successfully but output does not match with the given options","C":"Date is: 1987-09-01","D":"Date is: 1987-01-09","E":"","F":"","G":""},"explanation":"LocalDate object doesn't contain time part but ISO_DATE_TIME looks for time portion and throws exception at runtime.\n\nFor the OCA exam, you can check following DateTimeFormatter types: BASIC_ISO_DATE, ISO_DATE, ISO_LOCAL_DATE, ISO_TIME, ISO_LOCAL_TIME, ISO_DATE_TIME, ISO_LOCAL_DATE_TIME."},{"id":65,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider below code:\n\n//Test.java\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class Test {\n     public static void main(String[] args) {\n         List<StringBuilder> dryFruits = new ArrayList<>();\n         dryFruits.add(new StringBuilder(\"Walnut\"));\n         dryFruits.add(new StringBuilder(\"Apricot\"));\n         dryFruits.add(new StringBuilder(\"Almond\"));\n         dryFruits.add(new StringBuilder(\"Date\"));\n \n         for(int i = 0; i < dryFruits.size(); i++) \n         {\n             if(i == 0) {\n                 dryFruits.remove(new StringBuilder(\"Almond\"));\n             }\n          }\n \n         System.out.println(dryFruits);\n     }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"B","answers":{"A":"[Walnut, Apricot, Date]","B":"[Walnut, Apricot, Almond, Date]","C":"An exception is thrown at runtime","D":"[Walnut, Date]","E":"","F":"","G":""},"explanation":"'In this example, code is trying to remove an item from the list while iterating using traditional for loop so one can think that this code would throw java.util.ConcurrentModificationException.\n\n\n\nBut note, java.util.ConcurrentModificationException will never be thrown for traditional for loop. It is thrown for for-each loop or while using Iterator/ListIterator.\n\n\n\nIn this case dryFruits.remove(new StringBuilder(\"Almond\")); will never remove any items from the list as StringBuilder class doesn't override the equals(Object) method of Object class.\n\n\n\nStringBuilder instances created at \"dryFruits.add(new StringBuilder(\"Almond\"));\" and \"dryFruits.remove(new StringBuilder(\"Almond\"));\" are at different memory locations and equals(Object) method returns false for these instances."},{"id":66,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        Error obj = new Error();\n        boolean flag1 = obj instanceof RuntimeException; //Line n1\n        boolean flag2 = obj instanceof Exception; //Line n2\n        boolean flag3 = obj instanceof Error; //Line n3\n        boolean flag4 = obj instanceof Throwable; //Line n4\n        System.out.println(flag1 + \":\" + flag2 + \":\" + flag3 + \":\" + flag4);\n    }\n}","type":"Single Choice","answer":"E","answers":{"A":"false:false:true:true","B":"false:false:true:false","C":"true:true:true:true","D":"false:true:true:true","E":"Compilation error","F":"","G":""},"explanation":"class Error extends Throwable, so `obj instanceof Error;` and `obj instanceof Throwable;` return true.\n\nBut Error class is not related to Exception and RuntimeException classes in multilevel inheritance and that is why Line n1 and Line n2 causes compilation error."},{"id":67,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Consider below code of Test.java file: \n\npackage com.udayan.oca;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \ninterface Sellable {}\nabstract class Animal {}\nclass Mammal extends Animal{}\nclass Rabbit extends Mammal implements Sellable{}\n \npublic class Test {\n     {\n         List<Animal> list = new ArrayList<>();\n         list.add(new Rabbit());\n     }\n     {\n         List<Animal> list = new ArrayList<>();\n         list.add(new Mammal());\n     }\n     {\n         List<Mammal> list = new ArrayList<>();\n         list.add(new Rabbit());\n     }\n     {\n         List<Sellable> list = new ArrayList<>();\n         list.add(new Mammal());\n     }\n     {\n         List<Sellable> list = new ArrayList<>();\n         list.add(new Rabbit());\n     }\n}\nWhich of the following statement is true?","type":"Single Choice","answer":"E","answers":{"A":"Four initializer blocks cause compilation error.","B":"Five initializer blocks cause compilation error.","C":"Three initializer blocks cause compilation error.","D":"Two initializer blocks cause compilation error.","E":"Only one initializer block causes compilation error.","F":"","G":""},"explanation":"Even though code seems to be checking the knowledge of ArrayList but it actually checks the knowledge of Polymorphism. \n\nList<Sellable> list = new ArrayList<>(); is valid statement and list can accept any object passing instanceof check for Sellable type. \n\nRabbit implements Sellable hence new Rabbit() can be added to list. \n\nBut as Mammal doesn't implement Sellable hence new Mammal() can't be added to list.\n\n\n\nOther initializer blocks can be verified on similar lines. So there is only one initializer block, which causes compilation error."},{"id":68,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n     public static void main(String[] args) {\n         String str = \"Good\"; //Line 3\n         change(str); //Line 4\n         System.out.println(str); //Line 5\n     }\n \n     private static void change(String s) {\n         s.concat(\"_Morning\"); //Line 9\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"Good_Morning","B":"Good","C":"None of the other options","D":"_Morning","E":"","F":"","G":""},"explanation":"When change(String) method is called, both variable s and str refers to same String object.\n\nLine 9 doesn't modify the passed object instead creates a new String object \"Good_Morning\".\n\nBut this newly created object is not referred and hence is a candidate for GC.\n\nWhen control goes back to calling method main(String[]), str still refers to \"Good\".\n\nLine 5 prints \"Good\" on to the console."},{"id":69,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"Which of the following statement declares a constant field in Java?","type":"Single Choice","answer":"B","answers":{"A":"const int x = 10;","B":"final static int x = 10;","C":"int x = 10;","D":"static int x = 10;","E":"","F":"","G":""},"explanation":"Fields declared with final are constant fields."},{"id":70,"trainingUnit":"OCA","trainingContent":"Exam 3","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \nclass M { }\nclass N extends M { }\nclass O extends N { }\nclass P extends O { }\n \npublic class Test {\n     public static void main(String args []) {\n         M obj = new O();\n         if(obj instanceof M) \n           System.out.print(\"M\");\n         if(obj instanceof N) \n           System.out.print(\"N\");\n         if(obj instanceof O) \n           System.out.print(\"O\");\n         if(obj instanceof P) \n           System.out.print(\"P\");\n     }\n}","type":"Single Choice","answer":"B","answers":{"A":"NOP","B":"MNO","C":"MOP","D":"MNP","E":"","F":"","G":""},"explanation":"M\n\n^\n\nN\n\n^\n\nO [obj refers to instance of O class]\n\n^\n\nP\n\n\n\nobj instanceof M -> true\n\nobj instanceof N -> true\n\nobj instanceof O -> true\n\nbut\n\nobj instanceof P -> false"}]