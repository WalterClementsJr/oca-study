[{"id":1,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Which of the following correctly defines class Printer?","type":"Single Choice","answer":"B","answers":{"A":"1 public class Printer {\n2  \n3 }\n4 package com.udayan.oca;\n","B":"1 /* Java Developer Comments. */\n2 package com.udayan.oca;\n3 public class Printer {\n4  \n5 }\n","C":"1 public class Printer {\n2     package com.udayan.oca;\n3 }\n","D":"1 import java.util.*;\n2 package com.udayan.oca;\n3 public class Printer {\n4  \n5 }\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"If package is used then it should be the first statement, but javadoc and developer comments are not considered as java statements so a class can have developer and javadoc comments before the package statement.\n\nIf import and package both are available, then correct order is package, import, class declaration."},{"id":2,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Which of the following correctly defines class Printer?","type":"Single Choice","answer":"C","answers":{"A":"1 package com.udayan.oca;\n2 package com.udayan.ocp;\n3 public class Printer {\n4  \n5 }\n","B":"1 package com.udayan.oca;\n2 package com.udayan.ocp;\n3 import java.io.*\n4 public class Printer {\n5  \n6 }\n","C":"1 package com.udayan.oca;\n2 import java.util.*;\n3 public class Printer {\n4  \n5 }\n","D":"1 public class Printer {\n2     package com.udayan.oca;\n3 }\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"If package is used then it should be the first statement, but javadoc and developer comments are not considered as java statements so a class can have developer and javadoc comments before the package statement.\n\nIf import and package both are available, then correct order is package, import, class declaration. Multiple package statements are not allowed."},{"id":3,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"For the code below, what should be the name of java file?\n\npackage com.udayan.oca;\n \npublic class HelloWorld {\n    public static void main(String [] args) {\n        System.out.println(\"Hello World!\");\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"Hello.java\n","B":"World.java\n","C":"HelloWorld.java\n","D":"helloworld.java\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Java is case sensitive language. File name should match with public class's name, which is \"HelloWorld\".\n\n\"helloworld\" is different from \"HelloWorld\"."},{"id":4,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Does below code compile successfully?\n\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String [] args) {\n        System.out.println(\"Hello\");;;;;;;;;\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"Yes\n","B":"No\n","C":"\n","D":"\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"In java, it is allowed to put multiple statements on one line. E.g. below code is legal:\n1 public class Test {\n2     public static void main(String [] args) {\n3         String symbol = \"!\";System.out.print(\"Hello \");System.out.print(\"World\");System.out.println(symbol);\n4     }\n5 }\n\nAbove code is similar to:\n1 public class Test {\n2     public static void main(String [] args) {\n3         String symbol = \"!\";\n4         System.out.print(\"Hello \");\n5         System.out.print(\"World\");\n6         System.out.println(symbol);\n7     }\n8 }\n\nEmpty statements (just the semicolon) are also allowed in java, therefore below code is also legal:\n1 public class Test {\n2     public static void main(String [] args) {\n3         System.out.println(\"Hello\");\n4         ;\n5         ;\n6         ;\n7         ;\n8         ;\n9         ;\n10         ;\n11         ;\n12     }\n13 }\n\nAs shown above, java statements (including empty statements) can be placed on one line, therefore below code is legal:\n1 public class Test {\n2     public static void main(String [] args) {\n3         System.out.println(\"Hello\");;;;;;;;;\n4     }\n5 }"},{"id":5,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"What is the signature of special main method?","type":"Single Choice","answer":"B","answers":{"A":"public static void main(String args) {} \n","B":"public static void main(String [] a) {} \n","C":"public static void main() {} \n","D":"private static void main(String [] args) {} \n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Special main method should have public access specifier and it takes argument of String [] type.\n\nString [] argument can use any identifier name, even though in most of the cases you will see \"args\" is used."},{"id":6,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Which of the following correctly imports Animal class from com.masaimara package?","type":"Single Choice","answer":"C","answers":{"A":"Import com.masaimara.Animal; \n","B":"import com.masaimara; \n","C":"import com.masaimara.*; \n","D":"Import com.masaimara.*;\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Following import statements are correct: \n\nimport com.masaimara.*; \n\nimport com.masaimara.Animal; \n\nNOTE: all small case letters in import keyword."},{"id":7,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Which of the following is the correct package declaration to declare Test class in com.exam.oca package?","type":"Single Choice","answer":"B","answers":{"A":"package com.exam.oca.Test; \n","B":"package com.exam.oca; \n","C":"package com.exam.oca.*; \n","D":"Package com.exam.oca; \n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"To declare Test class in com.exam.oca package, use following declaration: \n\npackage com.exam.oca; \n\nNo wildcard (*) allowed in package declaration. Don't include class name in package declaration. NOTE: all small case letters in package keyword."},{"id":8,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Consider following code snippet:\n\npackage com.udayan.test;\n \npublic class Exam {\n    public static void main(String [] args) {\n        System.out.println(\"All the best!\");\n    }\n}\nLocation of Exam.java file:\n\nD:.\n└───WORK\n    └───QUIZ\n        └───SEC07\n            ├───classes\n            └───src\n                └───com\n                    └───udayan\n                        └───test\n                                Exam.java\nYou are currently at Sec07 folder.\nD:\\WORK\\Quiz\\Sec07>\n\nWhich of the following javac command, typed from above location, will generate Exam.class file structure under classes directory?\n\nD:.\n└───WORK\n    └───QUIZ\n        └───SEC07\n            ├───classes\n            │   └───com\n            │       └───udayan\n            │           └───test\n            │                   Exam.class\n            │\n            └───src\n                └───com\n                    └───udayan\n                        └───test\n                                Exam.java","type":"Single Choice","answer":"C","answers":{"A":"Not possible by javac command\n","B":"javac classes\\ src\\com\\udayan\\test\\Exam.java\n","C":"javac -d classes\\ src\\com\\udayan\\test\\Exam.java\n","D":"javac -d classes\\ Exam.java\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Use -d option with javac command.\n\nAs you are typing javac command from within Sec07 directory, hence path of java file relative to Sec07 directory needs to be given.\n\nSo, correct command is: javac -d classes\\ src\\com\\udayan\\test\\Exam.java"},{"id":9,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Consider following code snippet:\n\npackage com.udayan.test;\n \npublic class Exam {\n    public static void main(String [] args) {\n        System.out.println(\"All the best!\");\n    }\n}\nLocation of files:\n\nD:.\n└───WORK\n    └───QUIZ\n        └───SEC07\n            ├───classes\n            │   └───com\n            │       └───udayan\n            │           └───test\n            │                   Exam.class\n            │\n            └───src\n                └───com\n                    └───udayan\n                        └───test\n                                Exam.java\nYou are currently at WORK folder.\n\nD:\\WORK>\n\nWhich of the following java command will show All the best! on to the console?","type":"Single Choice","answer":"D","answers":{"A":"java Exam\n","B":"java com.udayan.test.Exam\n","C":"java -cp Quiz\\Sec07\\classes\\com\\udayan\\test\\ Exam\n","D":"java -cp Quiz\\Sec07\\classes\\ com.udayan.test.Exam\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"To execute Exam class from WORK folder, you should specify the classpath (Quiz\\Sec07\\classes\\) which contains whole path of the class(com\\udayan\\test\\Exam.class).\n\nAnd you should also use fully qualified name of the class, which is com.udayan.test.Exam.\n\nHence correct option is: java -cp Quiz\\Sec07\\classes\\ com.udayan.test.Exam"},{"id":10,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"What will be the result of compiling and executing Test class?\njava Test good morning everyone\n\nprivate class Test\n{ \n   public static void main(String args[])\n   { \n       System.out.println(args[1]);\n   }\n}","type":"Single Choice","answer":"A","answers":{"A":"Compilation Error\n","B":"good\n","C":"morning\n","D":"everyone\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Top level class can have two access modifiers: public and default.\n\nOver here Test class has private modifier and hence compilation error."},{"id":11,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Consider below code:\n\n//Guest.java\nclass Message {\n    static void main(String [] args) {\n        System.out.println(\"Welcome \" + args[2] + \"!\");\n    }\n}\n \npublic class Guest {\n    public static void main(String [] args) {\n        Message.main(args);\n    }\n}\nAnd the commands:\njavac Guest.java\n\njava Guest Clare Waight Keller\n\n\n\nWhat is the result?","type":"Single Choice","answer":"C","answers":{"A":"Welcome Clare!\n","B":"Welcome Waight!\n","C":"Welcome Keller!\n","D":"ArrayIndexOutOfBoundsException is thrown at runtime\n","E":"Some other error as main method can't be invoked manually\n","F":"Compilation error as main method is not public in Message class\n","G":"\n","H":"\n","I":"\n"},"explanation":"Class Guest has special main method but main method defined in Message class is not public and hence it can't be called by JVM. But there is no issue with the syntax hence no compilation error.\n\njava Guest Clare Waight Keller passes new String [] {\"Clare\", \"Waight\", \"Keller\"} to args of Guest.main method.\n\nGuest.main method invokes Message.main method with the same argument: new String [] {\"Clare\", \"Waight\", \"Keller\"}. args[2] is \"Keller\" hence \"Welcome Keller!\" gets printed on to the console."},{"id":12,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Consider below code:\n\n//Guest.java\nclass Message {\n    public static void main(String [] args) {\n        System.out.println(\"Welcome \" + args[0] + \"!\");\n    }\n}\n \npublic class Guest {\n    public static void main(String [] args) {\n        Message.main(args);\n    }\n}\nAnd the commands:\njavac Guest.java\njava Guest James Gosling\n\nWhat is the result?","type":"Single Choice","answer":"A","answers":{"A":"Welcome James!\n","B":"Welcome Gosling!\n","C":"ArrayIndexOutOfBoundsException is thrown at runtime\n","D":"Some other error as main method can't be invoked manually\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Both the classes contain special main method. No compilation error with the code: file is correctly names as Guest.java (name of public class).\n\njava Guest James Gosling passes new String [] {\"James\", \"Gosling\"} to args of Guest.main method. Apart from being special main method, Message.main is static method so Guest.main method invokes Message.main method with the same argument: new String [] {\"James\", \"Gosling\"}.\n\nargs[0] is \"James\" hence \"Welcome James!\" gets printed on to the console."},{"id":13,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"For the class Test, which options, if used to replace /*INSERT*/, will print \"Hurrah! I passed...\" on to the console? Select 2 options.\n\npackage com.udayan.oca;\n \npublic class Test {\n    /*INSERT*/ {\n        System.out.println(\"Hurrah! I passed...\");\n    }\n}","type":"Multiple Choice","answer":"A, B","answers":{"A":"static public void main(String [] args)  \n","B":"public static void main(String [] a) \n","C":"static public void Main(String [] args) \n","D":"public void main(String [] args) \n","E":"protected static void main(String [] args) \n","F":"public void static main(String [] args)\n","G":"\n","H":"\n","I":"\n"},"explanation":"As System.out.println needs to be executed on executing the Test class, this means special main method should replace /*INSERT*/.\n\nSpecial main method's name should be \"main\" (all characters in lower case), should be static, should have public access specifier and it accepts argument of String [] type.\n\nString [] argument can use any identifier name, even though in most of the cases you will see \"args\" is used.\n\nPosition of static and public can be changed but return type must come just before the method name."},{"id":14,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Suppose you have created a java file, \"MyClass.java\". \nWhich of the following commands will compile the java file?","type":"Single Choice","answer":"D","answers":{"A":"javac MyClass\n","B":"java MyClass\n","C":"javac MyClass.class\n","D":"javac MyClass.java\n","E":"java MyClass.java\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Command to compile a java file: javac <java_file_name>.java [.java extension is compulsory]. \n\nCommand to execute a java class: java <class_file_name> [.class extension should not be used]."},{"id":15,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Consider 3 files:\n\n//Order.java\npackage orders;\n \npublic class Order {\n    \n}\n//Item.java\npackage orders.items;\n \npublic class Item {\n}\n//Shop.java\npackage shopping;\n/*INSERT*/\n \npublic class Shop {\n    Order order = null;\n    Item item = null;\n}\nFor the class Shop, which options, if used to replace /*INSERT*/, will resolve all the compilation errors? Select 2 options.","type":"Multiple Choice","answer":"A, D","answers":{"A":"1 import orders.Order;\n2 import orders.items.Item;\n\n","B":"import orders.*;\n","C":"import orders.items.*; \n","D":"1 import orders.*;\n2 import orders.items.*;\n","E":"1 import orders.*;\n2 import items.*;\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"If you check the directory structure, you will find that directory \"orders\" contains \"items\", but orders and orders.items are different packages.\n\nimport orders.*; will only import all the classes in orders package but not in orders.items package.\n\n\nYou need to import Order and Item classes.\n\nTo import Order class, use either import orders.Order; OR import orders.*; and to import Item class, use either import orders.items.Item; OR import orders.items.*;"},{"id":16,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Consider codes below:\n\n//A.java\npackage com.udayan.oca;\n \npublic class A {\n    public int i1;\n    protected int i2;\n    int i3;\n    private int i4;\n}\n//TestA.java\npackage com.udayan.oca.test;\n \nimport com.udayan.oca.A; //Line 3\n \npublic class TestA {\n    public static void main(String[] args) {\n        A obj = new A(); //Line 7\n        System.out.println(obj.i1); //Line 8\n        System.out.println(obj.i2); //Line 9\n        System.out.println(obj.i3); //Line 10\n        System.out.println(obj.i4); //Line 11\n    }\n}\nWhich of the following 3 statements are true?","type":"Multiple Choice","answer":"D, E, F","answers":{"A":"Line 3 causes compilation error\n","B":"Line 7 causes compilation error\n","C":"Line 8 causes compilation error\n","D":"Line 9 causes compilation error\n","E":"Line 10 causes compilation error\n","F":"Line 11 causes compilation error\n","G":"\n","H":"\n","I":"\n"},"explanation":"class A is declared public and defined in com.udayan.oca package, there is no problem in accessing class A outside com.udayan.oca package.\n\nclass TestA is defined in com.udayan.oca.test package, to use class A either use import statement \"import com.udayan.oca.A;\" or fully qualified name of the class com.udayan.oca.A. No issues at Line 3 and LIne 7.\n\n\nAs TestA is in different package so it can only access public members of class A using object reference. Line 8 compiles successfully.\n\nprotected, default and private members are not accessible outside com.udayan.oca package using object reference.\n\n\nNOTE: protected members can be accessed outside but only through inheritance and not object reference."},{"id":17,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Consider below code: \n\npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(\"ONE\");\n    }\n    \n    public static void main(Integer[] args) {\n        System.out.println(\"TWO\");\n    }\n    \n    public static void main(byte [] args) {\n        System.out.println(\"THREE\");\n    }\n}\nWhat will be the result if Test class is executed by below command?\njava Test 10","type":"Single Choice","answer":"A","answers":{"A":"ONE\n","B":"TWO\n","C":"THREE\n","D":"Compilation error\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Like any other method, main method can also be overloaded. But main method called by JVM is always with String [] parameter.\n\nDon't get confused with 10 as it is passed as \"10\". Run above class with any command line arguments or 0 command line argument, output will always be ONE."},{"id":18,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Below is the code of Test.java file.\n\npackage com.udayankhattry.oca;\n \npublic class Test {\n    /* INSERT */\n}\n\n\nBelow are the definitions of main method:\n\n1.\n\npublic static final void main(String... a) {\n\n    System.out.println(\"Java Rocks!\");\n\n}\n\n\n\n2.\n\npublic void main(String... args) {\n\n    System.out.println(\"Java Rocks!\");\n\n}\n\n\n\n3.\n\nstatic void main(String [] args) {\n\n    System.out.println(\"Java Rocks!\");\n\n}\n\n\n\n4.\n\npublic static void main(String [] args) {\n\n    System.out.println(\"Java Rocks!\");\n\n}\n\n\n\n5.\n\npublic static void main(String args) {\n\n    System.out.println(\"Java Rocks!\");\n\n}\n\n\n\nHow many definitions of main method can replace /* INSERT */ such that on executing Test class, \"Java Rocks!\" is printed on to the console?","type":"Single Choice","answer":"B","answers":{"A":"Only one definition\n","B":"Only two definitions\n","C":"Only three definitions\n","D":"Only four definitions\n","E":"All 5 definitions\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Special main method (called by JVM on execution) should be static and should have public access modifier. It also takes argument of String [] type (Varargs syntax String... can also be used).\n\nString [] or String... argument can use any identifier name, even though in most of the cases you will see \"args\" is used.\n\nfinal modifier can be used with this special main method.\n\nHence, from the given five definitions of main method, below two definitions will print expected output on to the console.\n\npublic static final void main(String... a) {\n\n    System.out.println(\"Java Rocks!\");\n\n}\n\nand\n\npublic static void main(String [] args) {\n\n    System.out.println(\"Java Rocks!\");\n\n}"},{"id":19,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Given code of Thought.java file:\n\npublic class Thought {\n    /*INSERT*/ {\n        System.out.println(\"All is well\");\n    }\n}\n\n\nWhich 3 options, if used to replace /*INSERT*/, will compile successfully and on execution will print \"All is well\" on to the console?","type":"Multiple Choice","answer":"E, F, H","answers":{"A":"public void static main(String [] args)\n","B":"protected static void main(String [] args)\n","C":"public void main(String... args)\n","D":"static public void Main(String [] args)\n","E":"static public void main(String [] args)\n","F":"public static void main(String [] a)\n","G":"public static Void main(String [] args)\n","H":"public static void main(String... a)\n","I":"\n"},"explanation":"As System.out.println needs to be executed on executing the Test class, this means special main method should replace /*INSERT*/.\n\nSpecial main method's name should be \"main\" (all characters in lower case), should be static, should have public access specifier and it accepts argument of String [] type (Varargs syntax String... can also be used). String [] argument can use any identifier name, even though in most of the cases you will see \"args\" is used. Position of static and public can be changed but return type 'void' must come just before the method name.\n\n\nLet's check all the given options one by one:\n\npublic void static main(String [] args): Compilation error as return type 'void' must come just before the method name 'main'.\n\nprotected static void main(String [] args): Compiles successfully but as this method is not public, hence an Error regarding missing main method is thrown on execution.\n\npublic void main(String... args): Compiles successfully but as this method is not static, hence an Error regarding non-static main method is thrown on execution.\n\nstatic public void Main(String [] args): Compiles successfully but as 'M' is capital in method 'Main', hence it is not special main method. An Error regarding missing main method is thrown on execution.\n\nstatic public void main(String [] args): Valid definition, it compiles successfully and on execution prints \"All is well\" on to the console.\n\npublic static void main(String [] a): Valid definition, it compiles successfully and on execution prints \"All is well\" on to the console.\n\npublic static Void main(String [] args): Compilation error as Void is a final class in Java and in this case compiler expects main method to return a value of Void type. If you add `return null;` to the main method code will compile successfully but on execution an Error will be thrown mentioning that return type must be 'void' ('v' in lower-case).\n\npublic static void main(String... a): Valid definition, it compiles successfully and on execution prints \"All is well\" on to the console."},{"id":20,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Consider below code of main.java file:\n\npackage main;\n \npublic class main {\n    static String main = \"ONE\";\n    \n    public main() {\n        System.out.println(\"TWO\");\n    }\n    \n    public static void main(String [] args) {\n        main();\n    }\n    \n    public static void main() {\n        System.out.println(main);\n    }\n}\n\n\nAlso consider below statements:\n\n1. Code doesn't compile\n\n2. Code compiles successfully\n\n3. Only ONE will be printed to the console\n\n4. Only TWO will be printed to the console\n\n5. Both ONE and TWO will be printed to the console\n\n\n\nHow many of the above statements is/are true?","type":"Single Choice","answer":"B","answers":{"A":"One statement\n","B":"Two statements\n","C":"Three statements\n","D":"\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Though given code looks strange but it is possible in java to provide same name to package, class (and constructor), variable and method.\n\nAbove code compiles successfully and on execution prints ONE on to the console. Constructor is not invoked as 'new' keyword is not used and that is why TWO will not be printed to the console.\n\nIn real world coding, you would not see such code and that is why it is a good question for the certification exam."},{"id":21,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Consider incomplete code of M.java file\n\nclass M {\n}\n \n________ class N {\n}\n\n\nFollowing options are available to fill the above blank:\n\n1. public\n\n2. private\n\n3. protected\n\n4. final\n\n5. abstract\n\n\n\nHow many above options can be used to fill above blank (separately and not together) such that there is no compilation error?","type":"Single Choice","answer":"B","answers":{"A":"Only one option\n","B":"Only two options\n","C":"Only three options\n","D":"Only four options\n","E":"All five options\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Top-level class can use only two access modifiers [public and default(don't specify anything)]. private and protected cannot be used.\n\nAs file name is M.java, hence class N cannot be public.\n\nTop-level class can be final, hence it is a correct option.\n\nTop-level class can be abstract and hence it is also a correct option."},{"id":22,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Given code of Test.java file:\n\nclass A {\n    public static void main(String [] args) {\n        System.out.println(\"A\");\n    }\n}\n \nclass B { \n    public static void main(String [] args) {\n        System.out.println(\"B\");\n    }\n}\n \nclass C {\n    public static void main(String [] args) {\n        System.out.println(\"C\");\n    }\n}\n \nclass D {\n    public static void main(String [] args) {\n        System.out.println(\"D\");\n    }\n}\n\n\nWhich of the following options is correct?","type":"Single Choice","answer":"C","answers":{"A":"To print C on to the console, execute below commands:\njavac Test.java\njava Test\n","B":"To print C on to the console, execute below commands:\njavac C.java\njava C\n","C":"To print C on to the console, execute below commands:\njavac Test.java\njava C\n","D":"Test.java file is not a valid java file as it doesn't contain code for class Test\n","E":"Test.java file will compile successfully but expected output is not possible\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Test.java is a valid java file. As none of the classes in Test.java file are public, hence file name can use any valid Java identifier.\n\nAs file name is Test.java, hence to compile the code below command is used:\n\njavac Test.java\n\n\nExecution of above command creates 4 class files: A.class, B.class, C.class & D.class.\n\nTo print C on to the console, class C must be executed. To execute C class, command is:\n\njava C"},{"id":23,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Given code of Test.java file:\n\npublic class Test {\n    public static void main(String[] args) {\n        args[1] = \"Day!\";\n        System.out.println(args[0] + \" \" + args[1]);\n    }\n}\n\n\nAnd the commands:\n\njavac Test.java\n\njava Test Good\n\n\n\nWhat is the result?","type":"Single Choice","answer":"D","answers":{"A":"Good\n","B":"Good Day!\n","C":"Compilation Error\n","D":"An exception is thrown at runtime\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"public static void main(String[] args) method is invoked by JVM.\n\nVariable args is initialized and assigned with Program arguments. For example,\n\njava Test: args refers to String [] of size 0.\n\njava Test Hello: args refers to String [] of size 1 and 1st array element refers to \"Hello\"\n\njava Test 1 2 3: args refers to String [] of size 3 and 1st array element refers to \"1\", 2nd array element refers to \"2\" and 3rd array element refers to \"3\".\n\n\nCommand used in this question: java Test Good, so args refers to String[] of size 1 and element at 0th index is \"Good\".\n\nargs[1] = \"Day!\"; is trying to access 2nd array element at index 1, which is not available and hence an exception is thrown at runtime."},{"id":24,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Consider below code of Test.java file:\n\npublic class Test {\n    public static void main(String [] args) {\n        System.out.println(\"String\");\n    }\n    \n    public static void main(Integer [] args) {\n        System.out.println(\"Integer\");\n    }\n    \n    public static void main(byte [] args) {\n        System.out.println(\"byte\");\n    }\n}\n\n\nAnd the commands:\n\njavac Test.java\n\njava Test 10\n\n\n\nWhat is the result?","type":"Single Choice","answer":"B","answers":{"A":"Integer\n","B":"String\n","C":"byte\n","D":"Compilation error\n","E":"An Exception is thrown at runtime\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Like any other method, main method can also be overloaded. But main method called by JVM is always with String [] parameter. Don't get confused with 10 as it is passed as \"10\".\n\nExecute above class with any command line arguments or 0 command line argument, output will always be \"String\"."},{"id":25,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Consider below code of Test.java file:\n\npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(\"Welcome \" + args[0] +\"!\");\n    }\n}\n\n\nAnd the commands:\n\njavac Test.java\n\njava Test \"James Gosling\" \"Bill Joy\"\n\n\n\nWhat is the result?","type":"Single Choice","answer":"A","answers":{"A":"Welcome James Gosling!\n","B":"Welcome Bill Joy!\n","C":"Welcome \"James Gosling\"!\n","D":"Welcome \"Bill Joy\"!\n","E":"Welcome James!\n","F":"Welcome Gosling!\n","G":"Welcome Bill!\n","H":"Welcome Joy!\n","I":"\n"},"explanation":"Please note, if passed command line arguments contain space(s) in between, then it is a common practice to enclosed within double quotes. In this case \"James Gosling\" is passed as one String object and \"Bill Joy\" is also passed as one String object.\n\njava Test \"James Gosling\" \"Bill Joy\" passes new String [] {\"James Gosling\", \"Bill Joy\"} to args of main method. args[0] refers to \"James Gosling\" and args[1] refers to \"Bill Joy\".\n\nHence, Welcome James Gosling! is printed on to the console. While printing the String object, enclosing quotes are not shown.\n\n\nTo use quotes as part of the String, you can escape those using backslash, such as:\n\njava Test \"\\\"James Gosling\"\\\" \"\\\"Bill Joy\"\\\"\n\nAbove command will print Welcome \"James Gosling\"! on to the console."},{"id":26,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Consider codes of 3 java files:\n\n//Planet.java\npackage com.udayankhattry.galaxy;\n \npublic class Planet {\n    String name;\n    public Planet(String name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"Planet: \" + name;\n    }\n}\n\n\n//Creator.java\npackage com.udayankhattry.oca;\n \npublic class Creator {\n    public static Planet create() {\n        return new Planet(\"Earth\");\n    }\n}\n\n\n//TestCreator.java\npackage com.udayankhattry.oca.test;\n \npublic class TestCreator {\n    public static void main(String[] args) {\n        System.out.println(Creator.create());\n    }\n}\n\n\nAnd below options:\n\n1.\n\nAdd below import statement in Creator.java file:\n\nimport com.udayankhattry.galaxy.Planet;\n\n\n\n2.\n\nAdd below import statement in Creator.java file:\n\nimport com.udayankhattry.oca.test.TestCreator;\n\n\n\n3.\n\nAdd below import statement in TestCreator.java file:\n\nimport com.udayankhattry.oca.Creator;\n\n\n\n4.\n\nAdd below import statement in TestCreator.java file:\n\nimport com.udayankhattry.galaxy.Planet;\n\n\n\nWhich of the above options needs to be done so that on executing TestCreator class, \"Planet: Earth\" is printed on to the console?\n\nPlease note: Unnecessary imports are not allowed.","type":"Single Choice","answer":"G","answers":{"A":"Only 1\n","B":"Only 2\n","C":"Only 3\n","D":"Only 4\n","E":"1 & 2 only\n","F":"3 & 4 only\n","G":"1 & 3 only\n","H":"1, 3 & 4 only\n","I":"1, 2, 3 & 4 are needed\n"},"explanation":"Planet is defined in 'com.udayankhattry.galaxy' package, Creator is defined in 'com.udayankhattry.oca' package and TestCreator is defined in 'com.udayankhattry.oca.test' package.\n\nPlanet class doesn't mention 'Creator' or 'TestCreator' and hence no import statements are needed in Planet class.\n\nCreator class uses the name 'Planet' in its code and hence Creator class needs to import Planet class using 'import com.udayankhattry.galaxy.Planet;' statement or 'import com.udayankhattry.galaxy.*;' statement.\n\nTestCreator class uses the name 'Creator' in its code and hence TestCreator class needs to import Creator class using 'import com.udayankhattry.oca.Creator;' statement or 'import com.udayankhattry.oca.*;' statement.\n\n\nPlease note, even though in TestCreator class, `Creator.create()` returns an instance of Planet class but as name 'Planet' is not used, hence Planet class is not needed to be imported.\n\n\nPlanet class correctly overrides toString() method, hence when an instance of Planet class is passed to println(...) method, as in the below statement:\n\nSystem.out.println(Creator.create());\n\ntoString() method defined in the Planet class is invoked, which print \"Planet: Earth\" on to the console."},{"id":27,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        byte b1 = (byte) (127 + 21);\n        System.out.println(b1);\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"148\n","B":"Compilation error\n","C":"-108\n","D":"-128\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"127 + 21 = 148 = 00000000 00000000 00000000 10010100 \n\nAbove binary number is positive, as left most bit is 0. \n\nSame binary number after type-casting to byte: 10010100, negative number as left most bit is 1. \n\n10010100 = -108."},{"id":28,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"What will be the result of compiling and executing TestStudent class?\n\n//TestStudent.java\npackage com.udayan.oca;\n \nclass Student {\n    String name;\n    int age;\n    boolean result;\n    double height;\n}\n \npublic class TestStudent {\n    public static void main(String[] args) {\n        Student stud = new Student();\n        System.out.println(stud.name + stud.height + stud.result + stud.age);\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"null0.0false0\n","B":"null0false0\n","C":"null0.0ffalse0\n","D":"null0.0true0\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"name, height, result and age are instance variables of Student class. And instance variables are initialized to their respective default values.\n\nname is initialized to null, age to 0, result to false and height to 0.0.\n\nStatement System.out.println(stud.name + stud.height + stud.result + stud.age); prints null0.0false0"},{"id":29,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"How can you force JVM to run Garbage Collector?","type":"Single Choice","answer":"D","answers":{"A":"By calling: Runtime.getRuntime().gc(); \n\n","B":"By calling: System.gc();\n","C":"By setting the reference variable to null.\n","D":"JVM cannot be forced to run Garbage Collector.\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Both Runtime.getRuntime().gc(); and System.gc(); do the same thing, these make a request to JVM to run Garbage Collector.\n\nJVM makes the best effort to run Garbage Collector but nothing is guaranteed.\n\nSetting the reference variable to null will make the object eligible for Garbage Collection, if there are no other references to this object. But this doesn't force JVM to run the Garbage Collector. Garbage Collection cannot be forced."},{"id":30,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Given code:\n\npackage com.udayan.oca;\n \npublic class Pen {\n    public static void main(String[] args) {\n        Pen p1 = new Pen(); //Line 1\n        Pen p2 = new Pen(); //Line 2\n        p1 = p2; //Line 3\n        p1 = null; //Line 4\n    }\n}\nWhen is the Pen object, created at Line 1 eligible for Garbage Collection?","type":"Single Choice","answer":"B","answers":{"A":"After Line 2\n","B":"After Line 3\n","C":"After Line 4\n","D":"At the end of main method\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"At Line 3, p1 starts referring to the object referred by p2(Created at Line 2).\n\nSo, after Line 3, object created at Line 1 becomes unreachable and thus eligible for Garbage Collection."},{"id":31,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"How many objects of Pen class are eligible for Garbage Collection at Line 4?\n\npackage com.udayan.oca;\n \nclass Pen {\n    \n}\n \npublic class TestPen {\n    public static void main(String[] args) {\n        new Pen(); //Line 1\n        Pen p = new Pen(); // Line 2\n        change(p); //Line 3\n        System.out.println(\"About to end.\"); //Line 4\n    }\n    \n    public static void change(Pen pen) { //Line 5\n        pen = new Pen(); //Line 6\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"0\n","B":"1\n","C":"2\n","D":"3\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Object created at Line 1 becomes eligible for Garbage collection after Line 1 only, as there are no references to it. So We have one object marked for GC. \n\nObject created at Line 6 becomes unreachable after change(Pen) method pops out of the STACK, and this happens after Line 3.\n\nSo at Line 4, we have two Pen objects eligible for Garbage collection: Created at Line 1 and Created at Line 6."},{"id":32,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Wrapper classes are defined in which of the following package?","type":"Single Choice","answer":"B","answers":{"A":"java.util\n","B":"java.lang\n","C":"java.io\n","D":"default package\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"All the wrapper classes are defined in java.lang package.\n\nString and StringBuilder are also defined in java.lang package and that is why import statement is not required to use these classes."},{"id":33,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n    char var1;\n    double var2;\n    float var3;\n \n    public static void main(String[] args) {\n        Test obj = new Test();\n        System.out.println(\">\" + obj.var1);\n        System.out.println(\">\" + obj.var2);\n        System.out.println(\">\" + obj.var3);\n    }\n}","type":"Single Choice","answer":"B","answers":{"A":">null\n>0.0\n>0.0\n","B":"> \n>0.0\n>0.0\n","C":"> \n>0.0\n>0.0f\n","D":">null\n>0.0\n>0.0f\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Primitive type instance variables are initialized to respective zeros (byte: 0, short: 0, int: 0, long: 0L, float: 0.0f, double: 0.0, boolean: false, char: \\u0000).\n\nWhen printed on the console; byte, short, int & long prints 0, float & double print 0.0, boolean prints false and char prints nothing or non-printable character (whitespace). \n\nReference type instance variables are initialized to null."},{"id":34,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Given the code of Test.java file:\n\npackage com.udayan.oca;\n \nclass Point {\n    int x;\n    int y;\n    void assign(int x, int y) {\n        x = this.x;\n        this.y = y;\n    }\n    \n    public String toString() {\n        return \"Point(\" + x + \", \" + y + \")\";\n    }\n}\n \npublic class Test {\n    public static void main(String[] args) {\n        Point p1 = new Point();\n        p1.x = 10;\n        p1.y = 20;\n        Point p2 = new Point();\n        p2.assign(p1.x, p1.y);\n        System.out.println(p1.toString() + \";\" + p2.toString());\n    }\n}\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"B","answers":{"A":"Point(10, 20);Point(10, 20)\n","B":"Point(10, 20);Point(0, 20)\n","C":"Point(0, 20);Point(0, 20)\n","D":"Point(0, 20);Point(10, 20)\n","E":"None of the other options\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"HINT: First check if members are accessible or not. All the codes are in same file Test.java, and Point class & variable x, y are declared with default modifier hence these can be accessed within the same package.\n\nClass Test belongs to same package so no issues in accessing Point class and instance variables of Point class. Make use of pen and paper to draw the memory diagrams (heap and stack). It will be pretty quick to reach the result.\n\n\nPoint p1 = new Point(); means p1.x = 0 and p1.y = 0 as instance variable are initialized to respective zeros. \n\np1.x = 10; means replace 0 with 10 in p1.x, \n\np1.y = 20; means replace 0 with 20 in p1.y, \n\n\nPoint p2 = new Point(); means p2.x = 0 and p2.y = 0 as instance variable are initialized to respective zeros. \n\np2.assign(p1.x, p1.y); invokes the assign method, parameter variable x = 10 and y = 20.\n\nAs assign is invoked on p2 reference variable hence this and p2 refers to same Point object.\n\nx = this.x; means assign 0 to parameter variable x, no changes in this.y, which means p2.x is unchanged. \n\nthis.y = y; means assign 20 to this.y, which means p2.y is now 20\n\nSo after assign method is invoked and control goes back to main method: p1.x = 10, p1.y = 20, p2.x = 0 and p2.y = 20. \n\nOutput is: Point(10, 20);Point(0, 20)"},{"id":35,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Consider below code:\n\npackage com.udayan.oca;\n \npublic class Counter {\n    int count;\n    \n    private static void increment(Counter counter) {\n        counter.count++;\n    }\n    \n    public static void main(String [] args) {\n        Counter c1 = new Counter();\n        Counter c2 = c1;\n        Counter c3 = null;\n        c2.count = 1000;\n        increment(c2);\n    }\n}\nOn executing Counter class, how many Counter objects are created in the memory?","type":"Single Choice","answer":"A","answers":{"A":"1\n","B":"2\n","C":"3\n","D":"4\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"new Counter(); is invoked only once, hence only one Counter object is created in the memory.\n\nc1, c2, c3 and counter are reference variables of Counter type and not Counter objects."},{"id":36,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        Boolean b1 = new Boolean(\"tRuE\");\n        Boolean b2 = new Boolean(\"fAlSe\");\n        Boolean b3 = new Boolean(\"abc\");\n        Boolean b4 = null;\n        System.out.println(b1 + \":\" + b2 + \":\" + b3 + \":\" + b4);\n    }\n}","type":"Single Choice","answer":"B","answers":{"A":"false:false:false:null\n","B":"true:false:false:null\n","C":"false:false:true:null\n","D":"Compilation error\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Boolean class code uses equalsIgnoreCase method to validate the passed String, so if passed String is \"true\" ('t', 'r', 'u' and 'e' can be in any case), then boolean value stored in Boolean object is true otherwise false.\n\nb1 stores true, b2 stores false, b3 stores false and as b4 is of reference type, hence it can store null as well.\n\nOutput is: true:false:false:null"},{"id":37,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n    \n    private static void add(double d1, double d2) {\n        System.out.println(\"double version: \" + (d1 + d2));\n    }\n    \n    private static void add(Double d1, Double d2) {\n        System.out.println(\"Double version: \" + (d1 + d2));\n    }\n    \n    public static void main(String[] args) {\n        add(10.0, null);\n    }\n    \n}","type":"Single Choice","answer":"D","answers":{"A":"Compilation error\n","B":"double version: 10.0\n","C":"Double version: 10.0\n","D":"An exception is thrown at runtime\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"add(10.0, null); => Compiler can't convert null to double primitive type, so 2nd argument is tagged to Double reference type. So to match the method call, 10.0 is converted to Double object by auto-boxing and add(10.0, null); is tagged to add(Double, Double); method.\n\nBut at the time of execution, d2 is null so System.out.println(\"Double version: \" + (d1 + d2)); throws NullPointerException."},{"id":38,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        Boolean [] arr = new Boolean[2];\n        System.out.println(arr[0] + \":\" + arr[1]);\n    }\n}","type":"Single Choice","answer":"D","answers":{"A":"NullPointerException is thrown at runtime\n","B":"true:true\n","C":"false:false\n","D":"null:null\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Array elements are initialized to their default values.\n\narr is referring to an array of Boolean type, which is reference type and hence both the array elements are initialized to null and hence in the output null:null is printed."},{"id":39,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        Double [] arr = new Double[2];\n        System.out.println(arr[0] + arr[1]);\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"NullPointerException is thrown at runtime\n","B":"0\n","C":"Compilation error\n","D":"ClassCastException is thrown at runtime\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Array elements are initialized to their default values.\n\narr is referring to an array of Double type, which is reference type and hence both the array elements are initialized to null.\n\nTo calculate arr[0] + arr[1], java runtime converts the expression to arr[0].doubleValue() + arr[1].doubleValue().\n\nAs arr[0] and arr[1] are null hence calling doubleValue() method throws NullPointerException."},{"id":40,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n    static Boolean[] arr = new Boolean[1];\n    public static void main(String[] args) {\n        if(arr[0]) {\n            System.out.println(true);\n        } else {\n            System.out.println(false);\n        }\n    }\n}","type":"Single Choice","answer":"D","answers":{"A":"TRUE\n","B":"FALSE\n","C":"Compilation error\n","D":"NullPointerException is thrown at runtime\n","E":"ArrayIndexOutOfBoundsException is thrown at runtime\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"All the array elements are initialized to their default values. arr is of Boolean type (reference type), so arr[0] is initialized to null.\n\nif expression works with Boolean type variable, so \"if(arr[0])\" doesn't cause compilation error but java runtime extracts the boolean value stored in arr[0] and it uses booleanValue() method.\n\narr[0].booleanValue() means booleanValue() method is invoked on null reference and hence NullPointerException is thrown at runtime."},{"id":41,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        Boolean b = new Boolean(\"tRUe\");\n        switch(b) {\n            case true:\n                System.out.println(\"ONE\");\n            case false:\n                System.out.println(\"TWO\");\n            default: \n                System.out.println(\"THREE\");\n        }\n    }\n}","type":"Single Choice","answer":"D","answers":{"A":"ONE\nTWO\nTHREE\n","B":"TWO\nTHREE\n","C":"THREE\n","D":"None of the other options\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"switch can accept primitive types: byte, short, int, char; wrapper types: Byte, Short, Integer, Character; String and enums.\n\nswitch(b) causes compilation failure as b is of Boolean type."},{"id":42,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Consider below code: \n\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        char c = 'Z';\n        long l = 100_00l;\n        int i = 9_2;\n        float f = 2.02f; \n        double d = 10_0.35d;\n        l = c + i;\n        f = c * l * i * f;\n        f = l + i + c;\n        i = (int)d;\n        f = (long)d;\n    }\n}\nDoes above code compile successfully?","type":"Single Choice","answer":"A","answers":{"A":"YES\n","B":"NO\n","C":"\n","D":"\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"For readability purpose underscore (_) is used to separate numeric values. This is very useful in representing big numbers such as credit card numbers (1234_7654_9876_0987). long data can be suffixed by l, float by f and double by d. So first 5 variable declaration and assignment statements inside main(String []) method don't cause any compilation error.\nLet's check rest of the statements:\n\nl = c + i; => Left side variable 'l' is of long type and right side expression evaluates to an int value, which can easily be assigned to long type. No compilation error here.\n\nf = c * l * i * f; => Left side variable 'f' is of float type and right side expression evaluates to float value, which can easily be assigned to float type. Hence, it compiles successfully.\n\nf = l + i + c; => Left side variable 'f' is of float type and right side expression evaluates to long value, which can easily be assigned to float type. Hence, no issues here.\n\ni = (int)d; => double can't be assigned to int without explicit casting, right side expression `(int)d;` is casting double to int, so no issues.\n\nf = (long)d; => double can't be assigned to float without explicit casting, right side expression `(long)d;` is casting double to long, which can easily be assigned to float type. It compiles successfully."},{"id":43,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(new Boolean(\"ture\"));\n    }\n}","type":"Single Choice","answer":"B","answers":{"A":"TRUE\n","B":"FALSE\n","C":"An exception is thrown at runtime\n","D":"Compilation error\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Boolean class code uses equalsIgnoreCase method to validate the passed String, so if passed String is \"true\" ('t', 'r', 'u' and 'e' can be in any case), then boolean value stored in Boolean object is true otherwise false. \n\nIn this question passed String is \"ture\" and not \"true\" and that is why false is printed on to the console."},{"id":44,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"What will be the result of compiling and executing Test class?\n\n\n\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        String [] arr = {\"abc\", \"TrUe\", \"false\", null, \"FALSE\"};\n        for(String s : arr) {\n            System.out.print(Boolean.valueOf(s) ? \"T\" : \"F\");\n        }\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"FTFFF\n","B":"FFFFF\n","C":"TTFTT\n","D":"TTTFT\n","E":"NullPointerException is thrown at runtime\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Boolean.valueOf(String s) returns true if passed String argument is not null and is equal, ignoring case, to the String \"true\". In all other cases it returns false.\n\nBoolean.valueOf(\"abc\") => false. As \"abc\".equalsIgnoreCase(\"true\") is false.\n\nBoolean.valueOf(\"TrUe\") => true. As \"TrUe\".equalsIgnoreCase(\"true\") is true.\n\nBoolean.valueOf(\"false\") => false. As \"false\".equalsIgnoreCase(\"true\") is false.\n\nBoolean.valueOf(null) => false. As passed argument is null.\n\nBoolean.valueOf(\"FALSE\") => false. As \"FALSE\".equalsIgnoreCase(\"true\") is false."},{"id":45,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        m(1);\n    }\n    \n    private static void m(Object obj) {\n        System.out.println(\"Object version\");\n    }\n    \n    private static void m(Number obj) {\n        System.out.println(\"Number version\");\n    }\n    \n    private static void m(Double obj) {\n        System.out.println(\"Double version\");\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"Compilation error\n","B":"Object version\n","C":"Number version\n","D":"Double version\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"There are 3 overloaded methods m. Note all the numeric wrapper classes (Byte, Short, Integer, Long, Float and Double) extend from Number and Number extends from Object. \n\nCompiler either does implicit casting or Wrapping but not both. 1 is int literal, Java compiler can't implicit cast it to double and then box it to Double rather it boxes i to Integer and as Number is the immediate super class of Integer so Number version refers to Integer object.\n\nNumber version is printed on to the console."},{"id":46,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"What will be the result of compiling and executing Test class?\n\npackage com.udayan.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        extractInt(2.7);\n        extractInt(2);\n    }\n    \n    private static void extractInt(Double obj) {\n        System.out.println(obj.intValue());\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"2\n2\n","B":"3\n2\n","C":"Compilation error in main method\n","D":"Compilation error in extractInt method\n","E":"An exception is thrown at runtime\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"extractInt method accepts argument of Double type.\n\nextractInt(2.7); => 2.7 is double literal, so Java compiler would box it into Double type. At runtime obj.intValue() would print int portion of the Double data, which is 2.\n\nextractInt(2); => Java compiler either does implicit casting or Wrapping but not both. 2 is int literal, Java compiler can't implicit cast it to double and then box it to Double. So this statement causes compilation failure."},{"id":47,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Consider below code of Test.java file:\n\npackage com.udayankhattry.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        char c1 = 'a'; //ASCII code of 'a' is 97\n        int i1 = c1; //Line n1\n        System.out.println(i1); //Line n2\n    }\n}\n\n\nWhat is the result of compiling and executing Test class?","type":"Single Choice","answer":"B","answers":{"A":"a\n","B":"97\n","C":"Line n1 causes compilation failure\n","D":"Line n1 causes runtime error\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Range of char data type is from 0 to 65535 and hence it can be easily assigned to int type. println() method is overloaded to accept char type and int type both. If char type value is passed, it prints char value and if int type value is passed, it prints int value.\n\nAs i1 is of int type, hence corresponding int value, which is 97, is printed on to the console."},{"id":48,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Consider below statements:\n\n\n\n1. int x = 5____0;\n\n2. int y = ____50;\n\n3. int z = 50____;\n\n4. float f = 123.76_86f;\n\n5. double d = 1_2_3_4;\n\n\n\nHow many statements are legal?","type":"Single Choice","answer":"C","answers":{"A":"One statement only\n","B":"Two statements only\n","C":"Three statements only\n","D":"Four statements only\n","E":"All 5 statements\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"For readability purpose underscore (_) is used to separate numeric values. This is very useful in representing big numbers such as credit card numbers (1234_7654_9876_0987). Multiple underscores are also allowed within the digits. Hence, `int x = 5____0;` compiles successfully and variable x stores 50.\n\n`float f = 123.76_86f;` compiles successfully.\n\n1_2_3_4 is int literal 1234 and int can easily be assigned to double, hence `double d = 1_2_3_4;` compiles successfully.\n\n____50 is a valid variable name, and as this variable is not available hence, int y = ____50; causes compilation error.       \n\nUnderscores must be available within the digits. For the statement int z = 50____; as underscores are used after the digits, hence it causes compilation error."},{"id":49,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Given code of Test.java file:\n\npackage com.udayankhattry.oca;\n\n\n\npublic class Test {\n\n    public static void main(String[] args) {\n\n        byte b1 = 10; //Line n1\n\n        int i1 = b1; //Line n2\n\n        byte b2 = i1; //Line n3\n\n        System.out.println(b1 + i1 + b2);\n\n    }\n\n}\n\n\n\nWhat is the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"Line n1 causes compilation error\n","B":"Line n2 causes compilation error\n","C":"Line n3 causes compilation error\n","D":"30 is printed on to the console\n","E":"\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"Let us first check Line n1: byte b1 = 10;\n\nAbove statement compiles successfully, even though 10 is an int literal (32 bits) and b1 is of byte primitive type which can store only 8 bits of data.\n\nHere java does some background task, if value of int literal can be easily fit to byte primitive type (-128 to 127), then int literal is implicitly casted to byte type.\n\nSo above statement is internally converted to:\n\nbyte b1 = (byte)10;\n\n\n\nBut if you specify any out of range value then it would not be allowed, e.g.\n\nbyte b = 128; // It would cause compilation failure as 128 is out of range value for byte type.\n\n\nThere is no issue with Line n2 as byte type (8 bits) can be easily assigned to int type (32 bits).\n\n\nFor line n3, `byte b2 = i1;`, expression on right hand side (i1) is neither a within range literal value nor constant expression, hence it causes compilation failure.\n\nTo compile successfully, this expression needs to be explicitly casted, such as: `byte b2 = (byte)i1;`"},{"id":50,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Range of short data type is from -32768 to 32767\n\nWhich of the following code segments, written inside main method will compile successfully?\n\nSelect 3 options.","type":"Multiple Choice","answer":"A, C, E","answers":{"A":"short s1 = 10;\n","B":"short s2 = 32768;\n","C":"final int i3 = 10;\nshort s3 = i3;\n","D":"final int i4 = 40000;\nshort s4 = i4;\n","E":"final int i5 = 10;\nshort s5 = i5 + 100;\n","F":"final int m = 25000;\nfinal int n = 25000;\nshort s6 = m + n;\n","G":"int i7 = 10;\nshort s7 = i7;\n","H":"\n","I":"\n"},"explanation":"Let's check all the statements one by one:\n\n\n\nshort s1 = 10;\n\nAbove statement compiles successfully, even though 10 is an int literal (32 bits) and s1 is of short primitive type which can store only 16 bits of data.\n\nHere java does some background task, if value of int literal can be easily fit to short primitive type (-32768 to 32767), then int literal is implicitly casted to short type.\n\nSo above statement is internally converted to:\n\nshort s1 = (short)10;\n\n\nshort s2 = 32768;\n\nIt causes compilation failure as 32768 is out of range value.\n\n\nfinal int i3 = 10;\n\nshort s3 = i3;\n\nAbove code compiles successfully. If you are working with final variable and the value is within the range, then final variable is implicitly casted to target type, as in this case i3 is implicitly casted to short.\n\n\nfinal int i4 = 40000;\n\nshort s4 = i4;\n\nIt causes compilation failure as 40000 is out of range value.\n\n\nfinal int i5 = 10;\n\nshort s5 = i5 + 100;\n\nAbove code compiles successfully. If you are working with constant expression and the resultant value of the constant expression is within the range, then resultant value is implicitly casted. In this case, resultant value 110 is implicitly casted.\n\n\nfinal int m = 25000;\n\nfinal int n = 25000;\n\nshort s6 = m + n;\n\nm + n is a constant expression but resultant value 50000 is out of range for short type, hence it causes compilation failure.\n\n\nint i7 = 10;\n\nshort s7 = i7;\n\nCompilation error as i7 is non-final variable and hence cannot be implicitly casted to short type."},{"id":51,"trainingUnit":"OCA","trainingContent":"Java Basics and Data types","question":"Consider below code of Test.java file:\n\npackage com.udayankhattry.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        boolean b1 = 0;\n        boolean b2 = 1;\n        System.out.println(b1 + b2);\n    }\n}\n\n\nWhat is the result of compiling and executing Test class?","type":"Single Choice","answer":"E","answers":{"A":"0\n","B":"1\n","C":"TRUE\n","D":"FALSE\n","E":"Compilation error\n","F":"\n","G":"\n","H":"\n","I":"\n"},"explanation":"In Java language, boolean type can store only two values: true and false and these values are not compatible with int type.\n\nAlso + operator is not defined for boolean types. Hence, all the 3 statements inside main method causes compilation error."}]