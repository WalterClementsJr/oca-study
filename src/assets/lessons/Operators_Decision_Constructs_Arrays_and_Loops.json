[{"id":1,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing DivModTest class?\n\npackage com.github.oca;\n \npublic class DivModTest {\n    public static void main(String[] args) {\n        System.out.println( 23 / 2.0 );\n        System.out.println( 23 % 2.0 );\n    }\n}","type":"Single Choice","answer":"B","answers":{"A":"11\n1","B":"11.5\n1.0","C":"11.0\n1.0","D":"11.5\n0.0","E":"","F":"","G":"","H":"","I":""},"explanation":"As floating point numbers are used in the expression, hence result should be in floating point number.\n\nCorrect result is:\n\n23 / 2.0 = 11.5 \n\n23 % 2.0 = 1.0"},{"id":2,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(\"Hello\" + 1 + 2 + 3 + 4);\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"Hello10","B":"Hello19","C":"Hello1234","D":"Hello 10","E":"","F":"","G":"","H":"","I":""},"explanation":"As expression contains + operator only, which is left to right associative. Let us group the expression.\n\n\"Hello\" + 1 + 2 + 3 + 4\n\n= (\"Hello\" + 1) + 2 + 3 + 4\n\n= ((\"Hello\" + 1) + 2) + 3 + 4\n\n= (((\"Hello\" + 1) + 2) + 3) + 4\n\n[Let us solve it now, + operator with String behaves as concatenation operator.]\n\n= ((\"Hello1\" + 2) + 3) + 4\n\n= (\"Hello12\" + 3) + 4\n\n= \"Hello123\" + 4\n\n= \"Hello1234\""},{"id":3,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(1 + 2 + 3 + 4 + \"Hello\");\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"10Hello","B":"1234Hello","C":"64Hello","D":"10 Hello","E":"","F":"","G":"","H":"","I":""},"explanation":"As expression contains + operator only, which is left to right associative. Let us group the expression.\n\n1 + 2 + 3 + 4 + \"Hello\"\n\n= (1 + 2) + 3 + 4 + \"Hello\"\n\n= ((1 + 2) + 3) + 4 + \"Hello\"\n\n= (((1 + 2) + 3) + 4) + \"Hello\"\n\n[Let us solve it now,]\n\n= ((3 + 3) + 4) + \"Hello\"\n\n= (6 + 4) + \"Hello\"\n\n= 10 + \"Hello\"\n\n[+ operator with String behaves as concatenation operator.]\n\n= 10Hello"},{"id":4,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(\"Output is: \" + 10 != 5);\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"Output is: true","B":"Output is: false","C":"Compilation error","D":"Output is: 10 != 5","E":"","F":"","G":"","H":"","I":""},"explanation":"Binary plus (+) has got higher precedence than != operator. Let us group the expression. \n\n\"Output is: \" + 10 != 5 \n\n= (\"Output is: \" + 10) != 5 \n\n[!= is binary operator, so we have to evaluate the left side first. + operator behaves as concatenation operator.] \n\n= \"Output is: 10\" != 5 \n\nLeft side of above expression is String, and right side is int. But String can't be compared to int hence compilation error."},{"id":5,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(\"Output is: \" + (10 != 5));\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"Output is: true","B":"Output is: false","C":"Compilation error","D":"Output is: (10 != 5)","E":"","F":"","G":"","H":"","I":""},"explanation":"\"Output is: \" + (10 != 5) [Nothing to evaluate at left side, so let's evaluate the right side of +, 10 != 5 is true.] \n\n= \"Output is: \" + true [+ operator behaves as concatenation operator] \n\n= \"Output is: true\""},{"id":6,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Bonus class?\n\npackage com.github.oca;\n \npublic class Bonus {\n    public static void main(String[] args) {\n        int $ = 80000;\n        String msg = ($ >= 50000) ? \"Good bonus\" : \"Average bonus\";\n        System.out.println(msg);\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"Good bonus","B":"Average bonus","C":"Compilation error","D":"","E":"","F":"","G":"","H":"","I":""},"explanation":"$ is valid identifier. $ = 80000 \n\nThis is an example of ternary operator. First operand ($ >= 50000) is a boolean expression which is true, as 80000 >= 50000 is true. \n\nmsg will refer to \"Good bonus\"."},{"id":7,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int a = 20;\n        int var = --a * a++ + a-- - --a;\n        System.out.println(\"a = \" + a);\n        System.out.println(\"var = \" + var);\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"a = 25\nvar = 363","B":"a = 363\nvar = 363","C":"a = 18\nvar = 363","D":"Compilation error","E":"","F":"","G":"","H":"","I":""},"explanation":"int var = --a * a++ + a-- - --a;\n\nint var = --a * (a++) + (a--) - --a;\n\nint var = (--a) * (a++) + (a--) - (--a);\n\nint var = ((--a) * (a++)) + (a--) - (--a);\n\nint var = (((--a) * (a++)) + (a--)) - (--a);\n\nint var = ((19 * (a++)) + (a--)) - (--a); //a = 19\n\nint var = ((19 * 19) + (a--)) - (--a); //a = 20\n\nint var = (361 + 20) - (--a); //a = 19\n\nint var = 381 - (--a); //a = 19\n\nint var = 381 - 18; //a = 18\n\nint var = 363 // a = 18\n\nSo,\n\na = 18\n\nvar = 363"},{"id":8,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int a = 7;\n        boolean res = a++ == 7 && ++a == 9 || a++ == 9;\n        System.out.println(\"a = \" + a);\n        System.out.println(\"res = \" + res);\n    }\n}","type":"Single Choice","answer":"B","answers":{"A":"a = 10\nres = true","B":"a = 9\nres = true","C":"a = 10\nres = false","D":"Compilation error","E":"","F":"","G":"","H":"","I":""},"explanation":"boolean res = a++ == 7 && ++a == 9 || a++ == 9;\n\n= (a++) == 7 && ++a == 9 || (a++) == 9;\n\n= (a++) == 7 && (++a) == 9 || (a++) == 9;\n\n= ((a++) == 7) && ((++a) == 9) || ((a++) == 9);\n\n= ((a++) == 7) && ((++a) == 9) || ((a++) == 9);\n\n= (((a++) == 7) && ((++a) == 9)) || ((a++) == 9);\n\n= ((7 == 7) && ((++a) == 9)) || ((a++) == 9); //a = 8\n\n= (true && ((++a) == 9)) || ((a++) == 9); //a = 8\n\n= (true && (9 == 9)) || ((a++) == 9); //a = 9\n\n= (true && true) || ((a++) == 9); //a = 9\n\n= true || ((a++) == 9); //a = 9\n\n= true; //a = 9\n\nSo,\n\na = 9\n\nres = true"},{"id":9,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing the Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int grade = 75;\n        if(grade > 60)\n            System.out.println(\"Congratulations\");\n            System.out.println(\"You passed\");\n        else\n            System.out.println(\"You failed\");\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"Congratulations","B":"You failed","C":"Compilation error","D":"Congratulations\nYou passed","E":"","F":"","G":"","H":"","I":""},"explanation":"As there is no brackets after if, hence only one statement is part of if block and other is outside.\n\nAbove code can be written as below:\n\nif(grade > 60) { \n    System.out.println(\"Congratulations\"); \n} \nSystem.out.println(\"You passed\"); \nelse \n    System.out.println(\"You failed\"); \nThere should not be anything between if-else block but in this case, System.out.println(\"You passed\"); is between if-else and thus Compilation error."},{"id":10,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing the Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int grade = 60;\n        if(grade = 60)\n            System.out.println(\"You passed...\");\n        else\n            System.out.println(\"You failed...\");\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"You passed…","B":"You failed…","C":"Compilation error","D":"Produces no output","E":"","F":"","G":"","H":"","I":""},"explanation":"Following are allowed in boolean expression of if statement:\n\n1. Any expression whose result is either true or false. e.g. age > 20 \n\n2. A boolean variable. e.g. flag \n\n3. A boolean literal: true or false \n\n4. A boolean assignment. e.g. flag = true \n\n\nboolean expression in this case is: (grade = 60), which is an int assignment and not boolean assignment. Hence Compilation error."},{"id":11,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the output of compiling and executing the Test class?\n\n1 package com.github.oca;\n2  \n3 public class Test {\n4     public static void main(String[] args) {\n5         int x = 2;\n6         switch (x) {\n7             default:\n8                 System.out.println(\"Still no idea what x is\");\n9             case 1:\n10                 System.out.println(\"x is equal to 1\");\n11                 break;\n12             case 2:\n13                 System.out.println(\"x is equal to 2\");\n14                 break;\n15             case 3: \n16                 System.out.println(\"x is equal to 3\");\n17                 break;\n18         }\n19     }\n20 }","type":"Single Choice","answer":"A","answers":{"A":"x is equal to 2","B":"Compilation error","C":"Still no idea what x is\nx is equal to 1","D":"Produces no output","E":"","F":"","G":"","H":"","I":""},"explanation":"Even though default block is available at the top but matching case is present.\n\nSo control goes inside matching case and prints \"x is equal to 2\" on to the console.\n\nAfter that break; statement takes the control out of the switch- case block."},{"id":12,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the output of compiling and executing the Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int x = 2;\n        switch (x) {\n            default:\n                System.out.println(\"Still no idea what x is\");\n            case 1:\n                System.out.println(\"x is equal to 1\");\n                break;\n            case 2:\n                System.out.println(\"x is equal to 2\");\n                break;\n            case 3: \n                System.out.println(\"x is equal to 3\");\n                break;\n        }\n    }\n}","type":"Single Choice","answer":"D","answers":{"A":"5","B":"10","C":"30","D":"120","E":"","F":"","G":"","H":"","I":""},"explanation":"Matching case block \"case 10:\" is found, a *= 2; is executed, which means a = a * 2; => a = 5 * 2; => a = 10; \n\nNo break statement, hence it enters in fall-through. \n\na *= 3; is executed, which means a = a * 3; => a = 10 * 3; => a = 30; \n\na *= 4; is executed, which means a = a * 4; => a = 30 * 4; => a = 120;"},{"id":13,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int score = 60;\n        switch (score) {\n            default:\n                System.out.println(\"Not a valid score\");\n            case score < 70:\n                System.out.println(\"Failed\");\n                break;\n            case score >= 70:\n                System.out.println(\"Passed\");\n                break;\n        }\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"Compilation error","B":"Failed","C":"Not a valid score\nFailed","D":"Passed","E":"","F":"","G":"","H":"","I":""},"explanation":"case values must evaluate to the same type / compatible type as the switch expression can use. \n\nswitch expression can accept following: \n\nchar or Character, \n\nbyte or Byte, \n\nshort or Short, \n\nint or Integer, \n\nAn enum only from Java 6, \n\nA String expression only from Java 7. \n\n\n\nIn this case, switch expression [switch (score)] is of int type. \n\nBut case expressions, score < 70 and score >= 70 are of boolean type and hence compilation error."},{"id":14,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        byte var = 100;\n        switch(var) {\n            case 100:\n                System.out.println(\"var is 100\");\n                break;\n            case 200:\n                System.out.println(\"var is 200\");\n                break;\n            default:\n                System.out.println(\"In default\");\n        }\n    }\n}","type":"Single Choice","answer":"D","answers":{"A":"var is 100","B":"var is 200","C":"In default","D":"Compilation error","E":"","F":"","G":"","H":"","I":""},"explanation":"case values must evaluate to the same type / compatible type as the switch expression can use. \n\nswitch expression can accept following: \n\nchar or Character \n\nbyte or Byte \n\nshort or Short \n\nint or Integer \n\nAn enum only from Java 6 \n\nA String expression only from Java 7 \n\n\nIn this case, switch expression [switch (var)] is of byte type.\n\nbyte range is from -128 to 127. But in case expression [case 200], 200 is outside byte range and hence compilation error."},{"id":15,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        String fruit = \"mango\";\n        switch (fruit) {\n            case \"Apple\":\n                System.out.println(\"APPLE\");\n            case \"Mango\":\n                System.out.println(\"MANGO\");\n            case \"Banana\":\n                System.out.println(\"BANANA\");\n                break;\n            default:\n                System.out.println(\"ANY FRUIT WILL DO\");\n        }\n    }\n}","type":"Single Choice","answer":"B","answers":{"A":"MANGO","B":"ANY FRUIT WILL DO","C":"MANGO\nBANANA","D":"MANGO\nANY FRUIT WILL DO","E":"MANGO\nBANANA\nANY FRUIT WILL DO","F":"","G":"","H":"","I":""},"explanation":"\"mango\" is different from \"Mango\", so there is no matching case available.\n\ndefault block is executed and as it is the last block inside switch hence after printing \"ANY FRUIT WILL DO\" control goes out of switch block, main method ends and program terminates successfully."},{"id":16,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        String fruit = \"mango\";\n        switch (fruit) {\n            default:\n                System.out.println(\"ANY FRUIT WILL DO\");\n            case \"Apple\":\n                System.out.println(\"APPLE\");\n            case \"Mango\":\n                System.out.println(\"MANGO\");\n            case \"Banana\":\n                System.out.println(\"BANANA\");\n                break;\n        }\n    }\n}","type":"Single Choice","answer":"D","answers":{"A":"ANY FRUIT WILL DO","B":"MANGO","C":"MANGO\nBANANA","D":"ANY FRUIT WILL DO\nAPPLE\nMANGO\nBANANA","E":"","F":"","G":"","H":"","I":""},"explanation":"\"mango\" is different from \"Mango\", so there is no matching case available.\n\ndefault block is executed, \"ANY FRUIT WILL DO\" is printed on to the screen.\n\nNo break statement inside default, hence control enters in fall-through and executes remaining blocks until the break; is found or switch block ends.\n\nSo in this case, it prints APPLE, MANGO, BANANA one after another and break; statement takes control out of switch block. main method ends and program terminates successfully."},{"id":17,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        String fruit = new String(new char[] {'M', 'a', 'n', 'g', 'o'});\n        switch (fruit) {\n            default:\n                System.out.println(\"ANY FRUIT WILL DO\");\n            case \"Apple\":\n                System.out.println(\"APPLE\");\n            case \"Mango\":\n                System.out.println(\"MANGO\");\n            case \"Banana\":\n                System.out.println(\"BANANA\");\n                break;\n        }\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"ANY FRUIT WILL DO","B":"MANGO","C":"MANGO\nBANANA","D":"ANY FRUIT WILL DO\nAPPLE\nMANGO\nBANANA","E":"","F":"","G":"","H":"","I":""},"explanation":"fruit refers to String object \"Mango\".\n\nMatching case is available, MANGO is printed on to the console.\n\nNo break statement inside case \"Mango\":, hence control enters in fall-through and executes remaining blocks until the break; is found or switch block ends.\n\nSo in this case, it prints BANANA and break; statement takes control out of switch block. main method ends and program terminates successfully."},{"id":18,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"For the class Test, which options, if used to replace /*INSERT*/, will print TEN on to the console? Select 4 options.\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        /*INSERT*/\n        switch(var) {\n            case 10:\n                System.out.println(\"TEN\");\n                break;\n            default:\n                System.out.println(\"DEFAULT\");\n        }\n    }\n}","type":"Multiple Choice","answer":"A,C,D,E","answers":{"A":"byte var = 10;","B":"long var = 10;","C":"Short var = 10;","D":"Integer var = 10;","E":"char var = 10;","F":"double var = 0;","G":"","H":"","I":""},"explanation":"switch can accept primitive types: byte, short, int, char; wrapper types: Byte, Short, Integer, Character; String and enums.\n\nIn this case long and double are invalid values to be passed in switch expression. char uses 16 bits (2 Bytes) and its range is 0 to 65535 (no signed bit reserved) so it can easily store value 10."},{"id":19,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"For the class Test, which options, if used to replace /*INSERT*/, will print \"Lucky no. 7\" on to the console? Select 3 options.\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        /*INSERT*/\n        switch(var) {\n            case 7:\n                System.out.println(\"Lucky no. 7\");\n                break;\n            default:\n                System.out.println(\"DEFAULT\");\n        }\n    }\n}","type":"Multiple Choice","answer":"B,C,E","answers":{"A":"char var = '7';","B":"char var = 7;","C":"Integer var = 7;","D":"Character var = '7';","E":"Character var = 7;","F":"","G":"","H":"","I":""},"explanation":"switch can accept primitive types: byte, short, int, char; wrapper types: Byte, Short, Integer, Character; String and enums.\n\nIn this case, all are valid values but only 3 executes \"case 7:\". case is comparing integer value 7.\n\nNOTE: character seven, '7' is different from integer value seven, 7. So \"char var = '7';\" and \"Character var = '7';\" will print DEFAULT on to the console."},{"id":20,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"For the class Test, which option, if used to replace /*INSERT*/, will print \"Lucky no. 7\" on to the console?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        /*INSERT*/\n        switch(var) {\n            case '7':\n                System.out.println(\"Lucky no. 7\");\n                break;\n            default:\n                System.out.println(\"DEFAULT\");\n        }\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"int var = 7;","B":"Integer var = 7;","C":"int var = '7';","D":"None of the other options","E":"","F":"","G":"","H":"","I":""},"explanation":"int var = 7; => DEFAULT,\n\nInteger var = 7; => var is of Integer type and case contains char '7'. char '7' cannot be compared with Integer and hence compilation error. case '7' can easily be compared with int value but not with Integer type.\n\nint var = '7'; => Lucky no. 7 \n\n\n\nHINT: There is no need to remember. case '7' value means you are trying to equate or compare var (Integer value) with '7' (char).\n\nIf assignment operation works then method invocation, switch expression parameter etc. will also work.\n\nInteger var = 7; is possible but Integer var = '7'; gives compilation error as char cannot be converted to Integer."},{"id":21,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \nimport java.time.LocalTime;\n \npublic class Test {\n    public static void main(String[] args) {\n        LocalTime time = LocalTime.of(16, 40);\n        String amPm = time.getHour() >= 12 ? (time.getHour() == 12) ? \"PM\" : \"AM\";\n        System.out.println(amPm);\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"PM","B":"AM","C":"Compilation error","D":"An exception is thrown at runtime","E":"","F":"","G":"","H":"","I":""},"explanation":"This question is on ternary operator (?:).\n\nIf an expression has multiple ternary operators then number of ? and : should match.\n\nGiven expression contains 2 ? and 1 : and hence Compilation Error."},{"id":22,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int i = 5;\n        if(i++ < 6) {\n            System.out.println(i++);\n        }\n    }\n}","type":"Single Choice","answer":"B","answers":{"A":"5","B":"6","C":"7","D":"Program executes successfully but nothing is printed on to the console","E":"","F":"","G":"","H":"","I":""},"explanation":"Initially i = 5. if(i++ < 6) means if(5 < 6) and then i = 6.\n\n5 < 6 is true, control goes inside if-block and executes System.out.println(i++); This prints current value of i to the console, which is 6 and after that increments the value of i by 1, so i becomes 7."},{"id":23,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code:\n\n//Test.java\npublic class Test {\n    private static boolean flag = !true;\n    \n    public static void main(String [] args) {\n        System.out.println(!flag ? args[0] : args[1]);\n    }\n}\nWhat will be the result of compiling and executing Test class using below commands?\njavac Test.java\njava Test AM PM","type":"Single Choice","answer":"A","answers":{"A":"AM","B":"PM","C":"ExceptionInInitializerError is thrown while loading the Test class","D":"Compilation error","E":"","F":"","G":"","H":"","I":""},"explanation":"There is no compilation error. When Test class is loaded by JVM to invoked main(String []) method, static variable declaration and initialization statement is executed and false is assigned to flag as !true is false. \n\nAs java Test AM PM command is used, so args[0] --> \"AM\" and args[1] --> \"PM\". \n\nIn ternary operator, boolean expression is evaluated first, !flag evaluates to true and therefore agrs[0] is returned.\n\nAM is printed on to the console."},{"id":24,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String [] args) {\n        int a = 100;\n        System.out.println(-a++);\n    }\n}","type":"Single Choice","answer":"B","answers":{"A":"Compilation error","B":"-100","C":"-101","D":"99","E":"-99","F":"","G":"","H":"","I":""},"explanation":"First add parenthesis (round brackets) to the given expression: -a++.\n\nThere are 2 operators involved. unary minus and Postfix operator. Let's start with expression and value of a.\n\n\n-a++; [a = 100]. \n\n-(a++); [a = 100] Postfix operator has got higher precedence than unary operator.   \n\n-(100); [a = 101] Use the value of a (100) in the expression and after that increase the value of a to 101. \n\n-100; [a = 101] -100 is printed on to the console."},{"id":25,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String [] args) {\n        int a = 2;\n        boolean res = false;\n        res = a++ == 2 || --a == 2 && --a == 2;\n        System.out.println(a);\n    }\n}","type":"Single Choice","answer":"B","answers":{"A":"2","B":"3","C":"1","D":"Compilation error","E":"","F":"","G":"","H":"","I":""},"explanation":"a++ == 2 || --a == 2 && --a == 2; [Given expression]. \n\n(a++) == 2 || --a == 2 && --a == 2; [Postfix has got higher precedence than other operators]. \n\n(a++) == 2 || (--a) == 2 && (--a) == 2; [After postfix, precedence is given to prefix].   \n\n((a++) == 2) || ((--a) == 2) && ((--a) == 2); [== has higher precedence over && and ||]. \n\n((a++) == 2) || (((--a) == 2) && ((--a) == 2)); [&& has higher precedence over ||]. \n\nLet's start solving it:\n\n((a++) == 2) || (((--a) == 2) && ((--a) == 2)); [a=2, res=false]. \n\n(2 == 2) || (((--a) == 2) && ((--a) == 2)); [a=3, res=false]. \n\ntrue || (((--a) == 2) && ((--a) == 2)); [a=3, res=false].  || is a short-circuit operator, hence no need to evaluate expression on the right. \n\nres is true and a is 3."},{"id":26,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class? \n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String [] args) {\n        int a = 3;\n        System.out.println(a++ == 3 || --a == 3 && --a == 3);\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"TRUE","B":"FALSE","C":"Compilation error","D":"","E":"","F":"","G":"","H":"","I":""},"explanation":"a++ == 3 || --a == 3 && --a == 3; [Given expression]. \n\n(a++) == 3 || --a == 3 && --a == 3; [Postfix has got higher precedence than other operators]. \n\n(a++) == 3 || (--a) == 3 && (--a) == 3; [After postfix, precedence is given to prefix].   \n\n((a++) == 3) || ((--a) == 3) && ((--a) == 3); [== has higher precedence over && and ||]. \n\n((a++) == 3) || (((--a) == 3) && ((--a) == 3)); [&& has higher precedence over ||]. \n\nLet's start solving it:\n\n((a++) == 3) || (((--a) == 3) && ((--a) == 3)); [a=3, res=false]. \n\n(3 == 3) || (((--a) == 3) && ((--a) == 3)); [a=4, res=false]. \n\ntrue || (((--a) == 3) && ((--a) == 3)); [a=4, res=false].  || is a short-circuit operator, hence no need to evaluate expression on the right. \n\nres is true and a is 4."},{"id":27,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class? \n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String [] args) {\n        int a = 3;\n        m(++a, a++);\n        System.out.println(a);\n    }\n    \n    private static void m(int i, int j) {\n        i++;\n        j--;\n    }\n}","type":"Single Choice","answer":"B","answers":{"A":"4","B":"5","C":"6","D":"3","E":"","F":"","G":"","H":"","I":""},"explanation":"Method m works on copies and changes done to i and j are local to method m only.\n\nm(++a, a++); [a=3]. \n\nm(4, a++); [a=4]. \n\nm(4, 4); [a=5]. \n\n\nSystem.out.println(a); => Prints 5 on to the console."},{"id":28,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String [] args) {\n        boolean flag = false;\n        System.out.println((flag = true) | (flag = false) || (flag = true));\n        System.out.println(flag);\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"A","answers":{"A":"true\nfalse","B":"false\ntrue","C":"true\ntrue","D":"false\nfalse","E":"Compilation error","F":"","G":"","H":"","I":""},"explanation":"Given statement:\n\nSystem.out.println((flag = true) | (flag = false) || (flag = true)); //flag = false\n\nSystem.out.println(((flag = true) | (flag = false)) || (flag = true)); //bitwise inclusive OR | has higher precedence over logical OR ||. flag = false\n\n|| has two operands, Left: ((flag = true) | (flag = false)) and Right: (flag = true). Left operand needs to be evaluated first.\n\nSystem.out.println((true | (flag = false)) || (flag = true)); //flag = true\n\nSystem.out.println((true | false) || (flag = true)); //flag = false\n\nSystem.out.println(true || (flag = true)); //flag = false\n\n|| is a short-circuit operator and as left operand evaluates to true, hence right operand is not evaluated.\n\nAbove statement prints true on to the console.\n\nAnd\n\nSystem.out.println(flag); prints false on to the console as flag variable is false."},{"id":29,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String [] args) {\n        boolean status = true;\n        System.out.println(status = false || status = true | status = false);\n        System.out.println(status);\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"E","answers":{"A":"true\nfalse","B":"false\ntrue","C":"true\ntrue","D":"false\nfalse","E":"Compilation error","F":"","G":"","H":"","I":""},"explanation":"Given statement:\n\nSystem.out.println(status = false || status = true | status = false);\n\nAs it contains multiple operators, hence let's group the operators first.\n\nSystem.out.println(status = false || status = (true | status) = false); //Bitwise inclusive OR | has highest precedence over logical or || and assignment =\n\nFor assignment operator to work, left operand must be variable but in above case, `(true | status) = false` causes compilation failure as left operand (true | status) evaluates to a boolean value and not boolean variable."},{"id":30,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String [] args) {\n        int a = 3;\n        int b = 5;\n        int c = 7;\n        int d = 9;\n        boolean res = --a + --b < 1 && c++ + d++ > 1;\n        System.out.printf(\"a = %d, b = %d, c = %d, d = %d, res = %b\", a, b, c, d, res);\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"A","answers":{"A":"a = 2, b = 4, c = 7, d = 9, res = false","B":"a = 2, b = 4, c = 8, d = 10, res = false","C":"a = 2, b = 4, c = 7, d = 9, res = true","D":"a = 2, b = 4, c = 8, d = 10, res = true","E":"a = 3, b = 5, c = 8, d = 10, res = false","F":"a = 3, b = 5, c = 8, d = 10, res = true","G":"","H":"","I":""},"explanation":"Given expression:\n\n--a + --b < 1 && c++ + d++ > 1;\n\n--a + --b < 1 && (c++) + (d++) > 1; //postfix has got highest precedence\n\n(--a) + (--b) < 1 && (c++) + (d++) > 1; //prefix comes after postfix\n\n{(--a) + (--b)} < 1 && {(c++) + (d++)} > 1; //Then comes binary +. Though parentheses are used but I used curly brackets, just to explain.\n\n[{(--a) + (--b)} < 1] && [{(c++) + (d++)} > 1]; //Then comes relational operator (<,>). I used square brackets instead of parentheses.\n\nThis expression is left with just one operator, && and this operator is a binary operator so works with 2 operands, left operand [{(--a) + (--b)} < 1] and right operand [{(c++) + (d++)} > 1]\n\nLeft operand of && must be evaluated first, which means [{(--a) + (--b)} < 1] must be evaluated first.\n\n\n[{2 + (--b)} < 1] && [{(c++) + (d++)} > 1]; //a=2, b=5, c=7, d=9\n\n[{2 + 4} < 1] && [{(c++) + (d++)} > 1]; //a=2, b=4, c=7, d=9\n\n[6 < 1] && [{(c++) + (d++)} > 1];\n\nfalse && [{(c++) + (d++)} > 1];\n\n\n&& is short circuit operator, hence right operand is not evaluated and false is returned.\n\n\nOutput of the given program is: a = 2, b = 4, c = 7, d = 9, res = false"},{"id":31,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code snippet:\n\nint i = 10;\nSystem.out.println(i > 3 != false);\n\n\nWhat is the result?","type":"Single Choice","answer":"B","answers":{"A":"Compilation error","B":"TRUE","C":"FALSE","D":"null","E":"","F":"","G":"","H":"","I":""},"explanation":"Given Expression:\n\ni > 3 != false\n\nIt has 2 operators > and !=. > has higher precedence over !=, hence given expression can be written as:\n\n(i > 3) != false\n\nLet's solve above expression:\n\ntrue != false\n\ntrue\n\n\nHence true is printed on to the console."},{"id":32,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String [] args) {\n        boolean flag1 = true;\n        boolean flag2 = false;\n        boolean flag3 = true;\n        boolean flag4 = false;\n        \n        System.out.println(!flag1 == flag2 != flag3 == !flag4); //Line n1\n        System.out.println(flag1 = flag2 != flag3 == !flag4); //Line n2\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"E","answers":{"A":"Line n1 causes compilation error","B":"Line n2 causes compilation error","C":"true\ntrue","D":"true\nfalse","E":"false\ntrue","F":"false\nfalse","G":"","H":"","I":""},"explanation":"Let's solve the expression at Line n1:\n\n!flag1 == flag2 != flag3 == !flag4\n\n(!flag1) == flag2 != flag3 == (!flag4) //Logical NOT has got highest precedence among given operators\n\n((!flag1) == flag2) != flag3 == (!flag4) //== and != have same precedence and left to right associative, grouping == first\n\n(((!flag1) == flag2) != flag3) == (!flag4) //grouping != next\n\nAbove expression is left with single operator ==, whose left side is: (((!flag1) == flag2) != flag3) and right side is: (!flag4). As == is a binary operator, so left side is evaluated first.\n\n((false == flag2) != flag3) == (!flag4) //!flag1 is false\n\n((false == false) != flag3) == (!flag4) //flag2 is false\n\n(true != flag3) == (!flag4) //(false == false) evaluates to true\n\n(true != true) == (!flag4) //flag3 is true\n\nfalse == (!flag4) //(true != true) evaluates to false\n\nfalse == true //!flag4 is true\n\nfalse //(false == true) evaluates to false\n\nHence, false is printed on to the console.\n\n\n\nLet's solve the expression at Line n2:\n\nflag1 = flag2 != flag3 == !flag4\n\nflag1 = flag2 != flag3 == (!flag4) //Logical NOT has got highest precedence among given operators\n\nflag1 = (flag2 != flag3) == (!flag4) //== and != have same precedence and left to right associative, grouping == first\n\nflag1 = ((flag2 != flag3) == (!flag4)) //grouping == next\n\nAbove expression is left with single assignment operator =, whose right side needs to be evaluated first\n\nflag1 = ((false != flag3) == (!flag4)) //flag2 is false\n\nflag1 = ((false != true) == (!flag4)) //flag3 is true\n\nflag1 = (true == (!flag4)) //(false != true) evaluates to true\n\nflag1 = (true == true) //!flag4 is true\n\nflag1 = true //(true == true) evaluates to true\n\ntrue is assigned to flag1 and true is also printed on to the console\n\n\n\nOne suggestion: In the real exam, if you find a question containing multiple expressions, then first check if there is any compilation error or not. If there is no compilation error in all the expressions, then only solve the expressions."},{"id":33,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String [] args) {\n        int num = 10;\n        if(num++ == num++) {\n            System.out.println(\"EQUAL \" + num);\n        } else {\n            System.out.println(\"NOT EQUAL \" + num);\n        }\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"EQUAL 12","B":"EQUAL 11","C":"NOT EQUAL 12","D":"NOT EQUAL 11","E":"","F":"","G":"","H":"","I":""},"explanation":"Given boolean expression:\n\n(num++ == num++) //num=10\n\n(10 == num++) //Left side operand is evaluated first, value 10 is used in the expression and variable num is incremented by 1, so num=11\n\n(10 == 11) //Right side operand is evaluated next, value 11 is used in the expression and variable num is incremented by 1, so num = 12\n\nAbove expression evaluates to false, hence else block is executed and NOT EQUAL 12 is printed on to the console."},{"id":34,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int val = 25;\n        if(val++ < 26) {\n            System.out.println(val++);\n        }\n    }\n}","type":"Single Choice","answer":"B","answers":{"A":"25","B":"26","C":"27","D":"Program executes successfully but nothing is printed on to the console","E":"","F":"","G":"","H":"","I":""},"explanation":"Initially val = 25.\n\n'if(val++ < 26)' means 'if(25 < 26)', value of val (25) is used in the boolean expression and then value of val is incremented by 1, so val = 26.\n\n25 < 26 is true, control goes inside if-block and executes System.out.println(val++); This prints current value of val to the console, which is 26 and after that increments the value of val by 1, so val becomes 27."},{"id":35,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int score = 30; // Line n1\n        char grade = 'F'; // Line n2\n        if (50 <= score < 60) // Line n3\n            grade = 'D';\n        else if (60 <= score < 70) // Line n4\n            grade = 'C';\n        else if (70 <= score < 80) // Line n5\n            grade = 'B';\n        else if (score >= 80)\n            grade = 'A';\n        System.out.println(grade);\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"Compilation error","B":"A","C":"B","D":"C","E":"D","F":"F","G":"","H":"","I":""},"explanation":"Line n1 and Line n2 compile successfully.\n\n\n\nLet's check the boolean expression of Line n3:\n\n50 <= score < 60\n\nAs multiple operators are available, so let's group the operators first on the basis of precedence and associativity.\n\nRelational operators (<, >, <= and >=) are at same level and left to right associative, hence given expression can be grouped as:\n\n(50 <= score) < 60\n\n< is a binary operator with two operands: (50 <= score) on the left is of boolean type and 60 on the right is of int type. But < operator is not defined for boolean, int type and hence Line n3 causes compilation error. Line n4 and Line n5 cause compilation error for the same reason."},{"id":36,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int x = 10; //Line n1\n        if (false)\n            System.out.println(x); //Line n2\n        System.out.println(\"HELLO\"); //Line n3\n    }\n}\nWhat is the result of compiling and executing Test class?","type":"Single Choice","answer":"D","answers":{"A":"Compilation error at Line n1","B":"Compilation error at Line n2","C":"Compilation error at Line n3","D":"HELLO","E":"10\nHELLO","F":"","G":"","H":"","I":""},"explanation":"Even though compiler is aware that Line n2 will never execute, but it doesn't tag it as unreachable code. Reason for this odd behavior is explained in the Java Language specification:\n\nhttps://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-14.21\n\nFollowing statement results in a compile-time error:\n\nwhile (false) { x=3; }\n\nbecause the statement x=3; is not reachable; but the superficially similar case:\n\nif (false) { x=3; }\n\ndoes not result in a compile-time error. An optimizing compiler may realize that the statement x=3; will never be executed and may choose to omit the code for that statement from the generated class file, but the statement x=3; is not regarded as \"unreachable\" in the technical sense specified here.\n\n\nThe rationale for this differing treatment is to allow programmers to define \"flag\" variables such as:\n\n\nstatic final boolean DEBUG = false;\n\nand then write code such as:\n\n\nif (DEBUG) { x=3; }\n\nThe idea is that it should be possible to change the value of DEBUG from false to true or from true to false and then compile the code correctly with no other changes to the program text.\n\n\nLine n2 is not executed but Line n3 executes successfully and prints HELLO on to the console."},{"id":37,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        String msg = \"Hello\";\n        boolean [] flag = new boolean[1];\n        if(flag[0]) {\n            msg = \"Welcome\";\n        }\n        System.out.println(msg);\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"Hello","B":"Welcome","C":"ArrayIndexOutOfBoundsException","D":"NullPointerException","E":"","F":"","G":"","H":"","I":""},"explanation":"Variable msg is referring to String object \"Hello\".\n\nThere is only one element in boolean array object and it is initialized to default value of boolean, which is false.\n\nflag[0] is false, if-check fails and control doesn't enter if block. System.out.println(msg) prints original value of msg, which is \"Hello\"."},{"id":38,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Which of the following array declarations and initializations is NOT legal?","type":"Single Choice","answer":"C","answers":{"A":"char [] arr1 [] = new char[5][];","B":"int [] arr2 = {1, 2, 3, 4, 5};","C":"int [] arr3 = new int[3]{10, 20, 30};","D":"byte [] val = new byte[10];","E":"","F":"","G":"","H":"","I":""},"explanation":"You can't specify size at the time of initializing with data, hence new int[3]{10, 20, 30}; causes compilation error."},{"id":39,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        String [] arr = new String[7];\n        System.out.println(arr);\n    }\n}","type":"Single Choice","answer":"D","answers":{"A":"NullPointerException","B":"Compilation Error","C":"null","D":"Some String containing @ symbol","E":"","F":"","G":"","H":"","I":""},"explanation":"Variable arr refers to an array object of String of 7 elements.\n\nVariable arr contains the memory address of String array object. \n\narr is of reference type, hence it prints some String Containing @ symbol."},{"id":40,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        char [][] arr = {\n                {'A', 'B', 'C'},\n                {'D', 'E', 'F'},\n                {'G', 'H', 'I'}\n        };\n        \n        for(int i = 0; i < arr.length; i++) {\n            for(int j = 0; j < arr[i].length; j++) {\n                System.out.print(arr[i][1]);\n            }\n            System.out.println();\n        }\n    }\n}","type":"Single Choice","answer":"B","answers":{"A":"ABC\nDEF\nGHI","B":"BBB\nEEE\nHHH","C":"AAA\nDDD\nGGG","D":"CCC\nFFF\nIII","E":"","F":"","G":"","H":"","I":""},"explanation":"NOTE: System.out.print statement is printing arr[i][1],\n\nwhich means it prints 2nd array element of a particular row, for each iteration of inner loop.\n\nThat is why output is:\n\nBBB\n\nEEE\n\nHHH\n\nTo get all the array elements printed correctly, use arr[i][j] in System.out.print statement."},{"id":41,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int [] arr1 = {5, 10, 15};\n        int [] arr2 = {'A', 'B'};\n        arr1 = arr2;\n        System.out.println(arr1.length + arr2.length);\n    }\n}","type":"Single Choice","answer":"D","answers":{"A":"Compilation error","B":"An exception is thrown at runtime","C":"0","D":"4","E":"6","F":"5","G":"","H":"","I":""},"explanation":"Initially arr1 refers to an int array object of 3 elements.\n\nAnd arr2 refers to an int array object of 2 elements [char type is compatible with int type]\n\nWhen the statement `arr1 = arr2;` executes, variable arr1 copies the content of arr2, which is the address of array object containing 2 elements. Hence, arr1 also starts referring to same array object. arr1.length = 2 and arr2.length = 2.\n\nTherefore, output is: 4"},{"id":42,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int [] arr1 = {1, 2, 3};\n        char [] arr2 = {'A', 'B'}; //ASCII code of 'A' is 65, 'B' is 66\n        arr1 = arr2;\n        for(int i = 0; i < arr1.length; i++) {\n            System.out.print(arr1[i] + \" \");\n        }\n    }\n}","type":"Single Choice","answer":"D","answers":{"A":"1 2 3\n\n\nCompilation error","B":"A B","C":"65 66","D":"Compilation error","E":"","F":"","G":"","H":"","I":""},"explanation":"Initially arr1 refers to an int array object of 3 elements: 1, 2, 3\n\nAnd arr2 refers to an char array object of 2 elements: 'A', 'B'. \n\nStatement arr1 = arr2; gives compilation error as char [] is not compatible with int [] even though char is compatible with int."},{"id":43,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What is the output if below program is run with the command line:\njava Test\n\npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(args.length);\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"0","B":"NullPointerException","C":"ArrayIndexOutOfBoundsException","D":"1","E":"","F":"","G":"","H":"","I":""},"explanation":"We have not passed any command-line arguments, hence args refers to an array object of Size 0. \n\nargs.length prints 0. args is not null and hence no NullPointerException.\n\nAlso we are not accessing array element so no question of ArrayIndexOutOfBoundsException as well."},{"id":44,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Which of the following is true for code below?\n\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        byte [] arr = new byte[0];\n        System.out.println(arr[0]);\n    }\n}","type":"Single Choice","answer":"D","answers":{"A":"Compilation error","B":"0","C":"NullPointerException","D":"ArrayIndexOutOfBoundsException","E":"","F":"","G":"","H":"","I":""},"explanation":"arr refers to an array object of size 0. That means arr stores some memory address. So we will not get NullPointerException in this case.\n\nBut index 0 is not available for an array object of size 0 and thus ArrayIndexOutOfBoundsException is thrown at runtime."},{"id":45,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\n\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        String [] arr = new String[1];\n        System.out.println(arr[0].isEmpty());\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"TRUE","B":"FALSE","C":"NullPointerException is thrown at runtime","D":"ArrayIndexOutOfBoundsException is thrown at runtime","E":"","F":"","G":"","H":"","I":""},"explanation":"All the elements of array are initialized to respective zeros (in case of primitive type) or null (in case of reference type).\n\nSo, arr[0] refers to null.\n\nMethod 'isEmpty()' is invoked on null reference and hence NullPointerException is thrown at runtime."},{"id":46,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Which of the following is not a valid array declaration?","type":"Single Choice","answer":"D","answers":{"A":"int [] arr1 = new int[8];","B":"int [][] arr2 = new int[8][8];","C":"int [] arr3 [] = new int[8][];","D":"int arr4[][] = new int[][8];","E":"","F":"","G":"","H":"","I":""},"explanation":"1st array dimension must be specified at the time of declaration.\n\nnew int[][8]; causes compilation error as 1st dimension is not specified."},{"id":47,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        String[][] arr = { { \"7\", \"6\", \"5\" }, { \"4\", \"3\" }, { \"2\", \"1\" } };\n        for (int i = 0; i < arr.length; i++) { //Line n1\n            for (int j = 0; j < arr[i].length; j++) { //Line n2\n                switch (arr[i][j]) { //Line n3\n                    case \"2\":\n                    case \"4\":\n                    case \"6\":\n                        break; //Line n4\n                    default: \n                        continue; //Line n5\n                }\n                System.out.print(arr[i][j]); //Line n6\n            }\n        }\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"6","B":"64","C":"642","D":"7","E":"75","F":"753","G":"7531","H":"7654321","I":""},"explanation":"case values must evaluate to the same type / compatible type as the switch expression can use. \n\nswitch expression can accept following: \n\nchar or Character, \n\nbyte or Byte, \n\nshort or Short, \n\nint or Integer, \n\nAn enum only from Java 6, \n\nA String expression only from Java 7. \n\n\nIn this case, switch expression [switch (arr[i][j])] is of String type.\n\nPlease note that break; statement at Line n4 takes the control to Line n6 (outside switch-case block) and not out of the inner for loop, where as, continue; statement at Line n5 takes the control to the update expression (j++) of Line n2.\n\narr.length is 3, so outer loop executes 3 times.\n\n1st iteration of outer loop, i=0.\n\n-1st iteration of inner loop, i=0, j=0 and arr[0].length = 3. 0 < 3 evaluates to true.\n\n  arr[0][0] = \"7\", Line n5 is executed, and it takes the control to j++ (j = 1). 1 < 3 evaluates to true.\n\n-2nd iteration of inner loop\n\n  arr[0][1] = \"6\", Line n4 is executed, and it takes the control to Line n6. 6 is printed on to the console. Control goes to j++ (j = 2). 2 < 3 evaluates to true.\n\n-3rd iteration of inner loop\n\n  arr[0][2] = \"5\", Line n5 is executed, and it takes the control to j++ (j = 3).   As 3 < 3 evaluates to false, control exits inner loop and goes to i++.\n\nYou must have noticed that 1st iteration of outer loop prints the even number of 1st array { \"7\", \"6\", \"5\" }\n\n\n\nSimilarly, 2nd iteration of outer loop prints the even number of 2nd array { \"4\", \"3\" }, which is 4\n\nand 3rd iteration of outer loop prints the even number of 3rd array { \"2\", \"1\" }, which is 2.\n\n\n\nTherefore, the output is: 642."},{"id":48,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Given code:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        String [] arr = {\"I\", \"N\", \"S\", \"E\", \"R\", \"T\"};\n        for(/*INSERT*/) {\n            if (n % 2 == 0) {\n                continue;\n            }\n            System.out.print(arr[n]); //Line n1\n        }\n    }\n}\n\nAnd below options:\n\n1. int n = 0; n < arr.length; n += 1\n2. int n = 0; n <= arr.length; n += 1\n3. int n = 1; n < arr.length; n += 2\n4. int n = 1; n <= arr.length; n += 2\n\nHow many above options can be used to replace /*INSERT*/, such that on execution, code will print NET on to the console?","type":"Single Choice","answer":"D","answers":{"A":"Only one option","B":"Only two options","C":"Only three options","D":"All four options","E":"None of the other options","F":"","G":"","H":"","I":""},"explanation":"From the given array, if you print the elements at 1st, 3rd and 5th indexes, then you will get expected output.\n\nAlso note that, for values of n = 0, 2, 4, 6; Line n1 would not be executed, which means even if the value of n is 6, above code will not throw ArrayIndexOutOfBoundsException.\n\nFor 1st option [int n = 0; n < arr.length; n += 1], values of n used: 0, 1, 2, 3, 4, 5 and because of continue; statement, Line n1 will not execute for 0, 2 & 4 and it will execute only for 1, 3 & 5 and therefore NET will be printed.\n\nFor 2nd option [int n = 0; n <= arr.length; n += 1], values of n used: 0, 1, 2, 3, 4, 5, 6 and because of continue; statement, Line n1 will not execute for 0, 2, 4 & 6 and it will execute only for 1, 3 & 5 and therefore NET will be printed.\n\nFor 3rd option [int n = 1; n < arr.length; n += 2], values of n used: 1, 3, 5 and therefore NET will be printed.\n\nFor 4th option [int n = 1; n <= arr.length; n += 2], values of n used: 1, 3, 5 and therefore NET will be printed.\n\n\nHence, all the 4 options are valid."},{"id":49,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Given code:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int [] arr = {1, 2, 3, 4, 5};\n        int x = 0;\n        for(/*INSERT*/) {\n            x += arr[n];\n        }\n        System.out.println(x);\n    }\n}\nWhich 3 options, if used to replace /*INSERT*/, on execution will print 9 on to the console?","type":"Multiple Choice","answer":"B,C,D","answers":{"A":"int n = 0; n < arr.length; n++","B":"int n = 0; n < arr.length; n += 2","C":"int n = 3; n < arr.length; n++","D":"int n = 1; n < arr.length - 1; n++","E":"int n = 1; n < arr.length; n += 2","F":"","G":"","H":"","I":""},"explanation":"Logic in for loop is adding array elements. You need to find out which array elements when added will result in 9.\n\nPossible options are: {1+3+5, 2+3+4, 4+5}.\n\nBased on these 3 combinations you can select 3 correct options."},{"id":50,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        double [] arr = new int[2]; //Line 3\n        System.out.println(arr[0]); //Line 4\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"0","B":"0","C":"Line 3 causes compilation error","D":"Line 4 causes runtime error","E":"","F":"","G":"","H":"","I":""},"explanation":"int variable can easily be assigned to double type but double [] and int [] are not compatible.\n\nIn fact, both are siblings and can't be assigned to each other, so Line 3 causes compilation failure."},{"id":51,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        String [] arr = {\"A\", \"B\", \"C\", \"D\"};\n        arr[0] = arr[1];\n        arr[1] = \"E\";\n        for(String s : arr) {\n            System.out.print(s + \" \");\n        }\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"Compilation error","B":"An exception is thrown at runtime","C":"B E C D","D":"E E C D","E":"A E C D","F":"","G":"","H":"","I":""},"explanation":"arr[0] -> \"A\" and  arr[1] -> \"B\". \n\narr[0] = arr[1]; => arr[0] -> \"B\" and arr[1] -> \"B\". \n\narr[1] = \"E\"; => arr[0] -> \"B\" and arr[1] -> \"E\". \n\nHence output is: B E C D"},{"id":52,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        String arr1 [], arr2, arr3 = null; //Line n1\n        arr1 = new String[2];\n        arr1[0] = \"A\";\n        arr1[1] = \"B\";\n        arr2 = arr3 = arr1; //Line n2\n        log(arr2); //Line n3\n    }\n    \n    private static void log(String... vals) {\n        for(String s : vals)\n            System.out.print(s);\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"B","answers":{"A":"Line n1 causes compilation error","B":"Line n2 causes compilation error","C":"Line n3 causes compilation error","D":"It executes successfully and prints AB on to the console","E":"It executes successfully and prints BA on to the console","F":"It executes successfully and prints A on to the console","G":"It executes successfully and prints B on to the console","H":"","I":""},"explanation":"arr1 is of String[] type, where as arr2 and arr3 are of String type. As all three arr1, arr2 and arr3 are of reference type, hence null can be assigned to all these variables. Line n1 compiles successfully.\n\n\n\nStatement at Line n2: arr2 = arr3 = arr1;\n\n=> arr2 = (arr3 = arr1); //assignment operator is right to left associative.\n\narr3 is of String type and arr1 is of String [] type, hence (arr3 = arr1) causes compilation error.\n\n\nThough you had to select one correct option, hence no need to look further but I am providing explanation for Line n3 as well.\n\nlog(String...) method can be called using a String [] or a String instance or mutliple String instances:\n\nlog(new String[] {\"A\", \"B\"});\n\nlog(\"A\");\n\nlog(\"A\", \"B\");\n\n\nAs arr2 is of String type, hence `log(arr2);` (Line n3) compiles successfully."},{"id":53,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        String [] arr = new String[7];\n        System.out.println(arr);\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"D","answers":{"A":"An exception is thrown at runtime","B":"Compilation Error","C":"It prints null","D":"It prints some text containing @ symbol","E":"","F":"","G":"","H":"","I":""},"explanation":"Variable 'arr' refers to an array object of String of 7 elements and it contains the memory address of String array object.\n\n'arr' is of reference type, therefore when `System.out.println(arr);` is executed, toString() method defined in Object class is invoked, which returns <fully qualified name of internal array class>@<hexadecimal representation of hashcode>. That is why some text containing @ symbol is printed on to the console."},{"id":54,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int [] arr = {10, 20, 30}; //Line n1\n        int i = 0;\n        arr[i++] = arr[++i] = 40; //Line n2\n        for(int x : arr)\n            System.out.println(x);\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"G","answers":{"A":"Compilation error at Line n2","B":"An exception is thrown by Line n2","C":"10\n20\n30","D":"10\n40\n30","E":"40\n40\n30","F":"10\n40\n40","G":"40\n20\n40","H":"","I":""},"explanation":"At Line n1, an int [] object of three elements is created and 'arr' refers to this array object.\n\narr[0] = 10, arr[1] = 20 and arr[2] = 30;\n\n\n\nGiven expression at Line n2:\n\narr[i++] = arr[++i] = 40;\n\nMultiple assignment operators are available, so lets group it first.\n\n=> arr[i++] = (arr[++i] = 40); //Assignment operator is right to left associative\n\nAbove expression is valid, hence Line n2 compiles successfully.\n\nLet's solve the expression now. Left operand is 'arr[i++]' and right operand is '(arr[++i] = 40)'. Left operand is evaluated first.\n\n=> arr[0] = (arr[++i] = 40); //i = 1\n\nRight hand operand is evaluated next.\n\n=> arr[0] = (arr[2] = 40); //i = 2\n\n=> arr[0] = 40; //i = 2, arr[2] = 40.\n\nHence after Line n2, arr refers to int [] object {40, 20, 40}.\n\n\nGiven loop prints below on to the console:\n\n40\n\n20\n\n40"},{"id":55,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        String[] arr = { \"L\", \"I\", \"V\", \"E\" }; //Line n1\n        int i = -2;\n \n        if (i++ == -1) { //Line n2\n            arr[-(--i)] = \"F\"; //Line n3\n        } else if (--i == -2) { //Line n4\n            arr[-++i] = \"O\"; //Line n5\n        }\n        \n        for(String s : arr) {\n            System.out.print(s);\n        }\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"F","answers":{"A":"Compilation error","B":"An exception is thrown at runtime","C":"LIVE","D":"LIFE","E":"LIVO","F":"LOVE","G":"LIOE","H":"","I":""},"explanation":"Line n1 creates a String [] object of 4 elements and arr refers to this array object. arr[0] = \"L\", arr[1] = \"I\", arr[2] = \"V\" and arr[3] = \"E\".\n\ni = -2.\n\nBoolean expression of Line n2: i++ == -1\n\n=> (i++) == -1 //As Post-increment operator ++ has higher precedence over ==\n\n=> -2 == -1 //i = -1, value of i is used in the expression and then incremented.\n\n=> false and hence Line n3 is not executed.\n\nBut there is no issue with Line n3 and it compiles successfully.\n\n\n\nBoolean expression of Line n4 is evaluated next:\n\n--i == -2 //i = -1\n\n=> (--i) == -2 //As Pre-decrement operator -- has higher precedence over ==\n\n=> -2 == -2 //i = -2, value of i is decremented first and then used in the expression.\n\n=> true and hence Line n5 is executed next.\n\n\nLine n5:\n\narr[-++i] = \"O\"; //i = -2\n\n=> arr[-(++i)] = \"O\"; //Unary minus '-' and pre-increment '++' operators have same precedence\n\n=> arr[-(-1)] = \"O\"; //i = -1, value of i is incremented first and then used in the expression.\n\n=> arr[1] = \"O\"; //2nd array element is changed to \"O\".\n\nHence after Line n5, arr refers to {\"L\", \"O\", \"V\", \"E\"}\n\n\nGiven loop prints LOVE on to the console."},{"id":56,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int var = 3;\n        String [][] arr = new String[--var][var++]; //Line n1\n        arr[1][1] = \"X\"; //Line n2\n        arr[1][2] = \"Y\"; //Line n3\n        for(String [] arr1 : arr) {\n            for(String s : arr1) {\n                if(s != null) \n                    System.out.print(s);\n            }\n        }\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"It causes compilation error at single statement","B":"It causes compilation error at multiple statements","C":"It throws an exception at runtime","D":"It prints XY on to the console and program terminates successfully","E":"It prints XY on to the console and program terminates abruptly","F":"","G":"","H":"","I":""},"explanation":"Line n1:\n\nString [][] arr = new String[--var][var++]; //var = 3\n\nAccess array element operator [] is left to right associative.\n\n=> String [][] arr = new String[2][var++]; //var = 2, var is decremented first and then used in the expression.\n\n=> String [][] arr = new String[2][2]; //var = 3, value of var is used first and then it is incremented by 1\n\n\nHence, arr refers to 2-dimensional String array object {{null, null}, {null, null}}.\n\n\nAt Line n2, arr[1][1] = \"X\"; assigns \"X\" to element at index [1][1], therefore arr --> {{null, null}, {null, \"X\"}}\n\n\nAt Line n3, arr[1][2] = \"Y\"; causes ArrayIndexOutOfBoundsException as 2nd index 2 is out of range.\n\n\nAs Line n3 throws Exception at runtime, hence for loop will not be executed."},{"id":57,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int[][] arr = new int[x][y]; //Line n1\n        arr[1][4] = 100;\n        arr[6][6] = 200;\n        arr[3][6] = 300;\n    }\n}\n\n\nAnd below combination of x and y values:\n\n1. x = 6, y = 6\n\n2. x = 2, y = 5\n\n3. x = 4, y = 7\n\n4. x = 7, y = 7\n\n5. x = 8, y = 8\n\n6. x = 0, y = 0\n\n7. x = -1, y = -1\n\nHow many of above x,y pair(s) can replace x and y at Line n1 such that Test.java file compiles successfully?","type":"Single Choice","answer":"A","answers":{"A":"All 7 pairs","B":"6 pairs","C":"5 pairs","D":"4 pairs","E":"3 pairs","F":"2 pairs","G":"1 pair","H":"","I":""},"explanation":"Given question expects you to solve the compilation error and not care about runtime error. For array indexes, any int values can be used, hence all the 7 pairs are allowed in this case.\n\n\nIf question were expecting to compile and execute the program successfully, then any combination greater than the max indexes values would have worked. For example, in the given code, as max 1st dimension value = 6 and max 2nd dimension value = 6, so any int value > 6 can be used for x and any int value > 6 can be used for y.\n\nOut of the given seven options, only two options (x = 7, y = 7) and (x = 8, y = 8) would have worked."},{"id":58,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Which of the following statement is correct for below code?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        final boolean flag = false;\n        while(flag) {\n            System.out.println(\"Good Morning!\");\n        }\n    }\n}","type":"Single Choice","answer":"B","answers":{"A":"Program compiles and executes successfully but produces no output","B":"Compilation error","C":"Infinite loop","D":"It will print \"Good Morning!\" once","E":"","F":"","G":"","H":"","I":""},"explanation":"final boolean flag = false; statement makes flag a compile time constant. \n\nCompiler knows the value of flag, which is false at compile time and hence it gives \"Unreachable Code\" error."},{"id":59,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Which of the following statement is correct for below code?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        final boolean flag;\n        flag = false;\n        while(flag) {\n            System.out.println(\"Good Morning!\");\n        }\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"Program compiles and executes successfully but produces no output","B":"Compilation error","C":"Infinite loop","D":"It will print \"Good Morning!\" once","E":"","F":"","G":"","H":"","I":""},"explanation":"final boolean flag; flag = false; doesn't make flag a compile time constant. \n\nCompiler doesn't know flag's value at compile-time and hence it allows this syntax. \n\nAt runtime, as boolean expression of while loop is false, loop doesn't execute even once and hence no output."},{"id":60,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int x = 5;\n        while (x < 10) \n            System.out.println(x);\n            x++;\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"Compilation error","B":"5\n6\n7\n8\n9","C":"It will go in an infinite loop","D":"Produces no output","E":"","F":"","G":"","H":"","I":""},"explanation":"while loop doesn't have curly bracket over here, so only System.out.println(x) belongs to while loop. \n\nAbove syntax can be written as follows: \n\nint x = 5;  \nwhile (x < 10) {  \n    System.out.println(x);  \n}  \nx++;  \n\n\nAs x++; is outside loop, hence value of x is always 5 within loop, 5 < 10 is true for all the iterations and hence infinite loop."},{"id":61,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Which of the following statement is correct about below code?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        do {\n            System.out.println(100);\n        } while (true);\n        \n        System.out.println(\"Bye\");\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"Compiles successfully and prints \"Bye\"","B":"Compiles successfully and prints 100 in infinite loop","C":"Unreachable code compilation error","D":"100\nBye","E":"","F":"","G":"","H":"","I":""},"explanation":"Boolean expression of do-while loop uses literal true (compile-time constant), hence Java compiler knows that this loop is an infinite loop.\nIt also knows that once at runtime Java Control enters an infinite loop, none of the statements after loop block will get executed. \n\nHence it marks all the codes after infinite loop as Unreachable Code, which results in compilation error. \nIf boolean variable was used instead of boolean literal, then this program would have compiled and executed successfully.\n\n1 public class DoWhileTest1 { \n2     public static void main(String[] args) { \n3         boolean flag = true; \n4         do { \n5             System.out.println(100); \n6         } while (flag); \n7   \n8         System.out.println(\"Bye\"); \n9     } \n10 }\n\nAbove program prints 100 in infinite loop and \"Bye\" never gets printed."},{"id":62,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Which of the following statement is correct about below code?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        do {\n            System.out.println(100);\n        } while (false);\n        System.out.println(\"Bye\");\n    }\n}","type":"Single Choice","answer":"D","answers":{"A":"Compiles successfully and prints \"Bye\"","B":"Compiles successfully and prints 100 in infinite loop","C":"Unreachable code compilation error","D":"100\nBye","E":"","F":"","G":"","H":"","I":""},"explanation":"As do-while loop executes at least once, hence none of the code is unreachable in this case. \n\nJava runtime prints 100 to the console, then it checks boolean expression, which is false. \n\nHence control goes out of do-while block. Java runtime executes 2nd System.out.println statement to print \"Bye\" on to the console."},{"id":63,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int start = 1;\n        int sum = 0;\n        do {\n            if(start % 2 == 0) {\n                continue;\n            }\n            sum += start;\n        } while(++start <= 10);\n        System.out.println(sum);\n    }\n}","type":"Single Choice","answer":"A","answers":{"A":"25","B":"55","C":"Compilation error","D":"24","E":"","F":"","G":"","H":"","I":""},"explanation":"When start is divisible by 2 [2, 4, 6, 8, 10], continue; statement takes the control to boolean expression and hence sum += start; is not executed.\n\nHence result is the sum of numbers 1,3,5,7,9."},{"id":64,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        for(int i=0; i<=2; i++){}\n        System.out.println(i);\n    }\n}","type":"Single Choice","answer":"D","answers":{"A":"0","B":"2","C":"3","D":"Compilation error","E":"","F":"","G":"","H":"","I":""},"explanation":"Variable i is declared inside for loop, hence it is not accessible beyond loop's body.\n\nSystem.out.println(i); causes compilation error."},{"id":65,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int i;\n        for(i=0; i<=2; i++){}\n        System.out.println(i);\n    }\n}","type":"Single Choice","answer":"C","answers":{"A":"0","B":"2","C":"3","D":"Compilation error","E":"","F":"","G":"","H":"","I":""},"explanation":"There is nothing inside loop body, hence loop body is blank. \n\nThis loop executes 3 times, for i = 0, i = 1 and i = 2. For i = 3, control goes out of the for loop. \n\nNow, as i is declared outside for loop, hence it is accessible outside loop body. \n\nSystem.out.println(i); prints 3 to the console."},{"id":66,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        for:\n        for (int i = 2; i <= 100; i = i + 2) {\n            for(int j = 1; j <= 10; j++) {\n                System.out.print(i * j + \"\\t\");\n            }\n            System.out.println();\n            if(i == 10) {\n                break for;\n            }\n        }\n    }\n}","type":"Single Choice","answer":"D","answers":{"A":"Total 5 rows will be there in the output","B":"Total 50 rows will be there in the output","C":"Total 100 rows will be there in the output","D":"Compilation error","E":"","F":"","G":"","H":"","I":""},"explanation":"for is a keyword and hence can't be used as a label.\n\nJava labels follow the identifier naming rules and one rule is that we can't use java keywords as identifier. Hence, Compilation error."},{"id":67,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int i;\n        outer: \n        do {\n            i = 5;\n            inner:\n            while (true) {\n                System.out.println(i--);\n                if (i == 4) {\n                    break outer;\n                }\n            }\n        } while (true);\n    }\n}","type":"Single Choice","answer":"B","answers":{"A":"Prints 5 in an infinite loop.","B":"Prints 5 once.","C":"Compilation error.","D":"5\n3\n2\n1","E":"","F":"","G":"","H":"","I":""},"explanation":"\"outer\" and \"inner\" are valid label names. \n\nOn execution, control enters main method and creates int variable i. \n\nOn encountering do-while loop, control goes inside and initializes variable i to 5. \n\nThen it executes while loop and it's boolean expression is always true. \n\nSystem.out.println(i--); prints 5 to the console first, and then decrements the value of i by 1. So, i becomes 4. \n\nBoolean expression of if(i == 4) evaluates to true. break outer; statement executes and takes the control out of do-while loop. \n\nmain method ends and program terminates successfully. \n\nSo, 5 gets printed only once."},{"id":68,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider given code: \n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        String [][] fruits = {{\"apple\", \"mango\"}, {\"orange\", \"grape\"}};\n        /*INSERT*/\n    }\n}\nFor the class Test, which options, if used to replace /*INSERT*/, will print \"apple mango orange grape \" on to the console?\n\nSelect 2 options.","type":"Multiple Choice","answer":"A,D","answers":{"A":"for(int i = 0; i < fruits.length; i++) \n     for(int j = 0; j < fruits[i].length ; j++)\n         System.out.print(fruits[i][j] + \" \");","B":"for(int i = 1; i <= fruits.length; i++) \n     for(int j = 1; j <= fruits[i].length ; j++)\n         System.out.print(fruits[i][j] + \" \");","C":"for(int i = 1; i < fruits.length; i++) \n     for(int j = 1; j < fruits[i].length ; j++)\n         System.out.print(fruits[i][j] + \" \");","D":"for(String [] arr : fruits) \n     for(String fruit : arr)\n         System.out.print(fruit + \" \");","E":"","F":"","G":"","H":"","I":""},"explanation":"Easy question on iterating through 2-dimensional array.\n\nStarting index should be 0 and not 1. Enhanced for loop syntax is correct.\n\nAs for loops contain 1 statement, hence curly brackets can be ignored."},{"id":69,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int [] arr = {2, 1, 0};\n        for(int i : arr) {\n            System.out.println(arr[i]);\n        }\n    }\n}","type":"Single Choice","answer":"B","answers":{"A":"2\n1\n0","B":"0\n1\n2","C":"Compilation error","D":"ArrayIndexOutOfBoundsException is thrown at runtime","E":"","F":"","G":"","H":"","I":""},"explanation":"Inside enhanced for loop, System.out.println(arr[i]); is used instead of System.out.println(i); \n\nWhen loop executes 1st time, i stores the first array element, which is 2 but System.out.println statement prints arr[2] which is 0.\n\nLoop executes in this manner and prints 0 1 2 on to the console."},{"id":70,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"What will be the result of compiling and executing Test class?\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int [] arr = {3, 2, 1};\n        for(int i : arr) {\n            System.out.println(arr[i]);\n        }\n    }\n}","type":"Single Choice","answer":"D","answers":{"A":"3\n2\n1","B":"1\n2\n3","C":"Compilation error","D":"ArrayIndexOutOfBoundsException is thrown at runtime","E":"","F":"","G":"","H":"","I":""},"explanation":"Inside enhanced for loop, System.out.println(arr[i]); is used instead of System.out.println(i); \n\nWhen loop executes 1st time, i stores the first array element, which is 3 but System.out.println statement prints arr[3] and this causes java runtime to throw the instance of ArrayIndexOutOfBoundsException."},{"id":71,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int elements = 0;\n        Object [] arr = {\"A\", \"E\", \"I\", new Object(), \"O\", \"U\"}; //Line n1\n        for(Object obj : arr) { //Line n2\n            if(obj instanceof String) {\n                continue;\n            } else {\n                break;\n            }\n            elements++; //Line n3\n        }\n        System.out.println(elements); //Line n4\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"H","answers":{"A":"0","B":"1","C":"3","D":"5","E":"6","F":"Compilation error at Line n1","G":"Compilation error at Line n2","H":"Compilation error at Line n3","I":"Compilation error at Line n4"},"explanation":"Line n1 and Line n2 don't cause any compilation error.\n\nif-else block uses break; and continue; statements. break; will exit the loop and will take the control to Line n4 on the other hand continue; will take the control to Line n2. In both the cases Line n3 will never be executed.\n\nAs Compiler knows about it, hence it tags Line n3 as unreachable, which causes compilation error."},{"id":72,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        String [][] arr = { {\"%\", \"$$\"}, {\"***\", \"@@@@\", \"#####\"}};\n        for(String [] str : arr) {\n            for(String s : str) {\n                System.out.println(s);\n                if(s.length() == 4) //Line n1\n                    break; //Line n2\n            }\n            break; //Line n3\n        }\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"B","answers":{"A":"%","B":"%\n$$","C":"%\n$$\n***","D":"%\n$$\n***\n@@@@","E":"%\n$$\n***\n@@@@\n#####","F":"","G":"","H":"","I":""},"explanation":"Variable 'arr' refers to a two-dimensional array. for-each loops are used to iterate the given array.\n\nIn 1st iteration of outer loop, str refers to one-dimensional String array {\"%\", \"$$\"}.\n\nIn 1st iteration of inner loop, s refers to \"%\" and \"%\" will be printed on to the console. Boolean expression of Line n1 evaluates to false so Line n2 is not executed.\n\nIn 2nd iteration of inner loop, s refers to \"$$\" and \"$$\" will be printed on to the console. Boolean expression of Line n1 evaluates to false so Line n2 is not executed.\n\nIteration of inner for-each loop is over and control executes Line n3. break; statement at Line n3 terminates the outer loop and program ends successfully.\n\n\nSo, output is:\n\n%\n\n$$"},{"id":73,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int ctr = 100;\n        one: for (int i = 0; i < 10; i++) {\n            two: for (int j = 0; j < 7; j++) {\n                three: while (true) {\n                    ctr++;\n                    if (i > j) {\n                        break one;\n                    } else if (i == j) {\n                        break two;\n                    } else {\n                        break three;\n                    }\n                }\n            }\n        }\n        System.out.println(ctr);\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"D","answers":{"A":"Compilation error","B":"100","C":"101","D":"102","E":"103","F":"104","G":"105","H":"106","I":""},"explanation":"For the 1st loop variable 'i' infers to int type, so no issues for 1st loop and for the 2nd loop variable 'j' infers to int type, so no issues for 2nd loop as well.\n\nLet's check the iteration:\n\n1st iteration of loop one: i = 0\n\n    1st iteration of loop two: j = 0\n\n        1st iteration of loop three: ctr = 101. As `i == j` evaluates to true, hence `break two;` gets executed, which takes the control out of loop two and hence to the increment expression (i++) of loop one.\n\n2nd iteration of loop one; i = 1\n\n    1st iteration of loop two: j = 0\n\n        1st iteration of loop three; ctr = 102. As `i > j` evaluates to true, hence `break one;` gets executed, which takes the control out of the loop one.\n\n\n\n`System.out.println(ctr);` prints 102 on to the console."},{"id":74,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int i = 1;\n        int j = 5;\n        int k = 0;\n        A: while(true) {\n            i++;\n            B: while(true) {\n                j--;\n                C: while(true) {\n                    k += i + j;\n                    if(i == j)\n                        break A;\n                    else if (i > j)\n                        continue A;\n                    else \n                        continue B;\n                }\n            }\n        }\n        System.out.println(k);\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"E","answers":{"A":"Compilation error","B":"Program never terminates as above code causes infinite loop","C":"6","D":"11","E":"15","F":"None of the other options","G":"","H":"","I":""},"explanation":"No syntax error in the given code.\n\nInitially, i = 1, j = 5 and k = 0.\n\n1st iteration of A: i = 2.\n\n    1st iteration of B: j = 4.\n\n        1st iteration of C: k = k + i + j = 0 + 2 + 4 = 6. `i == j` evaluates to false and `i > j` also evaluates to false, hence else block gets executed. `continue B` takes the control to the loop B.\n\n    2nd iteration of B: j = 3.\n\n        1st iteration of C: k = k + i + j = 6 + 2 + 3 = 11. `i == j` evaluates to false and `i > j` also evaluates to false, hence else block gets executed. `continue B` takes the control to the loop B.\n\n    3rd iteration of B: j = 2.\n\n        1st iteration of C: k = k + i + j = 11 + 2 + 2 = 15. `i == j` evaluates to true, control breaks out of the loop A.\n\n\n\n`System.out.println(k);` prints 15 on to the console."},{"id":75,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        outer: for(int i = 0; i < 3; System.out.print(i)) {\n            i++;\n            inner: for(int j = 0; j < 3; System.out.print(j)) {\n                if(i > ++j) {\n                    break outer;\n                }\n            }\n        }\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"E","answers":{"A":"Compilation error","B":"Program terminates successfully but nothing is printed on to the console","C":"Program terminates successfully after printing 12 on to the console","D":"Program terminates successfully after printing 123 on to the console","E":"Program terminates successfully after printing 1231 on to the console","F":"Program terminates successfully after printing 121 on to the console","G":"Program terminates successfully after printing 0120 on to the console","H":"","I":""},"explanation":"Basic/Regular for loop has following form:\n\nfor ( [ForInit] ; [Expression] ; [ForUpdate] ) {...}\n\n[ForInit] can be local variable initialization or the following expressions:\n\nAssignment\n\nPreIncrementExpression\n\nPreDecrementExpression\n\nPostIncrementExpression\n\nPostDecrementExpression\n\nMethodInvocation\n\nClassInstanceCreationExpression\n\n\n[ForUpdate] can be following expressions:\n\nAssignment\n\nPreIncrementExpression\n\nPreDecrementExpression\n\nPostIncrementExpression\n\nPostDecrementExpression\n\nMethodInvocation\n\nClassInstanceCreationExpression\n\n\nThe [Expression] must have type boolean or Boolean, or a compile-time error occurs. If [Expression] is left blank, it evaluates to true.\n\n\nAll the expressions can be left blank; for(;;) is a valid for loop and it is an infinite loop as [Expression] is blank and evaluates to true.\nAll the expressions can be left blank; for(;;) is a valid for loop and it is an infinite loop as [Expression] is blank and evaluates to true.\n\n\n\nIn the given code, for both the loops, `System.out.print(...)` is used as [ForUpdate] expression, which is a MethodInvocation expression and hence a valid statement.\n\nGiven code compiles successfully.\n\n\n\nLet's check the iterations:\n\n1st iteration of outer: i = 0. i < 3 evaluates to true.\n\n    i = 1.\n\n    1st iteration of inner: j = 0. j < 3 evaluates to true as j = 0. Boolean expression `i > ++j` = `1 > 1` evaluates to false. j = 1.\n\n    2nd iteration of inner: `System.out.print(j)` prints 1 to the console. j < 3 evaluates to true as j = 1. Boolean expression `i > ++j` = `1 > 2` evaluates to false. j = 2.\n\n    3rd iteration of inner: `System.out.print(j)` prints 2 to the console. j < 3 evaluates to true as j = 2. Boolean expression `i > ++j` = `1 > 3` evaluates to false. j = 3.\n\n    4th iteration of inner: `System.out.print(j)` prints 3 to the console. j < 3 evaluates to false as j = 3. Control goes out of inner for loop and to the [ForUpdate] expression of outer loop.\n\n2nd iteration of outer: `System.out.print(i)` prints 1 to the console. i < 3 evaluates to true as i = 1.\n\n    i = 2.\n\n    1st iteration of inner: j = 0. j < 3 evaluates to true as j = 0. Boolean expression `i > ++j` = `2 > 1` evaluates to true. j = 1. ` break outer;` takes the control out of the outer for loop.\n\n\n\nProgram terminates successfully after printing 1231 on to the console."},{"id":76,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        int i = 0;\n        for(System.out.print(i++); i < 2; System.out.print(i++)) {\n            System.out.print(i);\n        }\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"112","B":"012","C":"011","D":"12","E":"1","F":"Compilation error","G":"","H":"","I":""},"explanation":"Basic/Regular for loop has following form:\n\nfor ( [ForInit] ; [Expression] ; [ForUpdate] ) {...}\n\n[ForInit] can be local variable initialization or the following expressions:\n\nAssignment\n\nPreIncrementExpression\n\nPreDecrementExpression\n\nPostIncrementExpression\n\nPostDecrementExpression\n\nMethodInvocation\n\nClassInstanceCreationExpression\n\n\n\n[ForUpdate] can be following expressions:\n\nAssignment\n\nPreIncrementExpression\n\nPreDecrementExpression\n\nPostIncrementExpression\n\nPostDecrementExpression\n\nMethodInvocation\n\nClassInstanceCreationExpression\n\n\n\nThe [Expression] must have type boolean or Boolean, or a compile-time error occurs. If [Expression] is left blank, it evaluates to true.\n\n\nAll the expressions can be left blank; for(;;) is a valid for loop and it is an infinite loop as [Expression] is blank and evaluates to true.\n\n\nIn the given code, for [ForInit] and [ForUpdate], `System.out.print(i++);` is used, which is a method invocation statement and hence a valid statement. Given code compiles fine.\n\n\nLet's check the iterations:\n\n1st iteration: [ForInit] expression is executed, 0 is printed on to the console. i = 1. i < 2 evaluates to true, control goes inside the loop's body and execute `System.out.print(i);` statement. 1 is printed on to the console.\n\n2nd iteration: [ForUpdate] expression is executed, 1 is printed on to the console. i = 2. 2 < 2 evaluates to false, control goes out of the for loop. main method ends and program terminates successfully after printing 011 on to the console."},{"id":77,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        for(int x = 10, y = 11, z = 12; y > x && z > y; y++, z -= 2) {\n            System.out.println(x + y + z);\n        }\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"B","answers":{"A":"32","B":"33","C":"34","D":"32\n33","E":"Compilation error","F":"","G":"","H":"","I":""},"explanation":"Basic/Regular for loop has following form:\n\nfor ( [ForInit] ; [Expression] ; [ForUpdate] ) {...}\n\n[ForInit] can be local variable initialization or the following expressions:\n\nAssignment\n\nPreIncrementExpression\n\nPreDecrementExpression\n\nPostIncrementExpression\n\nPostDecrementExpression\n\nMethodInvocation\n\nClassInstanceCreationExpression\n\n\n\n[ForUpdate] can be following expressions:\n\nAssignment\n\nPreIncrementExpression\n\nPreDecrementExpression\n\nPostIncrementExpression\n\nPostDecrementExpression\n\nMethodInvocation\n\nClassInstanceCreationExpression\n\n\n\nThe [Expression] must have type boolean or Boolean, or a compile-time error occurs. If [Expression] is left blank, it evaluates to true.\n\n\n\nAll the expressions can be left blank; for(;;) is a valid for loop and it is an infinite loop as [Expression] is blank and evaluates to true.\n\n\n\nMultiple comma separated statements are allowed for [ForInit] and [ForUpdate] expressions, where as [Expression] must be single expression which results in boolean or Boolean.\n\n\n\nIn the given for loop:\n\n[ForInit] = int x = 10, y = 11, z = 12: It is allowed. 3 variables are declared and initialized. x = 10, y = 11 & z = 12.\n\n[Expression] = y > x && z > y = (y > x) && (z > y) [Relational operator has higher precedence than logical AND]. This expression is valid and results in boolean value.\n\n[ForUpdate] = y++, z -= 2. It is allowed. y is incremented by 1 and z is decremented by 2.\n\n\nLet's check the loop's iteration:\n\n1st iteration: x = 10, y = 11, z = 12. (y > x) && (z > y) = (11 > 10) && (12 > 11) = true && true = true. Loop's body is executed and prints x + y + z = 10 + 11 + 12 = 33 on to the console.\n\n2nd iteration: [ForUpdate] is executed. y = 12, z = 10. (y > x) && (z > y) = (12 > 10) && (10 > 12) = true && false = false.\n\nControl goes out of for loop and program terminates successfully.\n\n\nLoop's body executes once and prints 33 on to the console."},{"id":78,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider below code of Test.java file:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        boolean flag = false;\n        do {\n            if(flag = !flag) { //Line n1\n                System.out.print(1); //Line n2\n                continue; //Line n3\n            }\n            System.out.print(2); //Line n4\n        } while(flag); //Line n5\n    }\n}\n\n\nWhat will be the result of compiling and executing Test class?","type":"Single Choice","answer":"C","answers":{"A":"1","B":"2","C":"12","D":"21","E":"212","F":"121","G":"112","H":"211","I":"Compilation error"},"explanation":"Body of do-while loop is executed first and then condition is checked for the next iteration.\n\nInitially, flag = false;\n\n1st iteration: Boolean expression of if-block `flag = !flag` = `flag = !false` = `flag = true`: it assigns true to variable 'flag' and evaluates to true as well. Line n2 is executed and 1 is printed on to the console. Line n3 takes the control to the boolean expression of Line n5.\n\n2nd iteration: As flag is true, boolean expression at Line n5 evaluates to true and control enters the loop's body. Boolean expression of if-block `flag = !flag` = `flag = !true` = `flag = false`: it assigns false to variable 'flag' and evaluates to false as well. Line n2 and Line n3 are not executed. Line n4 is executed, which prints 2 on to the console. Control goes to the boolean expression of Line n5.\n\n3rd iteration: As flag is false, boolean expression at Line n5 evaluates to false and control exits the loop.\n\n\nProgram terminates successfully after printing 12 on to the console."},{"id":79,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Consider 2 files:\n\n//Counter.java\npackage com.github.oca;\n \npublic class Counter {\n    public int count = 0;\n \n    public Counter(int start) {\n        count = start;\n    }\n \n    public int getCount() {\n        return count;\n    }\n \n    public void increase(int val) {\n        count = count + val;\n    }\n \n    public String toString() {\n        return this.count + \"\";\n    }\n}\n\n\n//Test.java\npackage com.github.oca.test;\n \nimport java.util.Arrays;\n \nimport com.github.oca.Counter;\n \npublic class Test {\n    public static void main(String[] args) {\n        Counter[] arr = new Counter[] { new Counter(-1000), new Counter(539), new Counter(0) };\n \n        /* INSERT */\n \n        System.out.println(Arrays.toString(arr));\n    }\n}\n\n\nCurrently on executing Test class, output is: [-1000, 539, 0].\n\n\n\nAnd below blocks:\n\n1.\n\nfor(Counter ctr : arr) {\n\n    ctr.count = 100;\n\n}\n\n2.\n\nfor (Counter ctr : arr) {\n\n    int x = ctr.getCount();\n\n    x = 100;\n\n}\n\n3.\n\nfor (Counter ctr : arr) {\n\n    ctr.getCount() = 100;\n\n}\n\n4.\n\nfor(Counter ctr : arr) {\n\n    ctr.increase(100 - ctr.count);\n\n}\n\n5.\n\nfor (Counter ctr : arr) {\n\n    ctr.increase(100 - ctr.getCount());\n\n}\n\n6.\n\nfor(Counter ctr : arr) {\n\n    ctr.increase(-ctr.getCount() + 100);\n\n}\n\n7.\n\nfor(Counter ctr : arr) {\n\n    ctr.increase(-ctr.count + 100);\n\n}\n\n\n\nHow many blocks can replace /*INSERT*/ such that output is: [100, 100, 100]?","type":"Single Choice","answer":"E","answers":{"A":"Only One block","B":"Only Two blocks","C":"Only Three blocks","D":"Only Four blocks","E":"Only Five blocks","F":"Only Six blocks","G":"All Seven blocks","H":"","I":""},"explanation":"There are 2 ways to change the value of count variable of Counter class:\n\n1. As access modifier of count variable is public, hence it can easily be accessed from other classes using the instance of Counter class, such as `new Counter().count` or `obj.count` (where obj is reference variable of Counter type, referring to Counter variable's instance)\n\n2. By invoking the increase(int) method of Counter class.\n\n\n\nNow let's check all the blocks one by one:\n\n1.\n\nfor(Counter ctr : arr) {\n\n    ctr.count = 100;\n\n}\n\n✓ It will assign 100 to count variables of three instances of Counter class.\n\n\n\n2.\n\nfor (Counter ctr : arr) {\n\n    int x = ctr.getCount();\n\n    x = 100;\n\n}\n\n✗ x is local variable and is copy of ctr.count. Hence, assigning 100 to x will not affect the value of ctr.count.\n\n\n\n3.\n\nfor (Counter ctr : arr) {\n\n    ctr.getCount() = 100;\n\n}\n\n✗ ctr.getCount() returns int value and not a variable, hence cannot be used on left side of assignment operator. It causes compilation error.\n\n\n\n4.\n\nfor(Counter ctr : arr) {\n\n    ctr.increase(100 - ctr.count);\n\n}\n\n✓ You must have noticed that value of count variable of 3 array elements are: -1000, 539, 0. How will you change all 3 values to 100 using same expression? It is by adding 100 and subtracting current value. For example,\n\n-1000 + 100 -(-1000) = 100\n\nor\n\n539 + 100 - 539 = 100\n\nor\n\n0 + 100 - 0 = 100\n\nAnd same this is done by executing `ctr.increase(100 - ctr.count);` statement.\n\n\n\n5.\n\nfor (Counter ctr : arr) {\n\n    ctr.increase(100 - ctr.getCount());\n\n}\n\n✓ Same as block no. 4. Only difference is ctr.getCount() is used instead of ctr.count.\n\n\n\n6.\n\nfor(Counter ctr : arr) {\n\n    ctr.increase(-ctr.getCount() + 100);\n\n}\n\n✓ Same as block no. 5.\n\n\n\n7.\n\nfor(Counter ctr : arr) {\n\n    ctr.increase(-ctr.count + 100);\n\n}\n\n✓ Same as block no. 4.\n\n\n\nHence, out of given 7 blocks, 5 will give you expected output."},{"id":80,"trainingUnit":"OCA","trainingContent":"Operators, Decision Constructs, Arrays and Loops","question":"Given code:\n\npackage com.github.oca;\n \npublic class Test {\n    public static void main(String[] args) {\n        /*INSERT*/\n        arr[1] = 5;\n        arr[2] = 10;\n        System.out.println(\"[\" + arr[1] + \", \" + arr[2] + \"]\"); //Line n1\n    }\n}\n\n\nAnd below statements:\n\n1. short arr [] = new short[2];\n\n2. byte [] arr = new byte[10];\n\n3. short [] arr; arr = new short[3];\n\n4. short [2] arr;\n\n5. short [3] arr;\n\n6. int [] arr = new int[]{100, 100};\n\n7. int [] arr = new int[]{0, 0, 0, 0};\n\n8. short [] arr = {};\n\n9. short [] arr = new short[2]{5, 10};\n\n\nHow many above statements can be used to replace /*INSERT*/, such that on execution, code will print [5, 10] on to the console?","type":"Single Choice","answer":"C","answers":{"A":"Only one option","B":"Only two options","C":"Only three options","D":"Only four options","E":"None of the given options","F":"More than four options","G":"","H":"","I":""},"explanation":"Let's check all the statements one by one:\n\n1. short arr [] = new short[2]; => ✗\n\nYou can declare one-dimensional array by using either \"short arr []\" or \"short [] arr\". 'arr' refers to a short array object of 2 elements. arr[2] will throw ArrayIndexOutOfBoundsException at runtime.\n\n\n\n2. byte [] arr = new byte[10]; => ✓\n\n'arr' refers to a byte array object of 10 elements, where 0 is assigned to each array element. But later on element at 1st and 2nd indexes have been re-initialized. Line n1 successfully prints [5, 10] on to the console.\n\n\n\n3. short [] arr; arr = new short[3]; => ✓\n\nYou can create an array object in the same statement or next statement. 'arr' refers to a short array object of 3 elements, where 0 is assigned to each array element. Later on element at 1st and 2nd indexes have been re-initialized. Line n1 successfully prints [5, 10] on to the console.\n\n\n\n4. short [2] arr; ✗\n\nArray size cannot be specified at the time of declaration, so short [2] arr; causes compilation error. \n\n\n\n5. short [3] arr; ✗\n\nArray size cannot be specified at the time of declaration, so short [3] arr; causes compilation error.\n\n\n\n6. int [] arr = new int[]{100, 100}; => ✗\n\n'arr' refers to an int array object of size 2 and both array elements have value 100. arr[2] will throw ArrayIndexOutOfBoundsException at runtime.\n\n\n\n7. int [] arr = new int[]{0, 0, 0, 0}; => ✓\n\n'arr' refers to an int array object of size 4 and all array elements have value 0. Later on element at 1st and 2nd indexes have been re-initialized. Line n1 successfully prints [5, 10] on to the console.\n\n\n\n8. short [] arr = {}; => ✗\n\n'arr' refers to a short array object of 0 size. so arr[1] will throw ArrayIndexOutOfBoundsException at runtime.\n\n\n\n9. short [] arr = new short[2]{5, 10}; => ✗\n\nArray's size can't be specified, if you use {} to assign values to array elements.\n\n\n\nHence, out of the given 9 statements, only 3 will print [5, 10] on to the console."}]